{
  "manifest": {
    "name": "ethereum-cryptography",
    "version": "0.1.3",
    "description": "All the cryptographic primitives used in Ethereum",
    "contributors": [
      {
        "name": "Patricio Palladino",
        "email": "patricio@nomiclabs.io"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/ethereum/js-ethereum-cryptography.git"
    },
    "license": "MIT",
    "keywords": [
      "ethereum",
      "cryptography",
      "digital signature",
      "hash",
      "encryption",
      "prng",
      "keccak",
      "scrypt",
      "pbkdf2",
      "sha-256",
      "ripemd-160",
      "blake2b",
      "aes",
      "advanced encryption standar",
      "secp256k1",
      "ecdsa",
      "bip32",
      "hierarchical deterministic keys",
      "hdwallet",
      "hdkeys"
    ],
    "main": "./index.js",
    "types": "./index.d.ts",
    "files": [
      "src",
      "vendor",
      "shims",
      "bip39",
      "*.js",
      "*.js.map",
      "*.d.ts",
      "*.d.ts.map",
      "pure/**/*.js",
      "pure/**/*.js.map",
      "pure/**/*.d.ts",
      "pure/**/*.d.ts.map"
    ],
    "browser": {
      "./hdkey.js": "./pure/hdkey.js",
      "./ripemd160.js": "./pure/ripemd160.js",
      "./sha256.js": "./pure/sha256.js"
    },
    "sideEffects": false,
    "scripts": {
      "prepare": "npm run build",
      "build": "npm-run-all build:tsc hdkey-without-crypto:build hdkey-without-crypto:copy bip39-without-wordlists:build bip39-without-wordlists:copy",
      "build:tsc": "tsc --project tsconfig.prod.json",
      "test": "npm-run-all hdkey-without-crypto:build bip39-without-wordlists:build test:node",
      "test:node": "mocha",
      "clean": "rimraf vendor test-builds pure shims hdkey-without-crypto-build bip39-without-wordlists-build bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'",
      "lint": "tslint --project tsconfig.json",
      "lint:fix": "tslint --fix --project tsconfig.json",
      "browser-tests": "npm-run-all browser-tests:build browser-tests:test",
      "browser-tests:build": "bash -x ./scripts/build-browser-tests.sh",
      "browser-tests:test": "npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup",
      "browser-tests:test-parcel": "karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js",
      "browser-tests:test-browserify": "karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js",
      "browser-tests:test-webpack": "karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js",
      "browser-tests:test-rollup": "karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js",
      "hdkey-without-crypto:build": "bash -x scripts/build-hdkey-without-crypto.sh",
      "hdkey-without-crypto:copy": "mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor",
      "bip39-without-wordlists:build": "bash -x scripts/build-bip39-without-wordlists.sh",
      "bip39-without-wordlists:copy": "mkdir -p vendor && cp src/vendor/bip39-without-wordlists.js ./vendor"
    },
    "devDependencies": {
      "@types/chai": "^4.2.1",
      "@types/mocha": "^5.2.7",
      "@types/node": "^8.10.52",
      "browserify": "^16.5.0",
      "chai": "^4.2.0",
      "karma": "^4.3.0",
      "karma-chai": "^0.1.0",
      "karma-chrome-launcher": "^3.1.0",
      "karma-mocha": "^1.3.0",
      "karma-mocha-reporter": "^2.2.5",
      "mocha": "^6.2.0",
      "npm-run-all": "^4.1.5",
      "parcel-bundler": "^1.12.3",
      "prettier": "1.18.2",
      "rimraf": "^3.0.0",
      "rollup": "^1.20.3",
      "rollup-plugin-alias": "^2.0.0",
      "rollup-plugin-commonjs": "^10.1.0",
      "rollup-plugin-json": "^4.0.0",
      "rollup-plugin-node-builtins": "^2.1.2",
      "rollup-plugin-node-globals": "^1.4.0",
      "rollup-plugin-node-resolve": "^5.2.0",
      "rollup-plugin-replace": "^2.2.0",
      "ts-node": "^8.3.0",
      "tslint": "^5.19.0",
      "tslint-config-prettier": "^1.18.0",
      "tslint-plugin-prettier": "^2.0.1",
      "typescript": "~3.6.2",
      "webpack": "^4.39.3",
      "webpack-cli": "^3.3.8"
    },
    "dependencies": {
      "@types/pbkdf2": "^3.0.0",
      "@types/secp256k1": "^4.0.1",
      "blakejs": "^1.1.0",
      "browserify-aes": "^1.2.0",
      "bs58check": "^2.1.2",
      "create-hash": "^1.2.0",
      "create-hmac": "^1.1.7",
      "hash.js": "^1.1.7",
      "keccak": "^3.0.0",
      "pbkdf2": "^3.0.17",
      "randombytes": "^2.1.0",
      "safe-buffer": "^5.1.2",
      "scrypt-js": "^3.0.0",
      "secp256k1": "^4.0.1",
      "setimmediate": "^1.0.5"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ethereum-cryptography-0.1.3-integrity/node_modules/ethereum-cryptography/package.json",
    "readmeFilename": "README.md",
    "readme": "# ethereum-cryptography\n\n[![npm version][1]][2]\n[![Travis CI][3]][4]\n[![license][5]][6]\n[![Types][7]][8]\n\nThis npm package contains all the cryptographic primitives normally used when\ndeveloping Javascript/TypeScript applications and tools for Ethereum.\n\nPure Javascript implementations of all the primitives are included, so it can\nbe used out of the box for web applications and libraries.\n\nIn Node, it takes advantage of the built-in and N-API based implementations\nwhenever possible.\n\nThe cryptographic primitives included are:\n\n* [Pseudorandom number generation](#pseudorandom-number-generation-submodule)\n* [Keccak](#keccak-submodule)\n* [Scrypt](#scrypt-submodule)\n* [PBKDF2](#pbkdf2-submodule)\n* [SHA-256](#sha-256-submodule)\n* [RIPEMD-160](#ripemd-160-submodule)\n* [BLAKE2b](#blake2b-submodule)\n* [AES](#aes-submodule)\n* [Secp256k1](#secp256k1-submodule)\n* [Hierarchical Deterministic keys derivation](#hierarchical-deterministic-keys-submodule)\n* [Seed recovery phrases](#seed-recovery-phrases)\n\n## Installation\n\nVia `npm`:\n\n```bash\n$ npm install ethereum-cryptography\n```\n\nVia `yarn`:\n\n```bash\n$ yarn add ethereum-cryptography\n```\n\n## Usage\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n## Pseudorandom number generation submodule\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nIn Node, this functions are backed by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback).\n\nIn the browser, [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues)\nis used. If not available, this module won't work, as that would be insecure.\n\n### Function types\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Buffer>;\n\nfunction getRandomBytesSync(bytes: number): Buffer;\n```\n\n### Example usage\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\nconsole.log(getRandomBytesSync(32).toString(\"hex\"));\n```\n\n## Keccak submodule\n\nThe `keccak` submodule has four functions that implement different variations of\nthe Keccak hashing algorithm. These are `keccak224`, `keccak256`, `keccak384`,\nand `keccak512`.\n\n### Function types\n\n```ts\nfunction keccak224(msg: Buffer): Buffer;\n\nfunction keccak256(msg: Buffer): Buffer;\n\nfunction keccak384(msg: Buffer): Buffer;\n\nfunction keccak512(msg: Buffer): Buffer;\n```\n\n### Example usage\n\n```js\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\n\nconsole.log(keccak256(Buffer.from(\"Hello, world!\", \"ascii\")).toString(\"hex\"));\n```\n\n## Scrypt submodule\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\n### Password encoding\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using this submodule.\n\n### Function types\n\n```ts\nfunction scrypt(password: Buffer, salt: Buffer, n: number, p: number, r: number, dklen: number): Promise<Buffer>;\n\nfunction scryptSync(password: Buffer, salt: Buffer, n: number, p: number, r: number, dklen: number): Buffer;\n```\n\n### Example usage\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\nconsole.log(\n  scryptSync(\n    Buffer.from(\"ascii password\", \"ascii\"),\n    Buffer.from(\"salt\", \"hex\"),\n    16,\n    1,\n    1,\n    64\n  ).toString(\"hex\")\n);\n```\n\n## PBKDF2 submodule\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\n### Password encoding\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using this submodule.\n\n### Supported digests\n\nIn Node this submodule uses the built-in implementation and supports any digest\nreturned by [`crypto.getHashes`](https://nodejs.org/api/crypto.html#crypto_crypto_gethashes).\n\nIn the browser, it is tested to support at least `sha256`, the only digest\nnormally used with `pbkdf2` in Ethereum. It may support more.\n\n### Function types\n\n```ts\nfunction pbkdf2(password: Buffer, salt: Buffer, iterations: number, keylen: number, digest: string): Promise<Buffer>;\n\nfunction pbkdf2Sync(password: Buffer, salt: Buffer, iterations: number, keylen: number, digest: string): Buffer;\n```\n\n### Example usage\n\n```js\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\n\nconsole.log(\n  pbkdf2Sync(\n    Buffer.from(\"ascii password\", \"ascii\"),\n    Buffer.from(\"salt\", \"hex\"),\n    4096,\n    32,\n    'sha256'\n  ).toString(\"hex\")\n);\n```\n\n## SHA-256 submodule\n\nThe `sha256` submodule contains a single function implementing the SHA-256\nhashing algorithm.\n\n### Function types\n\n```ts\nfunction sha256(msg: Buffer): Buffer;\n```\n\n### Example usage\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\nconsole.log(sha256(Buffer.from(\"message\", \"ascii\")).toString(\"hex\"));\n```\n\n## RIPEMD-160 submodule\n\nThe `ripemd160` submodule contains a single function implementing the\nRIPEMD-160 hashing algorithm.\n\n### Function types\n\n```ts\nfunction ripemd160(msg: Buffer): Buffer;\n```\n\n### Example usage\n\n```js\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\n\nconsole.log(ripemd160(Buffer.from(\"message\", \"ascii\")).toString(\"hex\"));\n```\n\n## BLAKE2b submodule\n\nThe `blake2b` submodule contains a single function implementing the\nBLAKE2b non-keyed hashing algorithm.\n\n### Function types\n\n```ts\nfunction blake2b(input: Buffer, outputLength = 64): Buffer;\n```\n\n### Example usage\n\n```js\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nconsole.log(blake2b(Buffer.from(\"message\", \"ascii\")).toString(\"hex\"));\n```\n\n## AES submodule\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Function types\n\n```ts\nfunction encrypt(msg: Buffer, key: Buffer, iv: Buffer, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Buffer;\n\nfunction decrypt(cypherText: Buffer, key: Buffer, iv: Buffer, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Buffer\n```\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\nconsole.log(\n  encrypt(\n    Buffer.from(\"message\", \"ascii\"),\n    Buffer.from(\"2b7e151628aed2a6abf7158809cf4f3c\", \"hex\"),\n    Buffer.from(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\", \"hex\")\n  ).toString(\"hex\")\n);\n```\n\n## Secp256k1 submodule\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve Secp256k1.\n\nIt has the exact same API than the version `4.x` of the [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node)\nmodule from cryptocoinjs, with two added function to create private keys.\n\n### Creating private keys\n\nSecp256k1 private keys need to be cryptographycally secure random numbers with\ncertain caracteristics. If this is not the case, the security of Secp256k1 is\ncompromissed.\n\nWe strongly recommend to use this module to create new private keys.\n\n### Function types\n\nFunctions to create private keys:\n\n```ts\nfunction createPrivateKey(): Promise<Uint8Array>;\n\nfunction function createPrivateKeySync(): Uint8Array;\n```\n\nFor the rest of the functions, pleasse read [`secp256k1`'s documentation](https://github.com/cryptocoinjs/secp256k1-node).\n\n### Example usage\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\nconst msgHash = Buffer.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\n\nconst privateKey = createPrivateKeySync();\n\nconsole.log(Buffer.from(ecdsaSign(msgHash, privateKey).signature).toString(\"hex\"));\n```\n\n## Hierarchical Deterministic keys submodule\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\n\n### Function types\n\nThis module exports a single class whose type is\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Buffer, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  public versions: Versions;\n  public depth: number;\n  public index: number;\n  public chainCode: Buffer | null;\n  public privateKey: Buffer | null;\n  public publicKey: Buffer | null;\n  public fingerprint: number;\n  public parentFingerprint: number;\n  public pubKeyHash: Buffer | undefined;\n  public identifier: Buffer | undefined;\n  public privateExtendedKey: string;\n  public publicExtendedKey: string;\n\n  private constructor(versios: Versions);\n  public derive(path: string): HDKey;\n  public deriveChild(index: number): HDKey;\n  public sign(hash: Buffer): Buffer;\n  public verify(hash: Buffer, signature: Buffer): boolean;\n  public wipePrivateData(): this;\n  public toJSON(): { xpriv: string; xpub: string };\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\n### Example usage\n\n```js\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\n\nconst seed = \"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\";\nconst hdkey = HDKey.fromMasterSeed(Buffer.from(seed, \"hex\"));\nconst childkey = hdkey.derive(\"m/0/2147483647'/1\");\n\nconsole.log(childkey.privateExtendedKey);\n```\n\n## Seed recovery phrases\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\n### Function types\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\n\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Buffer;\n\nfunction entropyToMnemonic(entropy: Buffer, wordlist: string[]): string;\n\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\n\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Buffer>;\n\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Buffer;\n```\n\n### Word lists\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n\n* `ethereum-cryptography/bip39/wordlists/english.js`\n\n* `ethereum-cryptography/bip39/wordlists/french.js`\n\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n### Example usage\n\n```js\n\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\nconsole.log(generateMnemonic(wordlist));\n```\n\n## Browser usage\n\nThis package works with all the major Javascript bundlers. It is\ntested with `webpack`, `Rollup`, `Parcel`, and `Browserify`.\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n[`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n[`@rollup/plugin-json`](https://www.npmjs.com/package/@rollup/plugin-json)\n[`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n[`rollup-plugin-node-builtins`](https://www.npmjs.com/package/rollup-plugin-node-builtins)\n[`rollup-plugin-node-globals`](https://www.npmjs.com/package/rollup-plugin-node-globals)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    json(),\n    nodeGlobals(),\n    nodeBuiltins(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Security audit\n\nThis library has been audited by [Trail of Bits](https://www.trailofbits.com/).\nYou can see the results of the audit and the changes implemented as a result of\nit in [`audit/`](./audit).\n\n## License\n\n`ethereum-cryptography` is released under [the MIT License](./LICENSE).\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n",
    "licenseText": "bip39-without-wordlist.js is based on bip39, which is released under the\nISC license by the Wei Lu and Daniel Cousens. Its license complete license can be found here: https://github.com/bitcoinjs/bip39/blob/0a0e74eac9f4b753939dd6368984900fdba1975b/LICENSE\n\nhdkey-without-crypto.js is based on hdkey, which is released under the\nMIT license by the cryptocoinjs. Its license complete license can be found here: https://github.com/cryptocoinjs/hdkey/blob/87d5495ac8e4dfe9917ddcebf6788ce69c0695ff/LICENSE\n\nThe rest of the project is released under this license:\n\nCopyright 2019 The ethereum-cryptography contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.1.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.1.3.tgz",
    "hash": "",
    "integrity": "sha512-w8/4x1SGGzc+tO97TASLja6SLd3fRIK2tLVcV2Gx4IB21hE19atll5Cq9o3d0ZmAYC/8aw0ipieTSiekAea4SQ==",
    "registry": "npm",
    "packageName": "ethereum-cryptography",
    "cacheIntegrity": "sha512-w8/4x1SGGzc+tO97TASLja6SLd3fRIK2tLVcV2Gx4IB21hE19atll5Cq9o3d0ZmAYC/8aw0ipieTSiekAea4SQ== sha1-jWFDz8PXS/ebvY7ezfKeSuIN0ZE="
  },
  "registry": "npm",
  "hash": "c3cff8c754861b373eb4ef7b4c048b8dae922ddddf4482b6b4b55c5761b1e08076d61135f5ab659790aaf68dddd19980602ffc6b0d22a627934a27a401e6b849"
}