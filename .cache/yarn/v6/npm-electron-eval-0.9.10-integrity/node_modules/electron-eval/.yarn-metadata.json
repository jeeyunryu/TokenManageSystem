{
  "manifest": {
    "name": "electron-eval",
    "version": "0.9.10",
    "description": "Run code inside a hidden Electron window",
    "main": "index.js",
    "scripts": {
      "test": "standard src/*.js daemon.js test.js && tap test.js --cov",
      "test-tap": "tap test.js -Rtap",
      "test-lcov": "mkdir -p coverage && tap test.js -Rsilent --coverage-report=text-lcov > coverage/lcov.info",
      "build": "rm -rf lib && babel --presets es2015 src -d lib",
      "source": "rm -rf lib && ln -s src lib",
      "prepublish": "npm run build",
      "publish": "npm run source"
    },
    "keywords": [
      "electron",
      "eval",
      "hidden",
      "spawn"
    ],
    "author": {
      "name": "Matt Bell",
      "email": "mappum@gmail.com"
    },
    "license": "MIT",
    "dependencies": {
      "cross-spawn": "^5.1.0",
      "electron": "^1.6.11",
      "ndjson": "^1.5.0"
    },
    "devDependencies": {
      "babel-cli": "^6.24.1",
      "babel-preset-es2015": "^6.24.1",
      "standard": "^10.0.2",
      "tap": "^10.7.0"
    },
    "optionalDependencies": {
      "headless": "https://github.com/paulkernfeld/node-headless/tarball/master"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mappum/electron-eval.git"
    },
    "bugs": {
      "url": "https://github.com/mappum/electron-eval/issues"
    },
    "homepage": "https://github.com/mappum/electron-eval#readme",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-electron-eval-0.9.10-integrity/node_modules/electron-eval/package.json",
    "readmeFilename": "README.md",
    "readme": "# electron-eval\n\n[![npm version](https://img.shields.io/npm/v/electron-eval.svg)](https://www.npmjs.com/package/electron-eval)\n[![Build Status](https://travis-ci.org/mappum/electron-eval.svg?branch=master)](https://travis-ci.org/mappum/electron-eval)\n[![Dependency Status](https://david-dm.org/mappum/electron-eval.svg)](https://david-dm.org/mappum/electron-eval)\n\nRun code inside a hidden Electron window\n\n`electron-eval` gives you a way to access a headless browser (Chromium) from Node.js. This can be useful for testing browser-specific code, or using web APIs that are in browsers but not yet in Node (such as [WebRTC](https://github.com/mappum/electron-webrtc)).\n\n## Running on Headless Machines\n\nThis module runs without any prior setup on non-headless machines.\n\nTo run on a headless Linux server, you'll need the `xvfb` package:\n\n\t$ sudo apt-get install xvfb\n\nTo run in Travis CI, see the [.travis.yml](https://github.com/mappum/electron-eval/blob/master/.travis.yml) file for this repo as an example of how to install the necessary packages.\n\n## Usage\n\n`npm install electron-eval`\n\n```js\nvar electronEval = require('electron-eval')\n\n// create new electron instance\nvar daemon = electronEval()\n\ndaemon.eval('JSON.stringify(window.location.href)', function (err, res) {\n  console.log(err, res)\n  // prints 'null file:///Users/mappum/Projects/electron-eval/index.html'\n})\n\n// use es6 multiline strings for longer pieces of code\ndaemon.eval(`\n  var i = 0\n  i += 10\n  i -= 2\n  i\n`, (err, res) => console.log(err, res))\n// prints 'null 8'\n\n// close the window when you are done with it\n// note that this happens automatically after the node process ends\ndaemon.close()\n```\n\n### Methods\n\n#### `var daemon = electronEval([opts])`\n\nCreates a new hidden Electron instance. This may be called many times to create many windows, but beware that Electron uses a lot of resources.\n\n`opts` may be an object containing the following keys:\n```js\n{\n  headless: Boolean // default: false\n  // whether or not we should run in headless mode (using Xvfb)\n  xvfb: Object // default: {}\n  // configures specific xvfb options (see: https://github.com/Rob--W/node-xvfb#usage)\n  timeout: Number // default: 10000\n  // how often to check if the parent node process is still\n  // alive (in milliseconds). If the node process is killed,\n  // Electron will close\n}\n```\n\n#### `daemon.eval(code, [opts], [callback])`\n\nEvaluates the `code` string in the Electron window, and calls   `callback(error, result)`. If `callback` is not provided and the eval causes an error, the daemon will emit an `error` event.\n\nThe `opts` object may contain:\n```js\n{\n  mainProcess: Boolean // default: false\n  // if true, the code will be evaluated in the Electron main process, rather than the Electron window\n}\n```\n\nNote that you may need to stringify the result value with `JSON.stringify()` so it will be sent properly across processes.\n\nIf `daemon.eval()` is called before the daemon has emitted its `ready` event, the code will be put in a queue and evaluated once the daemon is ready.\n\n#### `daemon.close()`\n\nCloses the Electron process and releases its resources.\n\nNote that the Electron process will automatically terminate when the node process exits, so this may not be necessary.\n\n#### `window.send(event, message)`\n\nThis method is implemented inside the Electron window, so it may be called from code evaluated by the daemon. It sends a message to the node process, which causes an event named `event` to be emitted on the `daemon` object.\n\nThis is useful when you need the browser window to send async messages to the node process.\n\n**Example:**\n```js\ndaemon.on('test', function (arg) {\n  console.log('got message: ' + arg)\n})\ndaemon.eval('window.send(\"test\", 123)')\n\n// the node process will print \"got message: 123\"\n```\n### Properties\n\n#### `daemon.child`\n\nA handle to the Electron daemon's process (of type [child_process.ChildProcess](https://nodejs.org/api/child_process.html#child_process_class_childprocess)).\n\n### Events\n\n#### - `ready`\nEmitted by `daemon` when the Electron window has been set up and is ready to eval code.\n#### - `error`\nEmitted by `daemon` when `daemon.eval()` evaluates code that throws an error, but no callback is provided.\n\n### Environment Variables\n\n#### `HEADLESS`\nSetting this variable to true also allows the module to go into headless mode.\n\n## Related\n\n[electron-spawn](https://github.com/maxogden/electron-spawn)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/electron-eval/-/electron-eval-0.9.10.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/electron-eval/-/electron-eval-0.9.10.tgz",
    "hash": "",
    "integrity": "sha512-VrAw2MrAjCwM8EGQsY+n48/f9P4W+AH56adERtDEb9bl5Hw9aN+ectmuK9QIi2XA11g+owQlyj2N4AzvdT363A==",
    "registry": "npm",
    "packageName": "electron-eval",
    "cacheIntegrity": "sha512-VrAw2MrAjCwM8EGQsY+n48/f9P4W+AH56adERtDEb9bl5Hw9aN+ectmuK9QIi2XA11g+owQlyj2N4AzvdT363A== sha1-n5eBiw1xGuiuED/Rhu6w6ViKKSE="
  },
  "registry": "npm",
  "hash": "56b030d8cac08c2c0cf04190b18fa7e3cfdff4fe16f801f9e9a74446d0c46fd6e5e47c3d68df9e72d9ae2bd4088b65c0d7583ea30425ca3d8de00cef753dfadc"
}