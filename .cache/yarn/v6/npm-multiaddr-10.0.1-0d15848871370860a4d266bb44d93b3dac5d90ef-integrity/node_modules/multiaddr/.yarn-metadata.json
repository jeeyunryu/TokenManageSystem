{
  "manifest": {
    "name": "multiaddr",
    "version": "10.0.1",
    "description": "multiaddr implementation (binary + string representation of network addresses)",
    "leadMaintainer": "Jacob Heun <jacobheun@gmail.com>",
    "main": "src/index.js",
    "types": "dist/src/index.d.ts",
    "scripts": {
      "lint": "aegir lint",
      "test": "npm run test:node && npm run test:browser",
      "test:node": "aegir test --ts -t node",
      "test:browser": "aegir test -t browser",
      "prepare": "aegir build",
      "release": "aegir release",
      "release-minor": "aegir release --type minor",
      "release-major": "aegir release --type major",
      "docs": "aegir docs",
      "size": "aegir build -b"
    },
    "files": [
      "src",
      "dist"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/multiformats/js-multiaddr.git"
    },
    "keywords": [
      "multiaddr",
      "binary",
      "string"
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/multiformats/js-multiaddr/issues"
    },
    "homepage": "https://github.com/multiformats/js-multiaddr",
    "browser": {
      "./src/resolvers/dns.js": "./src/resolvers/dns.browser.js"
    },
    "dependencies": {
      "dns-over-http-resolver": "^1.2.3",
      "err-code": "^3.0.1",
      "is-ip": "^3.1.0",
      "multiformats": "^9.4.5",
      "uint8arrays": "^3.0.0",
      "varint": "^6.0.0"
    },
    "devDependencies": {
      "@types/varint": "^6.0.0",
      "aegir": "^35.0.1",
      "sinon": "^11.1.1",
      "util": "^0.12.3"
    },
    "aegir": {
      "build": {
        "bundlesizeMax": "22kB"
      }
    },
    "eslintConfig": {
      "extends": "ipfs"
    },
    "contributors": [
      {
        "name": "David Dias",
        "email": "daviddias.p@gmail.com"
      },
      {
        "name": "Jacob Heun",
        "email": "jacobheun@gmail.com"
      },
      {
        "name": "Vasco Santos",
        "email": "vasco.santos@moxy.studio"
      },
      {
        "name": "victorbjelkholm",
        "email": "victorbjelkholm@gmail.com"
      },
      {
        "name": "Juan Batiz-Benet",
        "email": "juan@benet.ai"
      },
      {
        "name": "Hugo Dias",
        "email": "hugomrdias@gmail.com"
      },
      {
        "name": "Volker Mische",
        "email": "volker.mische@gmail.com"
      },
      {
        "name": "Friedel Ziegelmayer",
        "email": "dignifiedquire@gmail.com"
      },
      {
        "name": "Alex Potsides",
        "email": "alex@achingbrain.net"
      },
      {
        "name": "Richard Littauer",
        "email": "richard.littauer@gmail.com"
      },
      {
        "name": "Marcin Rataj",
        "email": "lidel@lidel.org"
      },
      {
        "name": "Dmitriy Ryajov",
        "email": "dryajov@gmail.com"
      },
      {
        "name": "Steven Allen",
        "email": "steven@stebalien.com"
      },
      {
        "name": "Alan Shaw",
        "email": "alan@tableflip.io"
      },
      {
        "name": "Robert Kiel",
        "email": "robert.kiel@validitylabs.org"
      },
      {
        "name": "Maciej Krüger",
        "email": "mkg20001@gmail.com"
      },
      {
        "name": "Oli Evans",
        "email": "oli@tableflip.io"
      },
      {
        "name": "Tony Jin",
        "email": "nijynot@gmail.com"
      },
      {
        "name": "Alessandro Ricottone",
        "email": "ricott2@gmail.com"
      },
      {
        "name": "Cayman",
        "email": "caymannava@gmail.com"
      },
      {
        "name": "Chris Anderson",
        "email": "jchris@gmail.com"
      },
      {
        "name": "Diogo Silva",
        "email": "fsdiogo@gmail.com"
      },
      {
        "name": "Irakli Gozalishvili",
        "email": "contact@gozala.io"
      },
      {
        "name": "KuhnChris",
        "email": "kuhnchris@kuhnchris.eu"
      },
      {
        "name": "Lars Gierth",
        "email": "lgierth@users.noreply.github.com"
      },
      {
        "name": "Linus Unnebäck",
        "email": "linus@folkdatorn.se"
      },
      {
        "name": "Sid Harder",
        "email": "sideharder@gmail.com"
      },
      {
        "name": "Stephen Whitmore",
        "email": "stephen.whitmore@gmail.com"
      },
      {
        "name": "Trond Arne Bråthen",
        "email": "tabrath@gmail.com"
      },
      {
        "name": "Yahya",
        "email": "ya7yaz@gmail.com"
      },
      {
        "name": "Zane Starr",
        "email": "zcstarr@gmail.com"
      },
      {
        "name": "Ze Bateira",
        "email": "jlageb@gmail.com"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-multiaddr-10.0.1-0d15848871370860a4d266bb44d93b3dac5d90ef-integrity/node_modules/multiaddr/package.json",
    "readmeFilename": "README.md",
    "readme": "js-multiaddr\n============\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-multiformats-blue.svg?style=flat-square)](https://github.com/multiformats/multiformats)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](https://webchat.freenode.net/?channels=%23ipfs)\n[![Dependency Status](https://david-dm.org/multiformats/js-multiaddr.svg?style=flat-square)](https://david-dm.org/multiformats/js-multiaddr)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n[![](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![](https://img.shields.io/travis/multiformats/js-multiaddr.svg?style=flat-square)](https://travis-ci.com/multiformats/js-multiaddr)\n[![codecov](https://img.shields.io/codecov/c/github/multiformats/js-multiaddr.svg?style=flat-square)](https://codecov.io/gh/multiformats/js-multiaddr)\n\n> JavaScript implementation of [multiaddr](https://github.com/multiformats/multiaddr).\n\n## Lead Maintainer\n\n[Jacob Heun](https://github.com/jacobheun)\n\n## Table of Contents\n\n- [js-multiaddr](#js-multiaddr)\n  - [Lead Maintainer](#lead-maintainer)\n  - [Table of Contents](#table-of-contents)\n  - [Background](#background)\n    - [What is multiaddr?](#what-is-multiaddr)\n  - [Install](#install)\n    - [NPM](#npm)\n    - [Browser: `<script>` Tag](#browser-script-tag)\n  - [Usage](#usage)\n  - [API](#api)\n  - [Resolvers](#resolvers)\n  - [Contribute](#contribute)\n  - [License](#license)\n\n## Background\n\n### What is multiaddr?\n\nA standard way to represent addresses that\n\n- support any standard network protocol\n- are self-describing\n- have a binary packed format\n- have a nice string representation\n- encapsulate well\n\n## Install\n\n### NPM\n```sh\nnpm i multiaddr\n```\n\n### Browser: `<script>` Tag\n\nLoading this module through a script tag will make the `Multiaddr` obj available in\nthe global namespace.\n\n```html\n<script src=\"https://unpkg.com/multiaddr/dist/index.min.js\"></script>\n```\n\n## Usage\n\n```js\n// if we are coming from <= 8.x you can use the factory function \nconst { multiaddr } = require('multiaddr')\nconst addr =  multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\n\n// or just the class directly\nconst { Multiaddr } = require('multiaddr')\n\nconst addr = new Multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\n\naddr.bytes\n// <Uint8Array 04 7f 00 00 01 11 04 d2>\n\naddr.toString()\n// '/ip4/127.0.0.1/udp/1234'\n\naddr.protos()\n/* \n[\n  {code: 4, name: 'ip4', size: 32},\n  {code: 273, name: 'udp', size: 16}\n]\n*/\n\n// gives you an object that is friendly with what Node.js core modules expect for addresses\naddr.nodeAddress()\n/*\n{\n  family: 4,\n  port: 1234,\n  address: \"127.0.0.1\"\n}\n*/\n\naddr.encapsulate('/sctp/5678')\n// <Multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678>\n```\n\n## API\n\nhttps://multiformats.github.io/js-multiaddr/\n\n## Resolvers\n\n`multiaddr` allows multiaddrs to be resolved when appropriate resolvers are provided. This module already has resolvers available, but you can also create your own.  Resolvers should always be set in the same module that is calling `multiaddr.resolve()` to avoid conflicts if multiple versions of `multiaddr` are in your dependency tree. \nTo provide multiaddr resolvers you can do:\n\n```js\nconst { Multiaddr } = require('multiaddr')\nconst resolvers = require('multiaddr/src/resolvers')\n\nMultiaddr.resolvers.set('dnsaddr', resolvers.dnsaddrResolver)\n```\n\nThe available resolvers are:\n\n|     Name    | type | Description |\n|-------------|------|-------------|\n| `dnsaddrResolver` | `dnsaddr` | dnsaddr resolution with TXT Records |\n\nA resolver receives a `Multiaddr` as a parameter and returns a `Promise<Array<string>>`.\n\n## Contribute\n\nContributions welcome. Please check out [the issues](https://github.com/multiformats/js-multiaddr/issues).\n\nCheck out our [contributing document](https://github.com/multiformats/multiformats/blob/master/contributing.md) for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\n[MIT](LICENSE) © 2016 Protocol Labs Inc.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Protocol Labs Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/multiaddr/-/multiaddr-10.0.1.tgz#0d15848871370860a4d266bb44d93b3dac5d90ef",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/multiaddr/-/multiaddr-10.0.1.tgz",
    "hash": "0d15848871370860a4d266bb44d93b3dac5d90ef",
    "integrity": "sha512-G5upNcGzEGuTHkzxezPrrD6CaIHR9uo+7MwqhNVcXTs33IInon4y7nMiGxl2CY5hG7chvYQUQhz5V52/Qe3cbg==",
    "registry": "npm",
    "packageName": "multiaddr",
    "cacheIntegrity": "sha512-G5upNcGzEGuTHkzxezPrrD6CaIHR9uo+7MwqhNVcXTs33IInon4y7nMiGxl2CY5hG7chvYQUQhz5V52/Qe3cbg== sha1-DRWEiHE3CGCk0ma7RNk7PaxdkO8="
  },
  "registry": "npm",
  "hash": "0d15848871370860a4d266bb44d93b3dac5d90ef"
}