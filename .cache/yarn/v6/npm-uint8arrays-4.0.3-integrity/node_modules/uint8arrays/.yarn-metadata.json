{
  "manifest": {
    "name": "uint8arrays",
    "version": "4.0.3",
    "description": "Utility functions to make dealing with Uint8Arrays easier",
    "author": {
      "name": "Alex Potsides",
      "email": "alex@achingbrain.net"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/achingbrain/uint8arrays#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/achingbrain/uint8arrays.git"
    },
    "bugs": {
      "url": "https://github.com/achingbrain/uint8arrays/issues"
    },
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      },
      "./alloc": {
        "types": "./dist/src/alloc.d.ts",
        "import": "./dist/src/alloc.js"
      },
      "./compare": {
        "types": "./dist/src/compare.d.ts",
        "import": "./dist/src/compare.js"
      },
      "./concat": {
        "types": "./dist/src/concat.d.ts",
        "import": "./dist/src/concat.js"
      },
      "./equals": {
        "types": "./dist/src/equals.d.ts",
        "import": "./dist/src/equals.js"
      },
      "./from-string": {
        "types": "./dist/src/from-string.d.ts",
        "import": "./dist/src/from-string.js"
      },
      "./to-string": {
        "types": "./dist/src/to-string.d.ts",
        "import": "./dist/src/to-string.js"
      },
      "./xor": {
        "types": "./dist/src/xor.d.ts",
        "import": "./dist/src/xor.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "test": "aegir test",
      "test:node": "aegir test -t node --cov",
      "test:chrome": "aegir test -t browser --cov",
      "test:chrome-webworker": "aegir test -t webworker",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:firefox-webworker": "aegir test -t webworker -- --browser firefox",
      "lint": "aegir lint",
      "release": "aegir release",
      "build": "aegir build"
    },
    "dependencies": {
      "multiformats": "^11.0.0"
    },
    "devDependencies": {
      "@types/benchmark": "^2.1.1",
      "aegir": "^37.5.5",
      "benchmark": "^2.1.4"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-uint8arrays-4.0.3-integrity/node_modules/uint8arrays/package.json",
    "readmeFilename": "README.md",
    "readme": "# uint8arrays <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/achingbrain/uint8arrays.svg?style=flat-square)](https://codecov.io/gh/achingbrain/uint8arrays)\n[![CI](https://img.shields.io/github/workflow/status/achingbrain/uint8arrays/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/achingbrain/uint8arrays/actions/workflows/js-test-and-release.yml)\n\n> Utility functions to make dealing with Uint8Arrays easier\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [API](#api)\n  - [alloc(size)](#allocsize)\n    - [Example](#example)\n  - [allocUnsafe(size)](#allocunsafesize)\n    - [Example](#example-1)\n  - [compare(a, b)](#comparea-b)\n    - [Example](#example-2)\n  - [concat(arrays, [length])](#concatarrays-length)\n    - [Example](#example-3)\n  - [equals(a, b)](#equalsa-b)\n    - [Example](#example-4)\n  - [fromString(string, encoding = 'utf8')](#fromstringstring-encoding--utf8)\n    - [Example](#example-5)\n  - [toString(array, encoding = 'utf8')](#tostringarray-encoding--utf8)\n    - [Example](#example-6)\n  - [xor(a, b)](#xora-b)\n    - [Example](#example-7)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i uint8arrays\n```\n\n- [Install](#install)\n- [API](#api)\n  - [alloc(size)](#allocsize)\n    - [Example](#example)\n  - [allocUnsafe(size)](#allocunsafesize)\n    - [Example](#example-1)\n  - [compare(a, b)](#comparea-b)\n    - [Example](#example-2)\n  - [concat(arrays, \\[length])](#concatarrays-length)\n    - [Example](#example-3)\n  - [equals(a, b)](#equalsa-b)\n    - [Example](#example-4)\n  - [fromString(string, encoding = 'utf8')](#fromstringstring-encoding--utf8)\n    - [Example](#example-5)\n  - [toString(array, encoding = 'utf8')](#tostringarray-encoding--utf8)\n    - [Example](#example-6)\n  - [xor(a, b)](#xora-b)\n    - [Example](#example-7)\n- [License](#license)\n- [Contribute](#contribute)\n\n## API\n\n### alloc(size)\n\nCreate a new `Uint8Array`. If `globalThis.Buffer` is defined, it will be used in preference to `globalThis.Uint8Array`.\n\n#### Example\n\n```js\nimport { alloc } from 'uint8arrays/alloc`\n\nconst buf = alloc(100)\n```\n\n### allocUnsafe(size)\n\nCreate a new `Uint8Array`. If `globalThis.Buffer` is defined, it will be used in preference to `globalThis.Uint8Array`.\n\nOn platforms that support it, memory referenced by the returned `Uint8Array` will not be initialized.\n\n#### Example\n\n```js\nimport { allocUnsafe } from 'uint8arrays/alloc`\n\nconst buf = allocUnsafe(100)\n```\n\n### compare(a, b)\n\nCompare two `Uint8Arrays`\n\n#### Example\n\n```js\nimport { compare } from 'uint8arrays/compare'\n\nconst arrays = [\n  Uint8Array.from([3, 4, 5]),\n  Uint8Array.from([0, 1, 2])\n]\n\nconst sorted = arrays.sort(compare)\n\nconsole.info(sorted)\n// [\n//    Uint8Array[0, 1, 2]\n//    Uint8Array[3, 4, 5]\n// ]\n```\n\n### concat(arrays, \\[length])\n\nConcatenate one or more array-likes and return a `Uint8Array` with their contents.\n\nIf you know the length of the arrays, pass it as a second parameter, otherwise it will be calculated by traversing the list of arrays.\n\n#### Example\n\n```js\nimport { concat } from 'uint8arrays/concat'\n\nconst arrays = [\n  Uint8Array.from([0, 1, 2]),\n  Uint8Array.from([3, 4, 5])\n]\n\nconst all = concat(arrays, 6)\n\nconsole.info(all)\n// Uint8Array[0, 1, 2, 3, 4, 5]\n```\n\n### equals(a, b)\n\nReturns true if the two arrays are the same array or if they have the same length and contents.\n\n#### Example\n\n```js\nimport { equals } from 'uint8arrays/equals'\n\nconst a = Uint8Array.from([0, 1, 2])\nconst b = Uint8Array.from([3, 4, 5])\nconst c = Uint8Array.from([0, 1, 2])\n\nconsole.info(equals(a, b)) // false\nconsole.info(equals(a, c)) // true\nconsole.info(equals(a, a)) // true\n```\n\n### fromString(string, encoding = 'utf8')\n\nReturns a new `Uint8Array` created from the passed string and interpreted as the passed encoding.\n\nSupports `utf8` and any of the [multibase encodings](https://github.com/multiformats/multibase/blob/master/multibase.csv) as implemented by the [multiformats module](https://www.npmjs.com/package/multiformats).\n\n#### Example\n\n```js\nimport { fromString } from 'uint8arrays/from-string'\n\nconsole.info(fromString('hello world')) // Uint8Array[104, 101 ...\nconsole.info(fromString('00010203aabbcc', 'base16')) // Uint8Array[0, 1 ...\nconsole.info(fromString('AAECA6q7zA', 'base64')) // Uint8Array[0, 1 ...\nconsole.info(fromString('01234', 'ascii')) // Uint8Array[48, 49 ...\n```\n\n### toString(array, encoding = 'utf8')\n\nReturns a string created from the passed `Uint8Array` in the passed encoding.\n\nSupports `utf8` and any of the [multibase encodings](https://github.com/multiformats/multibase/blob/master/multibase.csv) as implemented by the [multiformats module](https://www.npmjs.com/package/multiformats).\n\n#### Example\n\n```js\nimport { toString } from 'uint8arrays/to-string'\n\nconsole.info(toString(Uint8Array.from([104, 101...]))) // 'hello world'\nconsole.info(toString(Uint8Array.from([0, 1, 2...]), 'base16')) // '00010203aabbcc'\nconsole.info(toString(Uint8Array.from([0, 1, 2...]), 'base64')) // 'AAECA6q7zA'\nconsole.info(toString(Uint8Array.from([48, 49, 50...]), 'ascii')) // '01234'\n```\n\n### xor(a, b)\n\nReturns a `Uint8Array` containing `a` and `b` xored together.\n\n#### Example\n\n```js\nimport { xor } from 'uint8arrays/xor'\n\nconsole.info(xor(Uint8Array.from([1, 0]), Uint8Array.from([0, 1]))) // Uint8Array[1, 1]\n```\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/uint8arrays/-/uint8arrays-4.0.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/uint8arrays/-/uint8arrays-4.0.3.tgz",
    "hash": "",
    "integrity": "sha512-b+aKlI2oTnxnfeSQWV1sMacqSNxqhtXySaH6bflvONGxF8V/fT3ZlYH7z2qgGfydsvpVo4JUgM/Ylyfl2YouCg==",
    "registry": "npm",
    "packageName": "uint8arrays",
    "cacheIntegrity": "sha512-b+aKlI2oTnxnfeSQWV1sMacqSNxqhtXySaH6bflvONGxF8V/fT3ZlYH7z2qgGfydsvpVo4JUgM/Ylyfl2YouCg== sha1-QxCcA8TBDTEufy6fTVPlzSOYx/0="
  },
  "registry": "npm",
  "hash": "6fe68a948da84e7c677de490595d6c31a72a48dc6a86d5f249a1fa6df96f38d1b117c57f7d3dd99581fbcf6aa019fc9db2fa55a3825480cfd89727e5d98a2e0a"
}