{
  "manifest": {
    "name": "carbites",
    "version": "1.0.6",
    "description": "Chunking for CAR files. Split a single CAR into multiple CARs.",
    "main": "./cjs/lib/index.js",
    "types": "./types/index.d.ts",
    "scripts": {
      "build": "npm run build:js && npm run build:types",
      "build:js": "ipjs build --tests --main && npm run build:copy",
      "build:copy": "cp -a tsconfig.json lib test dist/ ",
      "build:types": "npm run build:copy && cd dist && tsc --build",
      "test": "npm run lint && npm run test:node && npm run test:cjs",
      "test:node": "ava --verbose 'test/*.spec.js'",
      "test:cjs": "npm run build:js && ava --verbose dist/cjs/node-test/*.spec.js",
      "coverage": "c8 npm run test",
      "lint": "standard"
    },
    "author": {
      "name": "Alan Shaw"
    },
    "license": "(Apache-2.0 AND MIT)",
    "dependencies": {
      "@ipld/car": "^3.0.1",
      "@ipld/dag-cbor": "^6.0.3",
      "@ipld/dag-pb": "^2.0.2",
      "multiformats": "^9.0.4"
    },
    "devDependencies": {
      "@web-std/blob": "^2.1.0",
      "ava": "^3.15.0",
      "c8": "^7.7.2",
      "ipjs": "^5.0.0",
      "ipld-garbage": "^4.0.1",
      "standard": "^16.0.3",
      "typescript": "^4.2.4"
    },
    "standard": {
      "ignore": [
        "dist"
      ]
    },
    "exports": {
      ".": {
        "browser": "./esm/lib/index.js",
        "require": "./cjs/lib/index.js",
        "import": "./esm/lib/index.js"
      },
      "./rooted": {
        "browser": "./esm/lib/rooted/index.js",
        "require": "./cjs/lib/rooted/index.js",
        "import": "./esm/lib/rooted/index.js"
      },
      "./simple": {
        "browser": "./esm/lib/simple/index.js",
        "require": "./cjs/lib/simple/index.js",
        "import": "./esm/lib/simple/index.js"
      },
      "./treewalk": {
        "browser": "./esm/lib/treewalk/index.js",
        "require": "./cjs/lib/treewalk/index.js",
        "import": "./esm/lib/treewalk/index.js"
      }
    },
    "typesVersions": {
      "*": {
        "*": [
          "types/*"
        ],
        "simple": [
          "types/simple/index.d.ts"
        ],
        "rooted": [
          "types/rooted/index.d.ts"
        ],
        "treewalk": [
          "types/treewalk/index.d.ts"
        ],
        "types/*": [
          "types/*"
        ]
      }
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nftstorage/carbites.git"
    },
    "bugs": {
      "url": "https://github.com/nftstorage/carbites/issues"
    },
    "homepage": "https://github.com/nftstorage/carbites#readme",
    "keywords": [
      "car",
      "content",
      "archive",
      "CID",
      "IPLD",
      "multiformats",
      "chunk",
      "chunker",
      "chunking",
      "split",
      "splitter"
    ],
    "browser": {
      ".": "./cjs/lib/index.js",
      "./rooted": "./cjs/lib/rooted/index.js",
      "./simple": "./cjs/lib/simple/index.js",
      "./treewalk": "./cjs/lib/treewalk/index.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-carbites-1.0.6-integrity/node_modules/carbites/package.json",
    "readmeFilename": "README.md",
    "readme": "# carbites\n\n[![Build](https://github.com/nftstorage/carbites/actions/workflows/main.yml/badge.svg)](https://github.com/nftstorage/carbites/actions/workflows/main.yml)\n[![dependencies Status](https://status.david-dm.org/gh/nftstorage/carbites.svg)](https://david-dm.org/nftstorage/carbites)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![npm bundle size](https://img.shields.io/bundlephobia/minzip/carbites)](https://bundlephobia.com/package/carbites)\n\nChunking for [CAR files](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md). Split a single CAR into multiple CARs.\n\n## Install\n\n```sh\nnpm install carbites\n```\n\n## Usage\n\nCarbites supports 3 different strategies:\n\n1. [**Simple**](#simple) (default) - fast but naive, only the first CAR output has a root CID, subsequent CARs have a placeholder \"empty\" CID.\n2. [**Rooted**](#rooted) - like simple, but creates a custom root node to ensure all blocks in a CAR are referenced.\n3. [**Treewalk**](#treewalk) - walks the DAG to pack sub-graphs into each CAR file that is output. Every CAR has the same root CID, but contains a different portion of the DAG.\n\n### Simple\n\n```js\nimport { CarSplitter } from 'carbites'\nimport { CarReader } from '@ipld/car'\nimport fs from 'fs'\n\nconst bigCar = await CarReader.fromIterable(fs.createReadStream('/path/to/big.car'))\nconst targetSize = 1024 * 1024 * 100 // chunk to ~100MB CARs\nconst splitter = new CarSplitter(bigCar, targetSize) // (simple strategy)\n\nfor await (const car of splitter.cars()) {\n  // Each `car` is an AsyncIterable<Uint8Array>\n}\n```\n\n⚠️ Note: The first CAR output has roots in the header, subsequent CARs have an empty root CID [`bafkqaaa`](https://cid.ipfs.io/#bafkqaaa) as [recommended](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md#number-of-roots).\n\n### Rooted\n\nInstead of an empty CID, carbites can generate a special root node for each split CAR that references all the blocks _and_ the original roots (only in the first CAR). To do this, use the `RootedCarSplitter` constructor. When reading/extracting data from the CARs, the root node should be discarded.\n\n<details>\n  <summary>Example</summary>\n\n  ```js\n  import { RootedCarSplitter } from 'carbites/rooted'\n  import { CarReader } from '@ipld/car/reader'\n  import * as dagCbor from '@ipld/dag-cbor'\n  import fs from 'fs'\n\n  const bigCar = await CarReader.fromIterable(fs.createReadStream('/path/to/big.car'))\n  const targetSize = 1024 * 1024 * 100 // chunk to ~100MB CARs\n  const splitter = new RootedCarSplitter(bigCar, targetSize)\n\n  const cars = splitter.cars()\n\n  // Every CAR has a single root - a CBOR node that is an tuple of `/carbites/1`,\n  // an array of root CIDs and an array of block CIDs.\n  // e.g. ['/carbites/1', ['bafkroot'], ['bafy1', 'bafy2']]\n\n  const { done, value: car } = await cars.next()\n  const reader = await CarReader.fromIterable(car)\n  const rootCids = await reader.getRoots()\n  const rootNode = dagCbor.decode(await reader.get(rootCids[0]))\n\n  console.log(rootNode[0]) // /carbites/1\n  console.log(rootNode[1]) // Root CIDs (only in first CAR)\n  /*\n  [\n    CID(bafybeictvyf6polqzgop3jt32owubfmsg3kl226omqrfte4eyidubc4rpq)\n  ]\n  */\n  console.log(rootNode[2]) // Block CIDs (all blocks in this CAR)\n  /*\n  [\n    CID(bafybeictvyf6polqzgop3jt32owubfmsg3kl226omqrfte4eyidubc4rpq),\n    CID(bafyreihcsxqhd6agqpboc3wrlvpy5bwuxctv5upicdnt3u2wojv4exxl24),\n    CID(bafyreiasq7d2ihbqm5xvhjjzlmzsensuadrpmpt2tkjsuwq42xpa34qevu)\n  ]\n  */\n  ```\n\n</details>\n\nThe root node is limited to 4MB in size (the largest message IPFS will bitswap). Depending on the settings used to construct the DAG in the CAR, this may mean a split CAR size limit of around 30GiB.\n\n### Treewalk\n\nEvery CAR file has the _same_ root CID but a different portion of the DAG. The DAG is traversed from the root node and each block is decoded and links extracted in order to determine which sub-graph to include in each CAR.\n\n<details>\n  <summary>Example</summary>\n\n  ```js\n  import { TreewalkCarSplitter } from 'carbites/treewalk'\n  import { CarReader } from '@ipld/car/reader'\n  import * as dagCbor from '@ipld/dag-cbor'\n  import fs from 'fs'\n\n  const bigCar = await CarReader.fromIterable(fs.createReadStream('/path/to/big.car'))\n  const [rootCid] = await bigCar.getRoots()\n  const targetSize = 1024 * 1024 * 100 // chunk to ~100MB CARs\n  const splitter = new TreewalkCarSplitter(bigCar, targetSize)\n\n  for await (const car of splitter.cars()) {\n    // Each `car` is an AsyncIterable<Uint8Array>\n    const reader = await CarReader.fromIterable(car)\n    const [splitCarRootCid] = await reader.getRoots()\n    console.assert(rootCid.equals(splitCarRootCid)) // all cars will have the same root\n  }\n  ```\n\n</details>\n\n### CLI\n\nInstall the CLI tool to use Carbites from the comfort of your terminal:\n\n```sh\nnpm i -g carbites-cli\n\n# Split a big CAR into many smaller CARs\ncarbites split big.car --size 100MB --strategy simple # (default size & strategy)\n\n# Join many split CARs back into a single CAR.\ncarbites join big-0.car big-1.car ...\n# Note: not a tool for joining arbitrary CARs together! The split CARs MUST\n# belong to the same CAR and big-0.car should be the first argument.\n```\n\n## API\n\n* [`class CarSplitter`](#class-carsplitter)\n    * [`constructor(car: AsyncIterable<Uint8Array>, targetSize: number)`](#constructorcar-asynciterableuint8array-targetsize-number)\n    * [`cars(): AsyncGenerator<AsyncIterable<Uint8Array> & RootsReader>`](#cars-asyncgeneratorasynciterableuint8array--rootsreader)\n    * [`static async fromBlob(blob: Blob, targetSize: number): CarSplitter`](#static-async-fromblobblob-blob-targetsize-number-carsplitter)\n    * [`static async fromIterable(iterable: AsyncIterable<Uint8Array>, targetSize: number): CarSplitter`](#static-async-fromiterableiterable-asynciterableuint8array-targetsize-number-carsplitter)\n* [`class CarJoiner`](#class-carjoiner)\n    * [`constructor(cars: Iterable<AsyncIterable<Uint8Array>>)`](#constructorcars-iterableasynciterableuint8array)\n    * [`car(): AsyncGenerator<Uint8Array>`](#car-asyncgeneratoruint8array)\n* [`class RootedCarSplitter`](#class-rootedcarsplitter)\n* [`class RootedCarJoiner`](#class-rootedcarjoiner)\n* [`class TreewalkCarSplitter`](#class-treewalkcarsplitter)\n* [`class TreewalkCarJoiner`](#class-treewalkcarjoiner)\n\n### `class CarSplitter`\n\nSplit a CAR file into several smaller CAR files.\n\nImport in the browser:\n\n```js\nimport { CarSplitter } from 'https://cdn.skypack.dev/carbites'\n```\n\nImport in Node.js:\n\n```js\nimport { CarSplitter } from 'carbites'\n```\n\nNote: This is an alias of `SimpleCarSplitter` - the default strategy for splitting CARs.\n\n#### `constructor(car: CarReader, targetSize: number)`\n\nCreate a new `CarSplitter` for the passed CAR file, aiming to generate CARs of around `targetSize` bytes in size.\n\n#### `cars(): AsyncGenerator<AsyncIterable<Uint8Array> & RootsReader>`\n\nSplit the CAR file and create multiple smaller CAR files. Returns an `AsyncGenerator` that yields the split CAR files (of type `AsyncIterable<Uint8Array>`).\n\nThe CAR files output also implement the [`RootsReader`](https://github.com/ipld/js-car/blob/8c74dc3c7273213b83f4610e4f88cf1ad2830fa6/api.ts#L18-L21) interface from `@ipld/car` which means you can call `getRoots(): Promise<CID[]>` to obtain the root CIDs.\n\n#### `static async fromBlob(blob: Blob, targetSize: number): CarSplitter`\n\nConvenience function to create a new `CarSplitter` from a [blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) of CAR file data.\n\n#### `static async fromIterable(iterable: AsyncIterable<Uint8Array>, targetSize: number): CarSplitter`\n\nConvenience function to create a new `CarSplitter` from an `AsyncIterable<Uint8Array>` of CAR file data.\n\n### `class CarJoiner`\n\nJoin together split CAR files into a single big CAR.\n\nImport in the browser:\n\n```js\nimport { CarJoiner } from 'https://cdn.skypack.dev/carbites'\n```\n\nImport in Node.js:\n\n```js\nimport { CarJoiner } from 'carbites'\n```\n\nNote: This is an alias of `SimpleCarJoiner` - a joiner for the the default CAR splitting strategy.\n\n#### `constructor(cars: Iterable<CarReader>)`\n\nCreate a new `CarJoiner`  for joining the passed CAR files together.\n\n#### `car(): AsyncGenerator<Uint8Array>`\n\nJoin the CAR files together and return the joined CAR.\n\n### `class RootedCarSplitter`\n\nSplit a CAR file into several smaller CAR files ensuring every CAR file contains a single root node that references all the blocks _and_ the original roots (only in the first CAR). When reading/extracting data from the CARs, the root node should be discarded.\n\nImport in the browser:\n\n```js\nimport { RootedCarSplitter } from 'https://cdn.skypack.dev/carbites/rooted'\n```\n\nImport in Node.js:\n\n```js\nimport { RootedCarSplitter } from 'carbites/rooted'\n```\n\nThe API is the same as for [`CarSplitter`](#class-carsplitter).\n\n#### Root Node Format\n\nThe root node is a `dag-cbor` node that is a tuple of the string `/carbites/1`, an array of root CIDs (only seen in first CAR) and an array of block CIDs (all the blocks in the CAR). e.g. `['/carbites/1', ['bafkroot'], ['bafy1', 'bafy2']]`.\n\nNote: The root node is limited to 4MB in size (the largest message IPFS will bitswap). Depending on the settings used to construct the DAG in the CAR, this may mean a split CAR size limit of around 30GiB.\n\n### `class RootedCarJoiner`\n\nJoin together CAR files that were split using [`RootedCarSplitter`](#class-rootedcarsplitter).\n\nThe API is the same as for [`CarJoiner`](#class-carjoiner).\n\n### `class TreewalkCarSplitter`\n\nSplit a CAR file into several smaller CAR files. Every CAR file has the _same_ root CID but a different portion of the DAG. The DAG is traversed from the root node and each block is decoded and links extracted in order to determine which sub-graph to include in each CAR.\n\nImport in the browser:\n\n```js\nimport { TreewalkCarSplitter } from 'https://cdn.skypack.dev/carbites/treewalk'\n```\n\nImport in Node.js:\n\n```js\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\n```\n\nThe API is the same as for [`CarSplitter`](#class-carsplitter).\n\n### `class TreewalkCarJoiner`\n\nJoin together CAR files that were split using [`TreewalkCarSplitter`](#class-treewalkcarsplitter).\n\nThe API is the same as for [`CarJoiner`](#class-carjoiner).\n\n## Releasing\n\nYou can publish by either running `npm publish` in the `dist` directory or using `npx ipjs publish`.\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/nftstorage/carbites/issues/new) or submit PRs.\n\n## License\n\nDual-licensed under [MIT](https://github.com/nftstorage/carbites/blob/main/LICENSE-MIT) + [Apache 2.0](https://github.com/nftstorage/carbites/blob/main/LICENSE-APACHE)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/carbites/-/carbites-1.0.6.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/carbites/-/carbites-1.0.6.tgz",
    "hash": "",
    "integrity": "sha512-dS9IQvnrb5VIRvSTNz5Ff+mB9d2MFfi5mojtJi7Rlss79VeF190jr0sZdA7eW0CGHotvHkZaWuM6wgfD9PEFRg==",
    "registry": "npm",
    "packageName": "carbites",
    "cacheIntegrity": "sha512-dS9IQvnrb5VIRvSTNz5Ff+mB9d2MFfi5mojtJi7Rlss79VeF190jr0sZdA7eW0CGHotvHkZaWuM6wgfD9PEFRg== sha1-DqwgbIe2Dgm3WKToIK8ADdpPjdE="
  },
  "registry": "npm",
  "hash": "752f4842f9eb6f954846f493373e457fe981f5dd8c15f8b99a88ed262ed196cb3bf55785d7dd23af4b19740ede5b40861e8b6f1e465a5ae33ac207c3f4f10546"
}