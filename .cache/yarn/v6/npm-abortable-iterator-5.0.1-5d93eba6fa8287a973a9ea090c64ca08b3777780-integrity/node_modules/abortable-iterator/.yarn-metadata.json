{
  "manifest": {
    "name": "abortable-iterator",
    "version": "5.0.1",
    "description": "Make any iterator or iterable abortable via an AbortSignal",
    "author": {
      "name": "Alan Shaw"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/alanshaw/abortable-iterator#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alanshaw/abortable-iterator.git"
    },
    "bugs": {
      "url": "https://github.com/alanshaw/abortable-iterator/issues"
    },
    "keywords": [
      "AbortController",
      "AbortSignal",
      "abort",
      "abortable",
      "async",
      "cancel",
      "iterator",
      "signal",
      "stop"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      },
      "./duplex": {
        "types": "./dist/src/duplex.d.ts",
        "import": "./dist/src/duplex.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "dep-check": "aegir dep-check dist/src/**/*.js dist/test/**/*.js",
      "build": "tsc",
      "pretest": "npm run build",
      "test": "aegir test -f ./dist/test",
      "test:chrome": "npm run test -- -t browser --cov",
      "test:chrome-webworker": "npm run test -- -t webworker",
      "test:firefox": "npm run test -- -t browser -- --browser firefox",
      "test:firefox-webworker": "npm run test -- -t webworker -- --browser firefox",
      "test:node": "npm run test -- -t node --cov",
      "test:electron-main": "npm run test -- -t electron-main",
      "release": "semantic-release",
      "docs": "aegir docs"
    },
    "dependencies": {
      "get-iterator": "^2.0.0",
      "it-stream-types": "^2.0.1"
    },
    "devDependencies": {
      "aegir": "^38.1.7",
      "delay": "^5.0.0",
      "it-drain": "^3.0.1",
      "it-pipe": "^3.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-abortable-iterator-5.0.1-5d93eba6fa8287a973a9ea090c64ca08b3777780-integrity/node_modules/abortable-iterator/package.json",
    "readmeFilename": "README.md",
    "readme": "# abortable-iterator <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/alanshaw/abortable-iterator.svg?style=flat-square)](https://codecov.io/gh/alanshaw/abortable-iterator)\n[![CI](https://img.shields.io/github/actions/workflow/status/alanshaw/abortable-iterator/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/alanshaw/abortable-iterator/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Make any iterator or iterable abortable via an AbortSignal\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n- [API](#api)\n  - [`abortableSource(source, signal, [options])`](#abortablesourcesource-signal-options)\n    - [Parameters](#parameters)\n    - [Returns](#returns)\n  - [`abortableSink(sink, signal, [options])`](#abortablesinksink-signal-options)\n  - [`abortableTransform(transform, signal, [options])`](#abortabletransformtransform-signal-options)\n  - [`abortableDuplex(duplex, signal, [options])`](#abortableduplexduplex-signal-options)\n- [Related](#related)\n- [Contribute](#contribute)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribution](#contribution)\n\n## Install\n\n```console\n$ npm i abortable-iterator\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `AbortableIterator` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/abortable-iterator/dist/index.min.js\"></script>\n```\n\nThe [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) is used in the fetch API to abort in flight requests from, for example, a timeout or user action. The same concept is used here to halt iteration of an async iterator.\n\n## Usage\n\n```js\nimport { abortableSource } from 'abortable-iterator'\n\n// An example function that creates an async iterator that yields an increasing\n// number every x milliseconds and NEVER ENDS!\nconst asyncCounter = async function * (start, delay) {\n  let i = start\n  while (true) {\n    yield new Promise(resolve => setTimeout(() => resolve(i++), delay))\n  }\n}\n\n// Create a counter that'll yield numbers from 0 upwards every second\nconst everySecond = asyncCounter(0, 1000)\n\n// Make everySecond abortable!\nconst controller = new AbortController()\nconst abortableEverySecond = abortableSource(everySecond, controller.signal)\n\n// Abort after 5 seconds\nsetTimeout(() => controller.abort(), 5000)\n\ntry {\n  // Start the iteration, which will throw after 5 seconds when it is aborted\n  for await (const n of abortableEverySecond) {\n    console.log(n)\n  }\n} catch (err) {\n  if (err.code === 'ERR_ABORTED') {\n    // Expected - all ok :D\n  } else {\n    throw err\n  }\n}\n```\n\n## API\n\n```js\nimport {\n  abortableSource,\n  abortableSink,\n  abortableTransform,\n  abortableDuplex\n} from 'abortable-iterator'\n```\n\n- [`abortableSource(source, signal, [options])`](#abortablesource-signal-options)\n- [`abortableSink(sink, signal, [options])`](#abortablesinksink-signal-options)\n- [`abortableTransform(transform, signal, [options])`](#abortabletransformtransform-signal-options)\n- [`abortableDuplex(duplex, signal, [options])`](#abortableduplexduplex-signal-options)\n\n### `abortableSource(source, signal, [options])`\n\n**(alias for `abortable.source(source, signal, [options])`)**\n\nMake any iterator or iterable abortable via an `AbortSignal`.\n\n#### Parameters\n\n| Name                  | Type                                                                                                                                                                                                                                                 | Description                                                                                                                                                              |\n| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| source                | [`Iterable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol)\\|[`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) | The iterator or iterable object to make abortable                                                                                                                        |\n| signal                | [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)                                                                                                                                                                        | Signal obtained from `AbortController.signal` which is used to abort the iterator.                                                                                       |\n| options               | `Object`                                                                                                                                                                                                                                             | (optional) options                                                                                                                                                       |\n| options.onAbort       | `Function`                                                                                                                                                                                                                                           | An (async) function called when the iterator is being aborted, before the abort error is thrown. Default `null`                                                          |\n| options.abortMessage  | `String`                                                                                                                                                                                                                                             | The message that the error will have if the iterator is aborted. Default \"The operation was aborted\"                                                                     |\n| options.abortCode     | `String`\\|`Number`                                                                                                                                                                                                                                   | The value assigned to the `code` property of the error that is thrown if the iterator is aborted. Default \"ABORT\\_ERR\"                                                   |\n| options.returnOnAbort | `Boolean`                                                                                                                                                                                                                                            | Instead of throwing the abort error, just return from iterating over the source stream.                                                                                  |\n| options.onReturnError | `Function`                                                                                                                                                                                                                                           | When a generator is aborted, we call `.return` on it - if this function errors the error value will be passed to the `.onReturnError` callback if passed. Default `null` |\n\n#### Returns\n\n| Type                                                                                                                      | Description                                                                                                     |\n| ------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| [`Iterable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) | An iterator that wraps the passed `source` parameter that makes it abortable via the passed `signal` parameter. |\n\nThe returned iterator will `throw` an `AbortError` when it is aborted that has a `type` with the value `aborted` and `code` property with the value `ABORT_ERR` by default.\n\n### `abortableSink(sink, signal, [options])`\n\nThe same as [`abortable.source`](#abortablesource-signal-options) except this makes the passed [`sink`](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#sink-it) abortable. Returns a new sink that wraps the passed `sink` and makes it abortable via the passed `signal` parameter.\n\n### `abortableTransform(transform, signal, [options])`\n\nThe same as [`abortable.source`](#abortablesource-signal-options) except this makes the passed [`transform`](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#transform-it) abortable. Returns a new transform that wraps the passed `transform` and makes it abortable via the passed `signal` parameter.\n\n### `abortableDuplex(duplex, signal, [options])`\n\nThe same as [`abortable.source`](#abortablesource-signal-options) except this makes the passed [`duplex`](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#duplex-it) abortable. Returns a new duplex that wraps the passed `duplex` and makes it abortable via the passed `signal` parameter.\n\nNote that this will abort *both* sides of the duplex. Use `duplex.sink = abortable.sink(duplex.sink)` or `duplex.source = abortable.source(duplex.source)` to abort just the sink or the source.\n\n## Related\n\n- [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/alanshaw/abortable-iterator/issues/new) or submit PRs.\n\n## API Docs\n\n- <https://alanshaw.github.io/abortable-iterator>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/abortable-iterator/-/abortable-iterator-5.0.1.tgz#5d93eba6fa8287a973a9ea090c64ca08b3777780",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/abortable-iterator/-/abortable-iterator-5.0.1.tgz",
    "hash": "5d93eba6fa8287a973a9ea090c64ca08b3777780",
    "integrity": "sha512-hlZ5Z8UwqrKsJcelVPEqDduZowJPBQJ9ZhBC2FXpja3lXy8X6MoI5uMzIgmrA8+3jcVnp8TF/tx+IBBqYJNUrg==",
    "registry": "npm",
    "packageName": "abortable-iterator",
    "cacheIntegrity": "sha512-hlZ5Z8UwqrKsJcelVPEqDduZowJPBQJ9ZhBC2FXpja3lXy8X6MoI5uMzIgmrA8+3jcVnp8TF/tx+IBBqYJNUrg== sha1-XZPrpvqCh6lzqeoJDGTKCLN3d4A="
  },
  "registry": "npm",
  "hash": "5d93eba6fa8287a973a9ea090c64ca08b3777780"
}