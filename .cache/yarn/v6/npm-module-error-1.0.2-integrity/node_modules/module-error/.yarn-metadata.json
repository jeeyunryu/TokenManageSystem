{
  "manifest": {
    "name": "module-error",
    "version": "1.0.2",
    "description": "Create errors with code and cause properties",
    "license": "MIT",
    "author": {
      "name": "Vincent Weevers"
    },
    "scripts": {
      "test": "standard && tsc && hallmark && node test",
      "build": "tsc -d --emitDeclarationOnly --noEmit false"
    },
    "types": "./index.d.ts",
    "files": [
      "index.js",
      "index.d.ts",
      "CHANGELOG.md"
    ],
    "devDependencies": {
      "@types/node": "^17.0.6",
      "@voxpelli/tsconfig": "^3.0.0",
      "hallmark": "^4.0.0",
      "standard": "^16.0.4",
      "tape": "^5.3.1",
      "typescript": "^4.4.4"
    },
    "keywords": [
      "cause",
      "code",
      "error"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/vweevers/module-error.git"
    },
    "bugs": {
      "url": "https://github.com/vweevers/module-error/issues"
    },
    "homepage": "https://github.com/vweevers/module-error",
    "engines": {
      "node": ">=10"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-module-error-1.0.2-integrity/node_modules/module-error/package.json",
    "readmeFilename": "README.md",
    "readme": "# module-error\n\n**Create errors with `code` and `cause` properties. Simple and extensible.**\n\n[![npm status](http://img.shields.io/npm/v/module-error.svg)](https://www.npmjs.org/package/module-error)\n[![node](https://img.shields.io/node/v/module-error.svg)](https://www.npmjs.org/package/module-error)\n[![Test](https://img.shields.io/github/workflow/status/vweevers/module-error/Test?label=test)](https://github.com/vweevers/module-error/actions/workflows/test.yml)\n[![Standard](https://img.shields.io/badge/standard-informational?logo=javascript&logoColor=fff)](https://standardjs.com)\n[![Common Changelog](https://common-changelog.org/badge.svg)](https://common-changelog.org)\n\n## Usage\n\nWorks like a regular `Error` constructor but adds an options argument (as [`proposal-error-cause`](https://github.com/tc39/proposal-error-cause) does).\n\n```js\nconst ModuleError = require('module-error')\n\nthrow new ModuleError('Message goes here', {\n  code: 'EXAMPLE_NOT_FOUND'\n})\n```\n\nThe primary purpose of `ModuleError` is to define a `code` property on the error object following Node.js conventions. It should be set to an uppercase string that uniquely identifies a situation, prefixed with the name of your module (or a collection of modules) to prevent conflicts.\n\nThe output looks like this in Node.js (some stack frames omitted for brevity):\n\n```\nModuleError: Message goes here\n    at Object.<anonymous> (/home/app/example.js:5:7)\n    at node:internal/main/run_main_module:17:47 {\n  code: 'EXAMPLE_NOT_FOUND'\n}\n```\n\nThe benefit of error codes is that messages can be changed without a semver-major release because your [semver](https://semver.org) contract will be on the codes. Codes can be reused across related modules while allowing individual modules to customize messages. I also prefer it over `instanceof MyError` logic because codes work cross-realm and when a tree of `node_modules` contains multiple versions of a module.\n\nTo wrap another error:\n\n```js\ntry {\n  JSON.parse(await fs.readFile('state.json'))\n} catch (err) {\n  throw new ModuleError('Could not load state', {\n    code: 'EXAMPLE_INVALID_STATE',\n    cause: err\n  })\n}\n```\n\nIf for convenience you want to create subclasses with prepared codes:\n\n```js\nclass NotFoundError extends ModuleError {\n  constructor(message, options) {\n    super(message, { ...options, code: 'EXAMPLE_NOT_FOUND' })\n  }\n}\n```\n\nThen you can do:\n\n```js\nthrow new NotFoundError('Message goes here')\n```\n\nUnder Node.js the stack trace will be adjusted accordingly, to skip the frame containing your error constructor.\n\n## API\n\n### `ModuleError(message, [options])`\n\nConstructor to create an error with the provided `message` string. Options:\n\n- `code` (string): if provided, define a `code` property with this value.\n- `cause` (Error): if provided, define a `cause` property with this value. Unlike the spec of [`proposal-error-cause`](https://github.com/tc39/proposal-error-cause) the property is enumerable so that Node.js (v16 at the time of writing) will print it. Firefox prints it regardless, Chromium doesn't yet.\n- `expected`: if truthy, define a `expected` property with value `true`. This is useful for command line interfaces to differentiate unexpected errors from e.g. invalid user input. A pattern I like to follow is to print only an error message if `err.expected` is true and no `--verbose` flag was provided. Otherwise print the full stack.\n- `transient`: if truthy, define a `transient` property with value `true`. This communicates to users that the operation that caused the error may be retried. See also [`transient-error`](https://github.com/vweevers/transient-error) to mark existing errors as transient.\n\n## Install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install module-error\n```\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "MIT License\n\nCopyright (c) Vincent Weevers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/module-error/-/module-error-1.0.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/module-error/-/module-error-1.0.2.tgz",
    "hash": "",
    "integrity": "sha512-0yuvsqSCv8LbaOKhnsQ/T5JhyFlCYLPXK3U2sgV10zoKQwzs/MyfuQUOZQ1V/6OCOJsK/TRgNVrPuPDqtdMFtA==",
    "registry": "npm",
    "packageName": "module-error",
    "cacheIntegrity": "sha512-0yuvsqSCv8LbaOKhnsQ/T5JhyFlCYLPXK3U2sgV10zoKQwzs/MyfuQUOZQ1V/6OCOJsK/TRgNVrPuPDqtdMFtA== sha1-jRpIiXyog/R6RYFtT7PjxrpATYY="
  },
  "registry": "npm",
  "hash": "d32bafb2a482bfc2db68e2a19ec43f4f9261c8594260b3d72b7536b20575d33a0a430cecfccc9fb9050e650d55ffa382389b0afd3460355acfb8f0eab5d305b4"
}