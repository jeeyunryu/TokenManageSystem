{
  "manifest": {
    "name": "it-concat",
    "version": "3.0.1",
    "description": "Concat all buffers/strings yielded from an async iterable into a single BufferList/string",
    "author": {
      "name": "Alan Shaw"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/alanshaw/it-concat#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alanshaw/it-concat.git"
    },
    "bugs": {
      "url": "https://github.com/alanshaw/it-concat/issues"
    },
    "keywords": [
      "async",
      "buffer",
      "bufferlist",
      "concat",
      "glue",
      "iterable",
      "iterator",
      "join",
      "string"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "lint": "aegir lint",
      "dep-check": "aegir dep-check",
      "build": "aegir build",
      "test": "aegir test",
      "test:chrome": "aegir test -t browser --cov",
      "test:chrome-webworker": "aegir test -t webworker",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:firefox-webworker": "aegir test -t webworker -- --browser firefox",
      "test:node": "aegir test -t node --cov",
      "test:electron-main": "aegir test -t electron-main",
      "release": "aegir release"
    },
    "dependencies": {
      "uint8arraylist": "^2.3.3",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "aegir": "^37.5.6",
      "iso-random-stream": "^2.0.2",
      "random-int": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-it-concat-3.0.1-71ffcc66e0f766af3caf61805de0d3106086cdc9-integrity/node_modules/it-concat/package.json",
    "readmeFilename": "README.md",
    "readme": "# it-concat <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/alanshaw/it-concat.svg?style=flat-square)](https://codecov.io/gh/alanshaw/it-concat)\n[![CI](https://img.shields.io/github/workflow/status/alanshaw/it-concat/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/alanshaw/it-concat/actions/workflows/js-test-and-release.yml)\n\n> Concat all buffers/strings yielded from an async iterable into a single BufferList/string\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n  - [`concat(source, options?): Promise`](#concatsource-options-promise)\n- [Related](#related)\n- [Contribute](#contribute)\n- [License](#license)\n- [Contribute](#contribute-1)\n\n## Install\n\n```console\n$ npm i it-concat\n```\n\n## Usage\n\nConcat Uint8Arrays to a single [`Uint8ArrayList`](https://www.npmjs.com/package/uint8arraylist):\n\n```js\nimport concat from 'it-concat'\nimport { toString } from 'uint8arrays'\nimport fs from 'fs'\n\nfs.writeFileSync('./test.txt', 'Hello World!')\n\n// Node.js Readable Streams are async iterables!\nconst chunks = await concat(fs.createReadStream('./test.txt'))\n\n// chunks is a Uint8ArrayList\nconsole.log(chunks)\n/*\nUint8ArrayList {\n  _bufs: [ <Uint8Array 48 65 6c 6c 6f 20 57 6f 72 6c 64 21> ],\n  length: 12\n}\n*/\nconsole.log(toString(chunks.subarray)))\n// Hello World!\n```\n\nConcat Uint8Arrays to a single *string*:\n\n```js\nimport concat from 'it-concat'\nimport fs from 'fs'\n\nfs.writeFileSync('./test.txt', 'Hello World!')\n\n// Node.js Readable Streams are async iterables!\n// Note that we pass `{ type: 'string' }` to tell concat that we want a string\n// back and not a Uint8Array. This is necessary because the source data is Uint8Array(s).\nconst chunks = await concat(fs.createReadStream('./test.txt'), { type: 'string' })\n\nconsole.log(chunks)\n// Hello World!\n```\n\nConcat strings to a single string:\n\n```js\nimport concat from 'it-concat'\nimport fs from 'fs'\n\nfs.writeFileSync('./test.txt', 'Hello World!')\n\n// Node.js Readable Streams are async iterables!\n// Note that we don't need to pass `{ type: 'string' }` to tell concat that we\n// want a string back because the source data is Uint8Array(s).\nconst chunks = await concat(fs.createReadStream('./test.txt', { encoding: 'utf8' }))\n\nconsole.log(chunks)\n// Hello World!\n```\n\n## API\n\n```js\nimport concat from 'it-concat'\n```\n\n### `concat(source, options?): Promise`\n\nConcat all Uint8Arrays or strings yielded from the async iterable `source` into a single [`Uint8ArrayList`](https://www.npmjs.com/package/bl) or `string`.\n\n- `source` (`AsyncIterable<Uint8Array | Uint8ArrayList | string>`) - the source iterable to concat from\n- `options` (`Object`) - optional options\n- `options.type` (`string`) - return type of the function, pass `'string'` to recieve a string or `'Uint8Array'` for a `Uint8ArrayList`.\n\nReturns a `Promise` that resolves to a `Uint8ArrayList` or `string`.\n\nIf `options.type` is *not* passed the type of the objects yielded from the `source` is detected and a `Uint8ArrayList` or `string` is returned appropriately. If the `source` does not yield anything an empty `Uint8ArrayList` is returned. If the source is expected to return strings (but may not yield anything), pass `options.type: 'string'` to ensure an empty string is returned instead of an empty `Uint8ArrayList`.\n\n## Related\n\n- [`stream-to-it`](https://www.npmjs.com/package/stream-to-it) Convert Node.js streams to streaming iterables\n- [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n\n[List of awesome modules for working with async iterables](https://github.com/alanshaw/it-awesome).\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/alanshaw/it-concat/issues/new) or submit PRs.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/it-concat/-/it-concat-3.0.1.tgz#71ffcc66e0f766af3caf61805de0d3106086cdc9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/it-concat/-/it-concat-3.0.1.tgz",
    "hash": "71ffcc66e0f766af3caf61805de0d3106086cdc9",
    "integrity": "sha512-adsCBiPaDM46TrrpmNPEWru++/oFiLWZAnteM5ODPs0NRkDfjDyom+qyXvag7bP/Kp3Z6Vqv+U1idZs5gmyIAg==",
    "registry": "npm",
    "packageName": "it-concat",
    "cacheIntegrity": "sha512-adsCBiPaDM46TrrpmNPEWru++/oFiLWZAnteM5ODPs0NRkDfjDyom+qyXvag7bP/Kp3Z6Vqv+U1idZs5gmyIAg== sha1-cf/MZuD3Zq88r2GAXeDTEGCGzck="
  },
  "registry": "npm",
  "hash": "71ffcc66e0f766af3caf61805de0d3106086cdc9"
}