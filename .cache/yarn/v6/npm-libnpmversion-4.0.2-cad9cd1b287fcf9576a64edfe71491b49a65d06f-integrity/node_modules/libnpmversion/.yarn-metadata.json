{
  "manifest": {
    "name": "libnpmversion",
    "version": "4.0.2",
    "main": "lib/index.js",
    "files": [
      "bin/",
      "lib/"
    ],
    "description": "library to do the things that 'npm version' does",
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/cli.git",
      "directory": "workspaces/libnpmversion"
    },
    "author": {
      "name": "GitHub Inc."
    },
    "license": "ISC",
    "scripts": {
      "lint": "eslint \"**/*.js\"",
      "test": "tap",
      "posttest": "node ../.. run lint",
      "snap": "tap",
      "postlint": "template-oss-check",
      "lintfix": "node ../.. run lint -- --fix",
      "template-oss-apply": "template-oss-apply --force"
    },
    "tap": {
      "coverage-map": "map.js",
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "devDependencies": {
      "@npmcli/eslint-config": "^4.0.0",
      "@npmcli/template-oss": "4.11.4",
      "require-inject": "^1.4.4",
      "tap": "^16.3.4"
    },
    "dependencies": {
      "@npmcli/git": "^4.0.1",
      "@npmcli/run-script": "^6.0.0",
      "json-parse-even-better-errors": "^3.0.0",
      "proc-log": "^3.0.0",
      "semver": "^7.3.7"
    },
    "engines": {
      "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.11.4",
      "content": "../../scripts/template-oss/index.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-libnpmversion-4.0.2-cad9cd1b287fcf9576a64edfe71491b49a65d06f-integrity/node_modules/libnpmversion/package.json",
    "readmeFilename": "README.md",
    "readme": "# libnpmversion\n\n[![npm version](https://img.shields.io/npm/v/libnpmversion.svg)](https://npm.im/libnpmversion)\n[![license](https://img.shields.io/npm/l/libnpmversion.svg)](https://npm.im/libnpmversion)\n[![CI - libnpmversion](https://github.com/npm/cli/actions/workflows/ci-libnpmversion.yml/badge.svg)](https://github.com/npm/cli/actions/workflows/ci-libnpmversion.yml)\n\nLibrary to do the things that 'npm version' does.\n\n## USAGE\n\n```js\nconst npmVersion = require('libnpmversion')\n\n// argument can be one of:\n// - any semver version string (set to that exact version)\n// - 'major', 'minor', 'patch', 'pre{major,minor,patch}' (increment at\n//   that value)\n// - 'from-git' (set to the latest semver-lookin git tag - this skips\n//   gitTagVersion, but will still sign if asked)\nnpmVersion(arg, {\n  path: '/path/to/my/pkg', // defaults to cwd\n\n  allowSameVersion: false, // allow tagging/etc to the current version\n  preid: '', // when arg=='pre', define the prerelease string, like 'beta' etc.\n  tagVersionPrefix: 'v', // tag as 'v1.2.3' when versioning to 1.2.3\n  commitHooks: true, // default true, run git commit hooks, default true\n  gitTagVersion: true, // default true, tag the version\n  signGitCommit: false, // default false, gpg sign the git commit\n  signGitTag: false, // default false, gpg sign the git tag\n  force: false, // push forward recklessly if any problems happen\n  ignoreScripts: false, // do not run pre/post/version lifecycle scripts\n  scriptShell: '/bin/bash', // shell to run lifecycle scripts in\n  message: 'v%s', // message for tag and commit, replace %s with the version\n  silent: false, // passed to @npmcli/run-script to control whether it logs\n}).then(newVersion => {\n  console.error('version updated!', newVersion)\n})\n```\n\n## Description\n\nRun this in a package directory to bump the version and write the new data\nback to `package.json`, `package-lock.json`, and, if present,\n`npm-shrinkwrap.json`.\n\nThe `newversion` argument should be a valid semver string, a valid second\nargument to [semver.inc](https://github.com/npm/node-semver#functions) (one\nof `patch`, `minor`, `major`, `prepatch`, `preminor`, `premajor`,\n`prerelease`), or `from-git`. In the second case, the existing version will\nbe incremented by 1 in the specified field.  `from-git` will try to read\nthe latest git tag, and use that as the new npm version.\n\nIf run in a git repo, it will also create a version commit and tag.  This\nbehavior is controlled by `gitTagVersion` (see below), and can be\ndisabled by setting `gitTagVersion: false` in the options.\nIt will fail if the working directory is not clean, unless `force: true` is\nset.\n\nIf supplied with a `message` string option, it will\nuse it as a commit message when creating a version commit.  If the\n`message` option contains `%s` then that will be replaced with the\nresulting version number.\n\nIf the `signGitTag` option is set, then the tag will be signed using\nthe `-s` flag to git.  Note that you must have a default GPG key set up in\nyour git config for this to work properly.\n\nIf `preversion`, `version`, or `postversion` are in the `scripts` property\nof the package.json, they will be executed in the appropriate sequence.\n\nThe exact order of execution is as follows:\n\n1. Check to make sure the git working directory is clean before we get\n   started.  Your scripts may add files to the commit in future steps.\n   This step is skipped if the `force` flag is set.\n2. Run the `preversion` script.  These scripts have access to the old\n   `version` in package.json.  A typical use would be running your full\n   test suite before deploying.  Any files you want added to the commit\n   should be explicitly added using `git add`.\n3. Bump `version` in `package.json` as requested (`patch`, `minor`,\n   `major`, explicit version number, etc).\n4. Run the `version` script. These scripts have access to the new `version`\n   in package.json (so they can incorporate it into file headers in\n   generated files for example).  Again, scripts should explicitly add\n   generated files to the commit using `git add`.\n5. Commit and tag.\n6. Run the `postversion` script. Use it to clean up the file system or\n   automatically push the commit and/or tag.\n\nTake the following example:\n\n```json\n{\n  \"scripts\": {\n    \"preversion\": \"npm test\",\n    \"version\": \"npm run build && git add -A dist\",\n    \"postversion\": \"git push && git push --tags && rm -rf build/temp\"\n  }\n}\n```\n\nThis runs all your tests, and proceeds only if they pass. Then runs your\n`build` script, and adds everything in the `dist` directory to the commit.\nAfter the commit, it pushes the new commit and tag up to the server, and\ndeletes the `build/temp` directory.\n\n## API\n\n### `npmVersion(newversion, options = {}) -> Promise<String>`\n\nDo the things.  Returns a promise that resolves to the new version if\nall is well, or rejects if any errors are encountered.\n\n### Options\n\n#### `path` String\n\nThe path to the package being versionified.  Defaults to process.cwd().\n\n#### `allowSameVersion` Boolean\n\nAllow setting the version to the current version in package.json.  Default\n`false`.\n\n#### `preid` String\nWhen the `newversion` is pre, premajor, preminor, or prepatch, this\ndefines the prerelease string, like 'beta' etc.\n\n#### `tagVersionPrefix` String\n\nThe prefix to add to the raw semver string for the tag name.  Defaults to\n`'v'`.  (So, by default it tags as 'v1.2.3' when versioning to 1.2.3.)\n\n#### `commitHooks` Boolean\n\nRun git commit hooks.  Default true.\n\n#### `gitTagVersion` Boolean\n\nTag the version, default true.\n\n#### `signGitCommit` Boolean\n\nGPG sign the git commit.  Default `false`.\n\n#### `signGitTag` Boolean\n\nGPG sign the git tag.  Default `false`.\n\n#### `force` Boolean\n\nPush forward recklessly if any problems happen.  Default `false`.\n\n#### `ignoreScripts` Boolean\n\nDo not run pre/post/version lifecycle scripts.  Default `false`.\n\n#### `scriptShell` String\n\nPath to the shell, which should execute the lifecycle scripts.  Defaults to `/bin/sh` on unix, or `cmd.exe` on windows.\n\n#### `message` String\n\nThe message for the git commit and annotated git tag that are created.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/libnpmversion/-/libnpmversion-4.0.2.tgz#cad9cd1b287fcf9576a64edfe71491b49a65d06f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/libnpmversion/-/libnpmversion-4.0.2.tgz",
    "hash": "cad9cd1b287fcf9576a64edfe71491b49a65d06f",
    "integrity": "sha512-n1X70mFHv8Piy4yos+MFWUARSkTbyV5cdsHScaIkuwYvRAF/s2VtYScDzWB4Oe8uNEuGNdjiRR1E/Dh1tMvv6g==",
    "registry": "npm",
    "packageName": "libnpmversion",
    "cacheIntegrity": "sha512-n1X70mFHv8Piy4yos+MFWUARSkTbyV5cdsHScaIkuwYvRAF/s2VtYScDzWB4Oe8uNEuGNdjiRR1E/Dh1tMvv6g== sha1-ytnNGyh/z5V2pk7f5xSRtJpl0G8="
  },
  "registry": "npm",
  "hash": "cad9cd1b287fcf9576a64edfe71491b49a65d06f"
}