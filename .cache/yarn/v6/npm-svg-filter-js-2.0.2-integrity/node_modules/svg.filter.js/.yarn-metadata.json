{
  "manifest": {
    "name": "svg.filter.js",
    "version": "2.0.2",
    "description": "A plugin for svg.js adding filter functionality",
    "keywords": [
      "svg.js",
      "filter",
      "effect"
    ],
    "bugs": {
      "url": "https://github.com/wout/svg.filter.js/issues"
    },
    "license": "MIT",
    "author": {
      "name": "Wout Fierens"
    },
    "contributors": {
      "name": "Wout Fierens"
    },
    "homepage": "https://github.com/wout/svg.filter.js",
    "main": "dist/svg.filter.js",
    "files": [
      "dist/"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/wout/svg.filter.js.git"
    },
    "engines": {
      "node": ">= 0.8.0"
    },
    "devDependencies": {
      "grunt-contrib-jshint": "~0.10.0",
      "grunt-contrib-concat": "~0.3.0",
      "grunt-contrib-uglify": "~0.2.0",
      "grunt-contrib-watch": "~0.4.0",
      "grunt-contrib-clean": "~0.4.0",
      "grunt": "~0.4.5"
    },
    "dependencies": {
      "svg.js": "^2.2.5"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-svg-filter-js-2.0.2-integrity/node_modules/svg.filter.js/package.json",
    "readmeFilename": "README.md",
    "readme": "# svg.filter.js\n\nA plugin for [svg.js](http://svgjs.com) adding filter functionality.\n\nSvg.filter.js is licensed under the terms of the MIT License.\n\n- [Examples](#examples)\n- [Furthermore](#furthermore)\n    - [unfilter](#unfilter)\n    - [referencing the filter node](#referencing-the-filter-node)\n    - [Animating filter values](#animating-filter-values)\n    - [Chaining Effects](#chaining-effects)\n- [Effect Classes](#effect-classes)\n\n## Usage\nInclude this plugin after including the svg.js library in your html document.\n\nFor a few visual examples look at the [svg.js filter page](http://svgjs.com/filter).\n\nHere is how each filter effect on the example page is achieved.\n\n\n## Examples\n- [gaussian blur](#gaussian-blur)\n- [horizontal blur](#horizontal-blur)\n- [desaturate](#desaturate)\n- [contrast](#contrast)\n- [sepiatone](#sepiatone)\n- [hue rotate 180](#hue-rotate-180)\n- [luminance to alpha](#luminance-to-alpha)\n- [colorize](#colorize)\n- [posterize](#posterize)\n- [darken](#darken)\n- [lighten](#lighten)\n- [invert](#invert)\n- [gamma correct 1](#gamma-correct-1)\n- [gamma correct 2](#gamma-correct-2)\n- [drop shadow](#drop-shadow)\n- [extrude](#extrude)\n\n### original\n\n```javascript\nvar image = draw.image('path/to/image.jpg').size(300, 300)\n```\n\n### gaussian blur\n\n```javascript\nimage.filter(function(add) {\n  add.gaussianBlur(30)\n})\n```\n\n### horizontal blur\n\n```javascript\nimage.filter(function(add) {\n  add.gaussianBlur(30, 0)\n})\n```\n\n### desaturate\n\n```javascript\nimage.filter(function(add) {\n  add.colorMatrix('saturate', 0)\n})\n```\n\n### contrast\n\n```javascript\nimage.filter(function(add) {\n  var amount = 1.5\n\n  add.componentTransfer({\n    rgb: { type: 'linear', slope: amount, intercept: -(0.3 * amount) + 0.3 }\n  })\n})\n```\n\n### sepiatone\n\n```javascript\nimage.filter(function(add) {\n  add.colorMatrix('matrix', [ .343, .669, .119, 0, 0\n                            , .249, .626, .130, 0, 0\n                            , .172, .334, .111, 0, 0\n                            , .000, .000, .000, 1, 0 ])\n})\n```\n\n### hue rotate 180\n\n```javascript\nimage.filter(function(add) {\n  add.colorMatrix('hueRotate', 180)\n})\n```\n\n### luminance to alpha\n\n```javascript\nimage.filter(function(add) {\n  add.colorMatrix('luminanceToAlpha')\n})\n```\n\n### colorize\n\n```javascript\nimage.filter(function(add) {\n  add.colorMatrix('matrix', [ 1.0, 0,   0,   0,   0\n                            , 0,   0.2, 0,   0,   0\n                            , 0,   0,   0.2, 0,   0\n                            , 0,   0,   0,   1.0, 0 ])\n})\n```\n\n### posterize\n\n```javascript\nimage.filter(function(add) {\n  add.componentTransfer({\n    rgb: { type: 'discrete', tableValues: [0, 0.2, 0.4, 0.6, 0.8, 1] }\n  })\n})\n```\n\n### darken\n\n```javascript\nimage.filter(function(add) {\n  add.componentTransfer({\n    rgb: { type: 'linear', slope: 0.2 }\n  })\n})\n```\n\n### lighten\n\n```javascript\nimage.filter(function(add) {\n  add.componentTransfer({\n    rgb: { type: 'linear', slope: 1.5, intercept: 0.2 }\n  })\n})\n```\n\n### invert\n\n```javascript\nimage.filter(function(add) {\n  add.componentTransfer({\n    rgb: { type: 'table', tableValues: [1, 0] }\n  })\n})\n```\n\n### gamma correct 1\n\n```javascript\nimage.filter(function(add) {\n  add.componentTransfer({\n    g: { type: 'gamma', amplitude: 1, exponent: 0.5 }\n  })\n})\n```\n\n### gamma correct 2\n\n```javascript\nimage.filter(function(add) {\n  add.componentTransfer({\n    g: { type: 'gamma', amplitude: 1, exponent: 0.5, offset: -0.1 }\n  })\n})\n```\n\n\n### drop shadow\nYou will notice that all the effect descriptions have a drop shadow. Here is how this drop shadow can be achieved:\n\n```javascript\nvar text = draw.text('SVG text with drop shadow').fill('#fff')\n\ntext.filter(function(add) {\n  var blur = add.offset(0, 1).in(add.sourceAlpha).gaussianBlur(1)\n\n  add.blend(add.source, blur)\n})\n```\n\nThis technique can be achieved on any other shape of course:\n\n```javascript\nvar rect = draw.rect(100,100).fill('#f09').stroke({ width: 3, color: '#0f9' }).move(10,10)\n\nrect.filter(function(add) {\n  var blur = add.offset(20, 20).in(add.sourceAlpha).gaussianBlur(5)\n\n  add.blend(add.source, blur)\n\n  this.size('200%','200%').move('-50%', '-50%')\n})\n```\n\nIf the drop shadow should get the colour of the shape so it appears like coloured glass:\n\n```javascript\nvar rect = draw.rect(100,100).fill('#f09').stroke({ width: 3, color: '#0f9' }).move(10,10)\n\nrect.filter(function(add) {\n  var blur = add.offset(20, 20).gaussianBlur(5)\n\n  add.blend(add.source, blur)\n\n  this.size('200%','200%').move('-50%', '-50%')\n})\n```\n\n### extrude\n```javascript\nimage.filter(function(add){\n  var matrix = add.convolveMatrix([\n    1,0,0,0,0,0,\n    0,1,0,0,0,0,\n    0,0,1,0,0,0,\n    0,0,0,1,0,0,\n    0,0,0,0,1,0,\n    0,0,0,0,0,1\n  ]).attr({\n    devisor: '2',\n    preserveAlpha: 'false'\n  }).in(add.sourceAlpha)\n\n  //recolor it\n  var color = add.composite(add.flood('#ff2222'),matrix,'in');\n\n  //merge all of them toggether\n  add.merge(color,add.source);\n})\n```\n\n\n## Furthermore\nSome more features you should know about.\n\n### unfilter\nThe `unfilter` method removes the filter attribute from the node:\n\n```javascript\nimage.unfilter()\n```\n\nThis will return the element to its original state but will retain the filter in the defs node. If the filter node should be removed as well, simply pass the `true` as the first argument:\n\n```javascript\nimage.unfilter(true)\n```\n\n\n### referencing the filter node\nAn internal reference to the filter node is made in the element:\n\n```javascript\nimage.filterer\n```\n\nThis can also be very useful to reuse an existing filter on various elements:\n\n```javascript\notherImage.filter(image.filterer)\n```\n\n### Animating filter values\nEvery filter value can be animated as well:\n\n```javascript\nvar hueRotate\n\nimage.filter(function(add) {\n  hueRotate = add.colorMatrix('hueRotate', 0)\n})\n\nhueRotate.animate(3000).attr('values', 360)\n```\n\n### Chaining Effects\n\n[Method chaining](https://en.wikipedia.org/wiki/Method_chaining) is a programing style where each function retures the object it blongs to, for an example look at JQuery.<br>\nits posible to chain the effects on a filter when you are creating them, for example\n```javascript\nimage.filter(function(add){\n  add.flood('black',0.5).composite(add.sourceAlpha,'in').offset(10).merge(add.source)\n})\n```\n\nthis would create a basic shadow filter where the first input on the `composite` effect would be the `flood` effect, and the input on the offset effect would be the `composite` effect.<br>\nsame with the `merge` effect, its first input would be the `offset` effect, and its second input would be `add.source`\n\nsome effects like [Merge](#merge), [Blend](blend), [Composite](#composite), [DisplacementMap](displacementmap) have thier arguments changed when they are chained, for example\n```javascript\nimage.filter(function(add){\n  add.flood('black',0.5).composite(add.sourceAlpha,'in')\n})\n```\nthe `composite` effects first input is set to the `flood` effect and its second input becomes the first argument, this is the same for the merge, blend, composite, and displacmentMap effect. <br>\nfor more details check out each effects doc below\n\n## Effect Classes\n\n- [Base Effect Class](base-effect-class)\n- [Blend](#blend)\n- [ColorMatrix](#colormatrix)\n- [ComponentTransfer](#componenttransfer)\n- [Composite](#composite)\n- [ConvolveMatrix](#convolvematrix)\n- [DiffuseLighting](#diffuseLighting)\n- [DisplacementMap](#displacementmap)\n- [Flood](#flood)\n- [GaussianBlur](#gaussianglur)\n- [Image](#image)\n- [Merge](#merge)\n- [Morphology](#morphology)\n- [Offset](#offset)\n- [SpecularLighting](#specularlighting)\n- [Tile](#tile)\n- [Turbulence](#turbulence)\n\n### Base Effect Class\n\n#### in(effect)\n  gets or sets the `in` attribute of the effect\n  some effect like [Blend](blend), [Composite](#composite), [DisplacementMap](displacementmap) have a `in2` function, it works the same as the as\n\n  - **effect:** this can be another effect or a string <br>\n    if **effect** is not provided it will look for another effect on the same filter whos `result` is equal to this effects `in`, else it will return the value of the `in` attribute\n    ```javascript\n    image.filter(function(add){\n      var offset = add.offset(10)\n\n      //create the blur effect and then set its input\n      var blur = add.gaussianBlur(3)\n\n      //set the input to an effect\n      blur.in(offset)\n\n      //this will return the offset effect\n      var input = blur.in()\n\n      //set the input to a string\n      blur.in('another-result-as-a-string')\n\n      //this will return a string since there is no other effect which has a matching result attribute\n      var input2 = blur.in()\n    })\n    ```\n\n#### result(string)\n  gets or sets the `result` attribute of the effect\n\n  - **string:** if no string if provided it will act as a getter and return the value of the `result` attruibute\n\n### Blend\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feBlendElement)\n\n```javascript\nfilter.blend(in1, in2, mode)\n//or\nnew SVG.BlendEffect(in1, in2, mode)\n```\n\n- **in1**: an effect or the result of effect\n- **in2**: same as **in1**\n- **mode**: \"normal | multiply | screen | darken | lighten\" defaults to \"normal\"\n\n**chaining** when this effect is called right after another effect, for example:\n```javascript\nfilter.offset(10).blend(filter.source)\n```\nthe first input is set to the `offset` effect and the second input is set to `filter.source` or what ever was passed as the first argument, and the second input becomes the **mode**\n\n### ColorMatrix\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feColorMatrixElement)\n\n```javascript\nfilter.colorMatrix(type, values);\n//or\nnew SVG.ColorMatrixEffect(type, values);\n```\n\n- **type**: \"matrix | saturate | hueRotate | luminanceToAlpha\"\n- **values**\n  - **type=\"matrix\"**: values would be a matrix the size of 4x5\n  - **type=\"saturate\"**: number (0 to 1)\n  - **type=\"hueRotate\"**: number (0 to 360) deg\n  - **type=\"luminanceToAlpha\"**: value not needed\n\n### ComponentTransfer\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feComponentTransferElement)\n\n```javascript\nfilter.componentTransfer(components);\n//or\nnew SVG.ComponentTransferEffect(components);\n```\n\n- **components**: an object with one `rgb` property for the (r, g and b) chanels or `r`, `g`, `b`, `a` properties for each chanel\n  ```javascript\n  {\n    rgb: {\n      type: \"identity | table | discrete | linear | gamma\",\n\n      //type=\"table\"\n      tableValues: \"0 0.5 2 1\", //number sperated by spaces\n\n      //type=\"linear\"\n      slope: 1, //number\n      intercept: 3,//number\n\n      //type=\"gamma\"\n      amplitude: 0, //number\n      exponent: 0, //number\n      offset: 0 //number\n    }\n  }\n  ```\n\n### Composite\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feCompositeElement)\n\n```javascript\nfilter.composite(in1, in2, operator);\n//or\nnew SVG.CompositeEffect(in1, in2, operator);\n```\n\n- **in1**: an effect or the result of an effect\n- **in2**: same as **in1**\n- **operator**: \"over | in | out | atop | xor | arithmetic\" defaults to \"over\"\n\n**chaining** when this effect is called right after another effect, for example:\n```javascript\nfilter.flood('black',0.5).composite(filter.sourceAlpha,'in')\n```\nthe first input is set to the `flood` effect and the second input is set to `filter.sourceAlpha` or what ever was passed as the first argument.<br>\nalso the second argument becomes the **operator**\n\n### ConvolveMatrix\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feConvolveMatrixElement)\n\n```javascript\nfilter.convolveMatrix(matrix);\n//or\nnew SVG.ConvolveMatrixEffect(matrix);\n```\n\n- **matrix**: a square matrix of numbers that will be applied to the image\n  - exmaple:\n  ```javascript\n  [\n    1,0,0,\n    0,1,0,\n    0,0,1\n  ]\n  ```\n\n### DiffuseLighting\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feDiffuseLightingElement)\n\n```javascript\nfilter.displacementMap(surfaceScale, diffuseConstant, kernelUnitLength);\n//or\nnew SVG.DisplacementMapEffect(surfaceScale, diffuseConstant, kernelUnitLength);\n```\n\n***very complicated, just check out the W3 doc***\n\n### DisplacementMap\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feDisplacementMapElement)\n\n```javascript\nfilter.displacementMap(in1, in2, scale, xChannelSelector, yChannelSelector);\n//or\nnew SVG.DisplacementMapEffect(in1, in2, scale, xChannelSelector, yChannelSelector);\n```\n\n***very complicated, just check out the W3 doc***\n\n**chaining** when this effect is called right after another effect, for example:\n```javascript\nfilter.offset(20,50).displacementMap(filter.source,2)\n```\nthe first input is set to the `offset` effect and the second input is set to `filter.source` or what ever was passed as the first argument.<br>\nalso the second argument becomes the **scale**, and the third argument is the **xChannelSelector** and so on\n\n### Flood\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feFloodElement)\n\n```javascript\nfilter.flood(color,opacity);\n//or\nnew SVG.FloodEffect(color,opacity);\n```\n\n- **color**: a named or hex color in string format\n- **opacity**: number form 0 to 1\n\n### GaussianBlur\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feGaussianBlurElement)\n\n```javascript\nfilter.gaussianBlur(x, y);\n//or\nnew SVG.GaussianBlurEffect(x, y);\n```\n\n- **x**: blur on the X\n- **y**: blur on the y, will default to the **x** if not provided\n\n### Image\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feImageElement)\n\n```javascript\nfilter.image(src);\n//or\nnew SVG.ImageEffect(src);\n```\n\n### Merge\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feMergeElement)\n\n```javascript\nfilter.merge();\n//or\nnew SVG.MergeEffect();\n```\n\n- **Array**: an Array of effects or effect results `filter.merge([effectOne,\"result-two\",another_effect])`\n- **SVG.Set**: a set of effects\n- **arguments**: pass each effect or result in as arguments `filter.merge(effect,\"some-result\",anotherEffect)`\n- **chianing** you can also chian the merge effect `filter.offset(10).merge(anotherEffect)` will result in a merge effect with its first input set to the `offset` effect and its second input set to `anotherEffect`\n\n### Morphology\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feMorphologyElement)\n\n```javascript\nfilter.morphology(operator, radius);\n//or\nnew SVG.MorphologyEffect(operator, radius);\n```\n\n- **operator**: \"erode | dilate\"\n- **radius**: a single number or a string of two number sperated by a space\n  - the first number is the X\n  - the second number is the Y, if no provided it will default to the first number\n\n### Offset\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feOffsetElement)\n\n```javascript\nfilter.offset(x, y);\n//or\nnew SVG.OffsetEffect(x, y);\n```\n\n- **x**: move on the X\n- **y**: move on the y, will default to the **x** if not provided\n\n### SpecularLighting\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feSpecularLightingElement)\n\n```javascript\nfilter.specularLighting(surfaceScale, diffuseConstant, specularExponent, kernelUnitLength);\n//or\nnew SVG.SpecularLightingEffect(surfaceScale, diffuseConstant, specularExponent, kernelUnitLength);\n```\n\n***very complicated, just check out the W3 doc***\n\n### Tile\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feTileElement)\n\n```javascript\nfilter.tile();\n//or\nnew SVG.TileEffect();\n```\n\n***no arguments, but if you want to find out what it dose check out the W3 doc***\n\n### Turbulence\n\n[W3 doc](https://www.w3.org/TR/SVG/filters.html#feTurbulenceElement)\n\n```javascript\nfilter.turbulence(baseFrequency, numOctaves, seed, stitchTiles, type);\n//or\nnew SVG.TurbulenceEffect(baseFrequency, numOctaves, seed, stitchTiles, type);\n```\n\n***very complicated, just check out the W3 doc***\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Fuzzy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/svg.filter.js/-/svg.filter.js-2.0.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/svg.filter.js/-/svg.filter.js-2.0.2.tgz",
    "hash": "",
    "integrity": "sha512-xkGBwU+dKBzqg5PtilaTb0EYPqPfJ9Q6saVldX+5vCRy31P6TlRCP3U9NxH3HEufkKkpNgdTLBJnmhDHeTqAkw==",
    "registry": "npm",
    "packageName": "svg.filter.js",
    "cacheIntegrity": "sha512-xkGBwU+dKBzqg5PtilaTb0EYPqPfJ9Q6saVldX+5vCRy31P6TlRCP3U9NxH3HEufkKkpNgdTLBJnmhDHeTqAkw== sha1-kQCOFROJ3ZIwd5/L5uLJo2LRwgM="
  },
  "registry": "npm",
  "hash": "c64181c14f9d281cea8393ed8a56936f41183ea3df27d43ab1a565757fb9bc2472df53fa4e54423f753d3711f71c4b9f90a9293607532c12679a10c7793a8093"
}