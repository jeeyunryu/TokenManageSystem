{
  "manifest": {
    "name": "json-stringify-nice",
    "version": "1.1.4",
    "description": "Stringify an object sorting scalars before objects, and defaulting to 2-space indent",
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "https://izs.me"
    },
    "license": "ISC",
    "scripts": {
      "test": "tap",
      "posttest": "npm run lint",
      "snap": "tap",
      "postsnap": "npm run lintfix",
      "eslint": "eslint",
      "lint": "npm run eslint -- index.js test/**/*.js",
      "lintfix": "npm run lint -- --fix",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --follow-tags"
    },
    "tap": {
      "test-env": [
        "LC_ALL=sk"
      ],
      "check-coverage": true
    },
    "devDependencies": {
      "eslint": "^7.25.0",
      "eslint-plugin-import": "^2.22.1",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-promise": "^5.1.0",
      "eslint-plugin-standard": "^5.0.0",
      "tap": "^15.0.6"
    },
    "funding": {
      "url": "https://github.com/sponsors/isaacs"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/isaacs/json-stringify-nice"
    },
    "files": [
      "index.js"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-json-stringify-nice-1.1.4-2c937962b80181d3f317dd39aa323e14f5a60a67-integrity/node_modules/json-stringify-nice/package.json",
    "readmeFilename": "README.md",
    "readme": "# json-stringify-nice\n\nStringify an object sorting scalars before objects, and defaulting to\n2-space indent.\n\nSometimes you want to stringify an object in a consistent way, and for\nhuman legibility reasons, you may want to put any non-object properties\nahead of any object properties, so that it's easier to track the nesting\nlevel as you read through the object, but you don't want to have to be\nmeticulous about maintaining object property order as you're building up\nthe object, since it doesn't matter in code, it only matters in the output\nfile.  Also, it'd be nice to have it default to reasonable spacing without\nhaving to remember to add `, null, 2)` to all your `JSON.stringify()`\ncalls.\n\nIf that is what you want, then this module is for you, because it does\nall of that.\n\n## USAGE\n\n```js\nconst stringify = require('json-stringify-nice')\nconst obj = {\n  z: 1,\n  y: 'z',\n  obj: { a: {}, b: 'x' },\n  a: { b: 1, a: { nested: true} },\n  yy: 'a',\n}\n\nconsole.log(stringify(obj))\n/* output:\n{\n  \"y\": \"z\", <-- alphabetical sorting like whoa!\n  \"yy\": \"a\",\n  \"z\": 1,\n  \"a\": { <-- a sorted before obj, because alphabetical, and both objects\n    \"b\": 1,\n    \"a\": {  <-- note that a comes after b, because it's an object\n      \"nested\": true\n    }\n  },\n  \"obj\": {\n    \"b\": \"x\",\n    \"a\": {}\n  }\n}\n*/\n\n// specify an array of keys if you have some that you prefer\n// to be sorted in a specific order.  preferred keys come before\n// any other keys, and in the order specified, but objects are\n// still sorted AFTER scalars, so the preferences only apply\n// when both values are objects or both are non-objects.\nconsole.log(stringify(obj, ['z', 'yy', 'obj']))\n/* output\n{\n  \"z\": 1, <-- z comes before other scalars\n  \"yy\": \"a\", <-- yy comes after z, but before other scalars\n  \"y\": \"z\", <-- then all the other scalar values\n  \"obj\": { <-- obj comes before other objects, but after scalars\n    \"b\": \"x\",\n    \"a\": {}\n  },\n  \"a\": {\n    \"b\": 1,\n    \"a\": {\n      \"nested\": true\n    }\n  }\n}\n*/\n\n// can also specify a replacer or indent value like with JSON.stringify\n// this turns all values with an 'a' key into a doggo meme from 2011\nconst replacer = (key, val) =>\n  key === 'a' ? { hello: '📞 yes', 'this is': '🐕', ...val } : val\n\nconsole.log(stringify(obj, replacer, '📞🐶'))\n\n/* output:\n{\n📞🐶\"y\": \"z\",\n📞🐶\"yy\": \"a\",\n📞🐶\"z\": 1,\n📞🐶\"a\": {\n📞🐶📞🐶\"b\": 1,\n📞🐶📞🐶\"hello\": \"📞 yes\",\n📞🐶📞🐶\"this is\": \"🐕\",\n📞🐶📞🐶\"a\": {\n📞🐶📞🐶📞🐶\"hello\": \"📞 yes\",\n📞🐶📞🐶📞🐶\"nested\": true,\n📞🐶📞🐶📞🐶\"this is\": \"🐕\"\n📞🐶📞🐶}\n📞🐶},\n📞🐶\"obj\": {\n📞🐶📞🐶\"b\": \"x\",\n📞🐶📞🐶\"a\": {\n📞🐶📞🐶📞🐶\"hello\": \"📞 yes\",\n📞🐶📞🐶📞🐶\"this is\": \"🐕\"\n📞🐶📞🐶}\n📞🐶}\n}\n*/\n```\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/json-stringify-nice/-/json-stringify-nice-1.1.4.tgz#2c937962b80181d3f317dd39aa323e14f5a60a67",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/json-stringify-nice/-/json-stringify-nice-1.1.4.tgz",
    "hash": "2c937962b80181d3f317dd39aa323e14f5a60a67",
    "integrity": "sha512-5Z5RFW63yxReJ7vANgW6eZFGWaQvnPE3WNmZoOJrSkGju2etKA2L5rrOa1sm877TVTFt57A80BH1bArcmlLfPw==",
    "registry": "npm",
    "packageName": "json-stringify-nice",
    "cacheIntegrity": "sha512-5Z5RFW63yxReJ7vANgW6eZFGWaQvnPE3WNmZoOJrSkGju2etKA2L5rrOa1sm877TVTFt57A80BH1bArcmlLfPw== sha1-LJN5YrgBgdPzF905qjI+FPWmCmc="
  },
  "registry": "npm",
  "hash": "2c937962b80181d3f317dd39aa323e14f5a60a67"
}