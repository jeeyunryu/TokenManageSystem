{
  "manifest": {
    "name": "multibase",
    "version": "0.6.1",
    "description": "JavaScript implementation of the multibase specification",
    "leadMaintainer": "Oli Evans <oli@tableflip.io>",
    "main": "src/index.js",
    "scripts": {
      "lint": "aegir lint",
      "test": "aegir test",
      "test:node": "aegir test -t node",
      "test:browser": "aegir test -t browser",
      "build": "aegir build",
      "docs": "aegir docs",
      "release": "aegir release --docs",
      "release-minor": "aegir release --type minor --docs",
      "release-major": "aegir release --type major --docs",
      "coverage": "aegir coverage",
      "coverage-publish": "aegir coverage publish"
    },
    "files": [
      "src",
      "dist"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/multiformats/js-multibase.git"
    },
    "keywords": [
      "IPFS",
      "multiformats",
      "multibase",
      "encode",
      "decode",
      "formats"
    ],
    "devDependencies": {
      "aegir": "^21.3.0",
      "chai": "^4.1.2",
      "dirty-chai": "^2.0.1",
      "pre-commit": "^1.2.2"
    },
    "dependencies": {
      "base-x": "^3.0.8",
      "buffer": "^5.5.0"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/multiformats/js-multibase/issues"
    },
    "homepage": "https://github.com/multiformats/js-multibase#readme",
    "contributors": [
      {
        "name": "David Dias",
        "email": "daviddias.p@gmail.com"
      },
      {
        "name": "Oli Evans",
        "email": "oli@tableflip.io"
      },
      {
        "name": "Friedel Ziegelmayer",
        "email": "dignifiedquire@gmail.com"
      },
      {
        "name": "Alan Shaw",
        "email": "alan.shaw@protocol.ai"
      },
      {
        "name": "Hugo Dias",
        "email": "hugomrdias@gmail.com"
      },
      {
        "name": "ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ",
        "email": "victorbjelkholm@gmail.com"
      },
      {
        "name": "Richard Littauer",
        "email": "richard.littauer@gmail.com"
      },
      {
        "name": "theobat",
        "email": "theophile.batoz@gmail.com"
      },
      {
        "name": "Henrique Dias",
        "email": "hacdias@gmail.com"
      },
      {
        "name": "Bora M. Alper",
        "email": "boramalper@gmail.com"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-multibase-0.6.1-integrity/node_modules/multibase/package.json",
    "readmeFilename": "README.md",
    "readme": "js-multibase\n============\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-multiformats-blue.svg?style=flat-square)](https://github.com/multiformats/multiformats)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](https://webchat.freenode.net/?channels=%23ipfs)\n[![Dependency Status](https://david-dm.org/multiformats/js-multibase.svg?style=flat-square)](https://david-dm.org/multiformats/js-multibase)\n[![codecov](https://img.shields.io/codecov/c/github/multiformats/js-multibase.svg?style=flat-square)](https://codecov.io/gh/multiformats/js-multibase)\n[![Travis CI](https://flat.badgen.net/travis/multiformats/js-multibase)](https://travis-ci.com/multiformats/js-multibase)\n\n> JavaScript implementation of the [multibase](https://github.com/multiformats/multibase) specification\n\n## Lead Maintainer\n\n[Oli Evans](https://github.com/olizilla)\n\n## Table of Contents\n\n- [Install](#install)\n  - [In Node.js through npm](#in-nodejs-through-npm)\n  - [Browser: Browserify, Webpack, other bundlers](#browser-browserify-webpack-other-bundlers)\n  - [In the Browser through `<script>` tag](#in-the-browser-through-script-tag)\n    - [Gotchas](#gotchas)\n- [Usage](#usage)\n  - [Example](#example)\n- [API](#api)\n  - [`multibase` - Prefixes an encoded buffer with its multibase code](#multibase---prefixes-an-encoded-buffer-with-its-multibase-code)\n  - [`multibase.encode` - Encodes a buffer into one of the supported encodings, prefixing it with the multibase code](#multibaseencode---encodes-a-buffer-into-one-of-the-supported-encodings-prefixing-it-with-the-multibase-code)\n  - [`multibase.decode` - Decodes a buffer or string](#multibasedecode---decodes-a-buffer-or-string)\n  - [`multibase.isEncoded` - Checks if buffer or string is encoded](#multibaseisencoded---checks-if-buffer-or-string-is-encoded)\n  - [`multibase.names` - Supported base encoding names](#multibasenames)\n  - [`multibase.codes` - Supported base encoding codes](#multibasecodes)\n  - [Supported Encodings, see `src/constants.js`](#supported-encodings-see-srcconstantsjs)\n- [Architecture and Encoding/Decoding](#architecture-and-encodingdecoding)\n- [Adding additional bases](#adding-additional-bases)\n- [License](#license)\n\n## Install\n\n### In Node.js through npm\n\n```bash\n> npm install --save multibase\n```\n\n### Browser: Browserify, Webpack, other bundlers\n\nThe code published to npm that gets loaded on require is in fact an ES5 transpiled version with the right shims added. This means that you can require it and use with your favourite bundler without having to adjust asset management process.\n\n```js\nconst multibase = require('multibase')\n```\n\n\n### In the Browser through `<script>` tag\n\nLoading this module through a script tag will make the ```Multibase``` obj available in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/multibase/dist/index.min.js\"></script>\n<!-- OR -->\n<script src=\"https://unpkg.com/multibase/dist/index.js\"></script>\n```\n\n#### Gotchas\n\nYou will need to use Node.js `Buffer` API compatible, if you are running inside the browser, you can access it by `multibase.Buffer` or you can load Feross's [Buffer](https://github.com/feross/buffer) module.\n\n## Usage\n\n### Example\n\n```JavaScript\nconst multibase = require('multibase')\n\nconst encodedBuf = multibase.encode('base58btc', new Buffer('hey, how is it going'))\n\nconst decodedBuf = multibase.decode(encodedBuf)\nconsole.log(decodedBuf.toString())\n// hey, how is it going\n```\n\n## API\nhttps://multiformats.github.io/js-multibase/\n\n### `multibase` - Prefixes an encoded buffer with its multibase code\n\n```\nconst multibased = multibase(<nameOrCode>, encodedBuf)\n```\n\n### `multibase.encode` - Encodes a buffer into one of the supported encodings, prefixing it with the multibase code\n\n```JavaScript\nconst encodedBuf = multibase.encode(<nameOrCode>, <buf>)\n```\n\n### `multibase.decode` - Decodes a buffer or string\n\n```JavaScript\nconst decodedBuf = multibase.decode(bufOrString)\n```\n\n### `multibase.isEncoded` - Checks if buffer or string is encoded\n\n```JavaScript\nconst value = multibase.isEncoded(bufOrString)\n// value is the name of the encoding if it is encoded, false otherwise\n```\n\n### `multibase.names`\n\nA frozen `Array` of supported base encoding names.\n\n### `multibase.codes`\n\nA frozen `Array` of supported base encoding codes.\n\n### Supported Encodings, see [`src/constants.js`](/src/constants.js)\n\n## Architecture and Encoding/Decoding\n\nMultibase package defines all the supported bases and the location of their implementation in the constants.js file. A base is a class with a name, a code, an implementation and an alphabet.\n```js\nclass Base {\n  constructor (name, code, implementation, alphabet) {\n    //...\n  }\n  // ...\n}\n```\nThe ```implementation``` is an object where the encoding/decoding functions are implemented. It must take one argument, (the alphabet) following the [base-x module](https://github.com/cryptocoinjs/base-x) architecture.\n\nThe ```alphabet``` is the **ordered** set of defined symbols for a given base.\n\nThe idea behind this is that several bases may have implementations from different locations/modules so it's useful to have an object (and a summary) of all of them in one location (hence the constants.js).\n\nAll the supported bases are currently using the npm [base-x](https://github.com/cryptocoinjs/base-x) module as their implementation. It is using bitwise maipulation to go from one base to another, so this module does not support padding at the moment.\n\n## Adding additional bases\n\nIf the base you are looking for is not supported yet in js-multibase and you know a good encoding/decoding algorithm, you can add support for this base easily by editing the constants.js file\n(**you'll need to create an issue about that beforehand since a code and a canonical name have to be defined**):\n\n```js\nconst baseX = require('base-x')\n//const newPackage = require('your-package-name')\n\nconst constants = [\n  ['base1', '1', '', '1'],\n  ['base2', '0', baseX, '01'],\n  ['base8', '7', baseX, '01234567'],\n  // ... [ 'your-base-name', 'code-to-be-defined', newPackage, 'alphabet']\n]\n```\nThe required package defines the implementation of the encoding/decoding process. **It must comply by these rules** :\n- `encode` and `decode` functions with to-be-encoded buffer as the only expected argument\n- the require call use the `alphabet` given as an argument for the encoding/decoding process\n\n*If no package is specified (such as for base1 in the above example, it means the base is not implemented yet)*\n\nAdding a new base requires the tests to be updated. Test files to be updated are :\n- constants.spec.js\n```js\ndescribe('constants', () => {\n  it('constants indexed by name', () => {\n    const names = constants.names\n    expect(Object.keys(names).length).to.equal(constants-count) // currently 12\n  })\n\n  it('constants indexed by code', () => {\n    const codes = constants.codes\n    expect(Object.keys(codes).length).to.equal(constants-count)\n  })\n})\n```\n\n- multibase.spec.js\n    - if the base is implemented\n    ```js\n    const supportedBases = [\n      ['base2', 'yes mani !', '01111001011001010111001100100000011011010110000101101110011010010010000000100001'],\n      ['base8', 'yes mani !', '7171312714403326055632220041'],\n      ['base10', 'yes mani !', '9573277761329450583662625'],\n      // ... ['your-base-name', 'what you want', 'expected output']\n    ```\n    - if the base is not implemented yet\n    ```js\n    const supportedBases = [\n      // ... ['your-base-name']\n    ```\n\n## Contribute\n\nContributions welcome. Please check out [the issues](https://github.com/multiformats/js-multibase/issues).\n\nCheck out our [contributing document](https://github.com/multiformats/multiformats/blob/master/contributing.md) for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\n[MIT](LICENSE) © 2016 Protocol Labs Inc.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016 Protocol Labs Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/multibase/-/multibase-0.6.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/multibase/-/multibase-0.6.1.tgz",
    "hash": "",
    "integrity": "sha512-pFfAwyTjbbQgNc3G7D48JkJxWtoJoBMaR4xQUOuB8RnCgRqaYmWNFeJTTvrJ2w51bjLq2zTby6Rqj9TQ9elSUw==",
    "registry": "npm",
    "packageName": "multibase",
    "cacheIntegrity": "sha512-pFfAwyTjbbQgNc3G7D48JkJxWtoJoBMaR4xQUOuB8RnCgRqaYmWNFeJTTvrJ2w51bjLq2zTby6Rqj9TQ9elSUw== sha1-t232KYU2zBe59qbbU+yI+F+MwSs="
  },
  "registry": "npm",
  "hash": "a457c0c324e36db42035cdc6ec3e3c2642715ada09a0131a478c5050eb81f119c2811a9a62658d15e2534efac9db0e756e32eadb34dbcba46a8fd4d0f5e95253"
}