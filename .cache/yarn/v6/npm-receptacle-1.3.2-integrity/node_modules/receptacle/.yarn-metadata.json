{
  "manifest": {
    "name": "receptacle",
    "description": "In memory cache lru cache with ttl support.",
    "version": "1.3.2",
    "author": {
      "name": "Dylan Piercey",
      "email": "pierceydylan@gmail.com"
    },
    "bugs": {
      "url": "https://github.com/DylanPiercey/receptacle/issues"
    },
    "dependencies": {
      "ms": "^2.1.1"
    },
    "devDependencies": {
      "browserify": "^16.2.2",
      "bundle-collapser": "^1.3.0",
      "coveralls": "^3.0.1",
      "exorcist": "^1.0.1",
      "istanbul": "^0.4.5",
      "mocha": "^5.2.0",
      "snazzy": "^7.1.1",
      "standard": "^11.0.1",
      "uglifyjs": "^2.4.11"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "homepage": "https://github.com/DylanPiercey/receptacle",
    "keywords": [
      "cache",
      "expires",
      "lru",
      "map",
      "memory",
      "receptacle",
      "ttl"
    ],
    "license": "MIT",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/DylanPiercey/receptacle"
    },
    "scripts": {
      "build": "make build",
      "coveralls": "make coveralls",
      "lint": "make lint",
      "test": "npm run lint && make test",
      "test-ci": "npm run lint && make test-ci"
    },
    "typings": "./index.d.ts",
    "standard": {
      "globals": [
        "GIT_COMMIT",
        "describe",
        "it",
        "before",
        "beforeEach",
        "after",
        "afterEach"
      ],
      "ignore": [
        "dist/"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-receptacle-1.3.2-integrity/node_modules/receptacle/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">\n  <!-- Logo -->\n  Receptacle\n\n  <br/>\n\n  <!-- Stability -->\n  <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">\n    <img src=\"https://img.shields.io/badge/stability-stable-brightgreen.svg?style=flat-square\" alt=\"API stability\"/>\n  </a>\n  <!-- Standard -->\n  <a href=\"https://github.com/feross/standard\">\n    <img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"Standard\"/>\n  </a>\n  <!-- NPM version -->\n  <a href=\"https://npmjs.org/package/receptacle\">\n    <img src=\"https://img.shields.io/npm/v/receptacle.svg?style=flat-square\" alt=\"NPM version\"/>\n  </a>\n  <!-- Travis build -->\n  <a href=\"https://travis-ci.org/DylanPiercey/receptacle\">\n  <img src=\"https://img.shields.io/travis/DylanPiercey/receptacle.svg?style=flat-square\" alt=\"Build status\"/>\n  </a>\n  <!-- Coveralls coverage -->\n  <a href=\"https://coveralls.io/github/DylanPiercey/receptacle\">\n    <img src=\"https://img.shields.io/coveralls/DylanPiercey/receptacle.svg?style=flat-square\" alt=\"Test Coverage\"/>\n  </a>\n  <!-- File size -->\n  <a href=\"https://github.com/DylanPiercey/receptacle/blob/master/dist/receptacle.js\">\n    <img src=\"https://badge-size.herokuapp.com/DylanPiercey/receptacle/master/dist/receptacle.js?style=flat-square\" alt=\"File size\"/>\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://npmjs.org/package/receptacle\">\n    <img src=\"https://img.shields.io/npm/dm/receptacle.svg?style=flat-square\" alt=\"Downloads\"/>\n  </a>\n  <!-- Gitter chat -->\n  <a href=\"https://gitter.im/DylanPiercey/receptacle\">\n    <img src=\"https://img.shields.io/gitter/room/DylanPiercey/receptacle.svg?style=flat-square\" alt=\"Gitter Chat\"/>\n  </a>\n</h1>\n\nIn memory cache for node and the browser that supports `lru` and `ttl` algorithms.\n\nItems in the cache will move to the back queue when accessed and any key can optionally have an expiry time.\n\n## Installation\n\n\n#### Npm\n```console\nnpm install receptacle\n```\n\n#### [Download](https://raw.githubusercontent.com/DylanPiercey/receptacle/master/dist/receptacle.js)\n```html\n<script type=\"text/javascript\" src=\"receptacle.js\"></script>\n<script>\n    define(['receptacle'], function (receptacle) {...}) // AMD\n    window.receptacle // Global receptacle if no module system in place.\n</script>\n```\n\n## Example\n\n```js\nvar Receptacle = require('receptacle');\nvar cache      = new Receptacle({ max: 100 }); // Create a cache with max 100 items.\n\ncache.set(\"item\", 1, { ttl: 100 }); //-> Add item to cache (expire in 100ms).\ncache.get(\"item\"); //-> 1\ncache.has(\"item\"); //-> true\ncache.expire(\"item\", 50); //-> Expire in 50ms (instead of 100).\ncache.delete(\"item\"); //-> Delete item right away.\ncache.clear(); //-> Empty the cache.\n\n// You can also use the \"refresh\" option to automatically reset a keys expiration when accessed.\ncache.set(\"item\", 1, { ttl: 100, refresh: true });\n// 50ms later\ncache.get(\"item\"); // Resets timer back to 100ms.\n\n// And store meta data about values.\ncache.set(\"item\", 1, { meta: { custom: 1 } });\n// Then retrieve it.\ncache.meta(\"item\"); //-> { custom: 1 }\n```\n\n## Serialization\nYou can easily serialize and rehydrate your cache as JSON.\n\n```js\nvar Receptacle = require('receptacle');\nvar cache      = new Receptacle({ max: 5 }); // Create a cache with max 5 items.\n\ncache.set(\"a\", 1, { ttl: 1000 });\n\nvar serialized = JSON.stringify(cache); //-> '{ \"max\": 5, \"items\": [...] }'\n\n// Create a cache from the json which will retain all ttl information (and remove any keys that have expired).\nvar newCacheFromJSON = new Receptacle(JSON.parse(serialized));\n\n```\n\n## API\n\n###`Receptacle({ max=Infinity, items=[], id=# })`\nCreate a new cache.\n\n###`#id`\nEach cache is assigned a unique id for organizing, you can optionally provide an id during instanciation.\n\n###`#max`\nGet the maximum size of the cache (default of Infinity).\n\n###`#size`\nGet the current number of items in the cache.\n\n###`#has(key)`\nCheck if a key is in the cache, even if it's undefined.\n\n###`#get(key)`\nRetreive a key from the cache.\n\n###`#meta(key)`\nIf a meta option was used with setting an item in the cache it will be returned.\n\n###`#set(key, value, options)`\nSet a key in the cache, optionally setting a `ttl` option that will cause the value to expire.\nIf a `refresh` option is `true` the ttl will automatically reset when the `key` is accessed.\n\n###`#delete(key)`\nImmediately remove a key from the cache.\n\n###`#expire(key, [ms=0])`\nUpdate the expire time for a key. You can also use any valid [ms](https://github.com/rauchg/ms.js) string for a timeout.\n\n###`#clear()`\nRemove all keys from the cache.\n\n---\n\n### Contributions\n\n* Use `npm test` to run tests.\n\nPlease feel free to create a PR!\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/receptacle/-/receptacle-1.3.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/receptacle/-/receptacle-1.3.2.tgz",
    "hash": "",
    "integrity": "sha512-HrsFvqZZheusncQRiEE7GatOAETrARKV/lnfYicIm8lbvp/JQOdADOfhjBd2DajvoszEyxSM6RlAAIZgEoeu/A==",
    "registry": "npm",
    "packageName": "receptacle",
    "cacheIntegrity": "sha512-HrsFvqZZheusncQRiEE7GatOAETrARKV/lnfYicIm8lbvp/JQOdADOfhjBd2DajvoszEyxSM6RlAAIZgEoeu/A== sha1-p5lMfvr8egHQ4gQYOdq2xJUTYNI="
  },
  "registry": "npm",
  "hash": "1ebb05bea65985ebac9dc41188413b19ab4e0044eb011295fe59df6227089bc95bbe9fc940e7400ce7e18c17760da8efa2ccc4cb148ce919400086601287aefc"
}