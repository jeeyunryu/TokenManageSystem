{
  "manifest": {
    "name": "is-ipfs",
    "version": "8.0.1",
    "description": "A set of utilities to help identify IPFS resources on the web",
    "author": {
      "name": "Francisco Dias",
      "email": "francisco@baiodias.com",
      "url": "http://franciscodias.net/"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipfs-shipyard/is-ipfs#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs-shipyard/is-ipfs.git"
    },
    "bugs": {
      "url": "https://github.com/ipfs-shipyard/is-ipfs/issues"
    },
    "keywords": [
      "dnslink",
      "gateway",
      "ipfs",
      "ipns",
      "js-ipfs"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "dep-check": "aegir dep-check",
      "generate": "protons src/pb/peer.proto src/pb/tags.proto",
      "build": "aegir build",
      "test": "aegir test",
      "test:chrome": "aegir test -t browser",
      "test:chrome-webworker": "aegir test -t webworker",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:firefox-webworker": "aegir test -t webworker -- --browser firefox",
      "test:node": "aegir test -t node",
      "test:electron-main": "aegir test -t electron-main",
      "release": "aegir release",
      "docs": "aegir docs"
    },
    "dependencies": {
      "@multiformats/mafmt": "^11.0.3",
      "@multiformats/multiaddr": "^11.0.0",
      "iso-url": "^1.1.3",
      "multiformats": "^11.0.0",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "aegir": "^37.10.1"
    },
    "browser": {
      "fs": false
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-is-ipfs-8.0.1-integrity/node_modules/is-ipfs/package.json",
    "readmeFilename": "README.md",
    "readme": "# is-ipfs <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/ipfs-shipyard/is-ipfs.svg?style=flat-square)](https://codecov.io/gh/ipfs-shipyard/is-ipfs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs-shipyard/is-ipfs/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs-shipyard/is-ipfs/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> A set of utilities to help identify IPFS resources on the web\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n- [API](#api)\n  - [Content Identifiers](#content-identifiers)\n    - [`isIPFS.multihash(hash)`](#isipfsmultihashhash)\n    - [`isIPFS.cid(hash)`](#isipfscidhash)\n    - [`isIPFS.base32cid(hash)`](#isipfsbase32cidhash)\n  - [URLs](#urls)\n    - [`isIPFS.url(url)`](#isipfsurlurl)\n    - [`isIPFS.ipfsUrl(url)`](#isipfsipfsurlurl)\n    - [`isIPFS.ipnsUrl(url)`](#isipfsipnsurlurl)\n  - [Paths](#paths)\n    - [`isIPFS.path(path)`](#isipfspathpath)\n    - [`isIPFS.urlOrPath(path)`](#isipfsurlorpathpath)\n    - [`isIPFS.ipfsPath(path)`](#isipfsipfspathpath)\n    - [`isIPFS.ipnsPath(path)`](#isipfsipnspathpath)\n    - [`isIPFS.cidPath(path)`](#isipfscidpathpath)\n  - [Subdomains](#subdomains)\n    - [`isIPFS.subdomain(url)`](#isipfssubdomainurl)\n    - [`isIPFS.ipfsSubdomain(url)`](#isipfsipfssubdomainurl)\n    - [`isIPFS.ipnsSubdomain(url)`](#isipfsipnssubdomainurl)\n  - [Multiaddrs](#multiaddrs)\n    - [`isIPFS.multiaddr(addr)`](#isipfsmultiaddraddr)\n    - [`isIPFS.peerMultiaddr(addr)`](#isipfspeermultiaddraddr)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribution](#contribution)\n\n## Install\n\n```console\n$ npm i is-ipfs\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `IsIpfs` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/is-ipfs/dist/index.min.js\"></script>\n```\n\n## Usage\n\n```javascript\nimport * as isIPFS from 'is-ipfs'\n\nisIPFS.multihash('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.multihash('noop') // false\n\nisIPFS.cid('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true (CIDv0)\nisIPFS.cid('bafybeiasb5vpmaounyilfuxbd3lryvosl4yefqrfahsb2esg46q6tu6y5q') // true (CIDv1 in Base32)\nisIPFS.cid('zdj7WWeQ43G6JJvLWQWZpyHuAMq6uYWRjkBXFad11vE2LHhQ7') // true (CIDv1 in Base58btc)\nisIPFS.cid('noop') // false\n\nisIPFS.base32cid('bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va') // true\nisIPFS.base32cid('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\n\nisIPFS.url('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.url('https://ipfs.io/ipfs/QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR?filename=guardian.jpg') // true\nisIPFS.url('https://ipfs.io/ipns/github.com') // true\nisIPFS.url('https://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\nisIPFS.url('http://en.wikipedia-on-ipfs.org.ipfs.localhost:8080') // true\nisIPFS.url('https://github.com/ipfs/js-ipfs/blob/master/README.md') // false\nisIPFS.url('https://google.com') // false\n\nisIPFS.path('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.path('/ipfs/QmbcBPAwCDxRMB1Qe7CRQmxdrTSkxKwM9y6rZw2FjGtbsb/?weird-filename=test.jpg') // true\nisIPFS.path('/ipns/github.com') // true\nisIPFS.path('/ipfs/js-ipfs/blob/master/README.md') // false\n\nisIPFS.urlOrPath('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.urlOrPath('https://ipfs.io/ipns/github.com') // true\nisIPFS.urlOrPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.urlOrPath('/ipns/github.com') // true\nisIPFS.urlOrPath('https://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\nisIPFS.urlOrPath('https://google.com') // false\n\nisIPFS.ipfsUrl('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.ipfsUrl('https://ipfs.io/ipfs/invalid-hash') // false\n\nisIPFS.ipnsUrl('https://ipfs.io/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\nisIPFS.ipnsUrl('https://ipfs.io/ipns/github.com') // true\n\nisIPFS.ipfsPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // true\nisIPFS.ipfsPath('/ipfs/invalid-hash') // false\n\nisIPFS.ipnsPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\nisIPFS.ipnsPath('/ipns/github.com') // true\n\nisIPFS.cidPath('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o/path/to/file') // true\nisIPFS.cidPath('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o/') // true\nisIPFS.cidPath('QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\nisIPFS.cidPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o') // false\nisIPFS.cidPath('/ipfs/QmYjtig7VJQ6XsnUjqqJvj7QaMcCAwtrgNdahSiFofrE7o/file') // false\n\nisIPFS.subdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\nisIPFS.subdomain('http://bafybeiabc2xofh6tdi6vutusorpumwcikw3hf3st4ecjugo6j52f6xwc6q.ipns.dweb.link') // true\nisIPFS.subdomain('http://www.bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // false\nisIPFS.subdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.dweb.link') // false\n\nisIPFS.ipfsSubdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.ipfs.dweb.link') // true\nisIPFS.ipfsSubdomain('http://bafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va.dweb.link') // false\n\nisIPFS.ipnsSubdomain('http://bafybeiabc2xofh6tdi6vutusorpumwcikw3hf3st4ecjugo6j52f6xwc6q.ipns.dweb.link') // true\nisIPFS.ipnsSubdomain('http://bafybeiabc2xofh6tdi6vutusorpumwcikw3hf3st4ecjugo6j52f6xwc6q.dweb.link') // false\nisIPFS.ipnsSubdomain('http://QmcNioXSC1bfJj1dcFErhUfyjFzoX2HodkRccsFFVJJvg8.ipns.dweb.link') // false\nisIPFS.ipnsSubdomain('http://en.wikipedia-on-ipfs.org.ipns.localhost:8080') // true (assuming DNSLink)\nisIPFS.ipnsSubdomain('http://en-wikipedia--on--ipfs-org.ipns.localhost:8080') // true (assuming inlined DNSLink)\nisIPFS.ipnsSubdomain('http://hostname-without-tld-.ipns.dweb.link') // false (not a CID, invalid DNS label)\n\nisIPFS.multiaddr('/ip4/127.0.0.1/udp/1234') // true\nisIPFS.multiaddr('/ip4/127.0.0.1/udp/1234/http') // true\nisIPFS.multiaddr('/ip6/::1/udp/1234') // true\nisIPFS.multiaddr('ip6/::1/udp/1234') // false\nisIPFS.multiaddr('/yoloinvalid/::1/udp/1234') // false\n\nisIPFS.peerMultiaddr('/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSoooo4') // true\nisIPFS.peerMultiaddr('/ipfs/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSoooo4') // true (legacy notation)\nisIPFS.peerMultiaddr('/ip4/127.0.0.1/tcp/1234/ws/p2p/QmUjNmr8TgJCn1Ao7DvMy4cjoZU15b9bwSCBLE3vwXiwgj') // true\nisIPFS.peerMultiaddr('/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSoooo4/p2p-circuit/p2p/QmUjNmr8TgJCn1Ao7DvMy4cjoZU15b9bwSCBLE3vwXiwgj') // true\nisIPFS.peerMultiaddr('/dnsaddr/bootstrap.libp2p.io') // false (key missing, needs additional DNS lookup to tell if this is valid)\nisIPFS.peerMultiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN') // true (key present, ip and port can be resolved later)\nisIPFS.peerMultiaddr('/ip4/127.0.0.1/udp/1234') // false (key missing)\n```\n\n## API\n\nA suite of util methods that provides efficient validation.\n\nDetection of IPFS Paths and identifiers in URLs is a two-stage process:\n\n1. `pathPattern`/`pathGatewayPattern`/`subdomainGatewayPattern` regex is applied to quickly identify potential candidates\n2. proper CID validation is applied to remove false-positives\n\n### Content Identifiers\n\n#### `isIPFS.multihash(hash)`\n\nReturns `true` if the provided string or `Uint8Array`  is a valid `multihash` or `false` otherwise.\n\n#### `isIPFS.cid(hash)`\n\nReturns `true` if the provided string, `Uint8Array`  or [`CID`](https://github.com/multiformats/js-multiformats/#readme) object represents a valid [CID](https://docs.ipfs.io/guides/concepts/cid/) or `false` otherwise.\n\n#### `isIPFS.base32cid(hash)`\n\nReturns `true` if the provided string is a valid `CID` in Base32 encoding or `false` otherwise.\n\n### URLs\n\n#### `isIPFS.url(url)`\n\nReturns `true` if the provided string is a valid IPFS or IPNS url or `false` otherwise.\n\n#### `isIPFS.ipfsUrl(url)`\n\nReturns `true` if the provided string is a valid IPFS url or `false` otherwise.\n\n#### `isIPFS.ipnsUrl(url)`\n\nReturns `true` if the provided string is a valid IPNS url or `false` otherwise.\n\n### Paths\n\nStandalone validation of IPFS Paths: `/ip(f|n)s/<cid>/..`\n\n#### `isIPFS.path(path)`\n\nReturns `true` if the provided string is a valid IPFS or IPNS path or `false` otherwise.\n\n#### `isIPFS.urlOrPath(path)`\n\nReturns `true` if the provided string is a valid IPFS or IPNS url or path or `false` otherwise.\n\n#### `isIPFS.ipfsPath(path)`\n\nReturns `true` if the provided string is a valid IPFS path or `false` otherwise.\n\n#### `isIPFS.ipnsPath(path)`\n\nReturns `true` if the provided string is a valid IPNS path or `false` otherwise.\n\n#### `isIPFS.cidPath(path)`\n\nReturns `true` if the provided string is a valid \"CID path\" (IPFS path without `/ipfs/` prefix) or `false` otherwise.\n\n### Subdomains\n\nValidated subdomain convention: `cidv1b32.ip(f|n)s.domain.tld`\n\n#### `isIPFS.subdomain(url)`\n\nReturns `true` if the provided `url` string includes a valid IPFS, looks like IPNS/DNSLink subdomain or `false` otherwise.\n\n#### `isIPFS.ipfsSubdomain(url)`\n\nReturns `true` if the provided `url` string includes a valid IPFS subdomain (case-insensitive CIDv1) or `false` otherwise.\n\n#### `isIPFS.ipnsSubdomain(url)`\n\nReturns `true` if the provided `url` string looks like a valid IPNS subdomain\n(CIDv1 with `libp2p-key` multicodec or something that looks like a FQDN, for example `en.wikipedia-on-ipfs.org.ipns.localhost:8080`) or `false`\notherwise.\n\n**Note:** `ipnsSubdomain` method works in offline mode: it does not perform\nactual IPNS record lookup over DHT or other content routing method. It may\nreturn false-positives:\n\n- To ensure IPNS record  exists, make a call to `/api/v0/name/resolve?arg=<ipnsid>`\n- To ensure DNSLink exists, make a call to `/api/v0/dns?arg=<fqdn>`\n\n### Multiaddrs\n\nBelow methods provide basic detection of [multiaddr](https://github.com/multiformats/multiaddr)s: composable and future-proof network addresses.\n\nComplex validation of multiaddr can be built using `isIPFS.multiaddr` and  [`mafmt`](https://github.com/multiformats/js-mafmt) library.\n\n#### `isIPFS.multiaddr(addr)`\n\nReturns `true` if the provided `string`, [`Multiaddr`](https://github.com/multiformats/js-multiaddr) or `Uint8Array` represents a valid multiaddr or `false` otherwise.\n\n#### `isIPFS.peerMultiaddr(addr)`\n\nReturns `true` if the provided `string`, [`Multiaddr`](https://github.com/multiformats/js-multiaddr) or `Uint8Array` represents a valid libp2p peer multiaddr (matching [`P2P` format from `mafmt`](https://github.com/multiformats/js-mafmt#api)) or `false` otherwise.\n\n## API Docs\n\n- <https://ipfs-shipyard.github.io/is-ipfs>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/is-ipfs/-/is-ipfs-8.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/is-ipfs/-/is-ipfs-8.0.1.tgz",
    "hash": "",
    "integrity": "sha512-hoBSElmPath3aDdtaOpVZsuCh2SXTqvLML+H75S7iDgKdqNmENJ6tsRucP1HLfpqEyZ/uIlj/+ZBxIC/F8B5Eg==",
    "registry": "npm",
    "packageName": "is-ipfs",
    "cacheIntegrity": "sha512-hoBSElmPath3aDdtaOpVZsuCh2SXTqvLML+H75S7iDgKdqNmENJ6tsRucP1HLfpqEyZ/uIlj/+ZBxIC/F8B5Eg== sha1-I679CG0yp/znsYC8Vb9xMTpkFBU="
  },
  "registry": "npm",
  "hash": "86805212598f6ad87768376d68ea5566cb828764974eabcb30bf87ef94bb88380a76a36610d27ab6c46e70fd472dfa6a13267fb88963ffe641c480bf17c07912"
}