{
  "manifest": {
    "name": "@npmcli/git",
    "version": "4.0.4",
    "main": "lib/index.js",
    "files": [
      "bin/",
      "lib/"
    ],
    "description": "a util for spawning git from npm CLI contexts",
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/git.git"
    },
    "author": {
      "name": "GitHub Inc."
    },
    "license": "ISC",
    "scripts": {
      "lint": "eslint \"**/*.js\"",
      "snap": "tap",
      "test": "tap",
      "posttest": "npm run lint",
      "postlint": "template-oss-check",
      "lintfix": "npm run lint -- --fix",
      "template-oss-apply": "template-oss-apply --force"
    },
    "tap": {
      "check-coverage": true,
      "coverage-map": "map.js",
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "devDependencies": {
      "@npmcli/eslint-config": "^4.0.0",
      "@npmcli/template-oss": "4.12.0",
      "npm-package-arg": "^10.0.0",
      "slash": "^3.0.0",
      "tap": "^16.0.1"
    },
    "dependencies": {
      "@npmcli/promise-spawn": "^6.0.0",
      "lru-cache": "^7.4.4",
      "npm-pick-manifest": "^8.0.0",
      "proc-log": "^3.0.0",
      "promise-inflight": "^1.0.1",
      "promise-retry": "^2.0.1",
      "semver": "^7.3.5",
      "which": "^3.0.0"
    },
    "engines": {
      "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "windowsCI": false,
      "version": "4.12.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@npmcli-git-4.0.4-integrity/node_modules/@npmcli/git/package.json",
    "readmeFilename": "README.md",
    "readme": "# @npmcli/git\n\nA utility for spawning git from npm CLI contexts.\n\nThis is _not_ an implementation of git itself, it's just a thing that\nspawns child processes to tell the system git CLI implementation to do\nstuff.\n\n## USAGE\n\n```js\nconst git = require('@npmcli/git')\ngit.clone('git://foo/bar.git', 'some-branch', 'some-path', opts) // clone a repo\n  .then(() => git.spawn(['checkout', 'some-branch'], {cwd: 'bar'}))\n  .then(() => git.spawn(['you get the idea']))\n```\n\n## API\n\nMost methods take an options object.  Options are described below.\n\n### `git.spawn(args, opts = {})`\n\nLaunch a `git` subprocess with the arguments specified.\n\nAll the other functions call this one at some point.\n\nProcesses are launched using\n[`@npmcli/promise-spawn`](http://npm.im/@npmcli/promise-spawn), with the\n`stdioString: true` option enabled by default, since git output is\ngenerally in readable string format.\n\nReturn value is a `Promise` that resolves to a result object with `{cmd,\nargs, code, signal, stdout, stderr}` members, or rejects with an error with\nthe same fields, passed back from\n[`@npmcli/promise-spawn`](http://npm.im/@npmcli/promise-spawn).\n\n### `git.clone(repo, ref = 'HEAD', target = null, opts = {})` -> `Promise<sha String>`\n\nClone the repository into `target` path (or the default path for the name\nof the repository), checking out `ref`.\n\nReturn value is the sha of the current HEAD in the locally cloned\nrepository.\n\nIn lieu of a specific `ref`, you may also pass in a `spec` option, which is\na [`npm-package-arg`](http://npm.im/npm-package-arg) object for a `git`\npackage dependency reference.  In this way, you can select SemVer tags\nwithin a range, or any git committish value.  For example:\n\n```js\nconst npa = require('npm-package-arg')\ngit.clone('git@github.com:npm/git.git', '', null, {\n  spec: npa('github:npm/git#semver:1.x'),\n})\n\n// only gitRange and gitCommittish are relevant, so this works, too\ngit.clone('git@github.com:npm/git.git', null, null, {\n  spec: { gitRange: '1.x' }\n})\n```\n\nThis will automatically do a shallow `--depth=1` clone on any hosts that\nare known to support it.  To force a shallow or deep clone, you can set the\n`gitShallow` option to `true` or `false` respectively.\n\n### `git.revs(repo, opts = {})` -> `Promise<rev doc Object>`\n\nFetch a representation of all of the named references in a given\nrepository.  The resulting doc is intentionally somewhat\n[packument](https://www.npmjs.com/package/pacote#packuments)-like, so that\ngit semver ranges can be applied using the same\n[`npm-pick-manifest`](http://npm.im/npm-pick-manifest) logic.\n\nThe resulting object looks like:\n\n```js\nrevs = {\n  versions: {\n    // all semver-looking tags go in here...\n    // version: { sha, ref, rawRef, type }\n    '1.0.0': {\n      sha: '1bc5fba3353f8e1b56493b266bc459276ab23139',\n      ref: 'v1.0.0',\n      rawRef: 'refs/tags/v1.0.0',\n      type: 'tag',\n    },\n  },\n  'dist-tags': {\n    HEAD: '1.0.0',\n    latest: '1.0.0',\n  },\n  refs: {\n    // all the advertised refs that can be cloned down remotely\n    HEAD: { sha, ref, rawRef, type: 'head' },\n    master: { ... },\n    'v1.0.0': { ... },\n    'refs/tags/v1.0.0': { ... },\n  },\n  shas: {\n    // all named shas referenced above\n    // sha: [list, of, refs]\n    '6b2501f9183a1753027a9bf89a184b7d3d4602c7': [\n      'HEAD',\n      'master',\n      'refs/heads/master',\n    ],\n    '1bc5fba3353f8e1b56493b266bc459276ab23139': [ 'v1.0.0', 'refs/tags/v1.0.0' ],\n  },\n}\n```\n\n### `git.is(opts)` -> `Promise<Boolean>`\n\nResolve to `true` if the path argument refers to the root of a git\nrepository.\n\nIt does this by looking for a file in `${path}/.git/index`, which is not an\nairtight indicator, but at least avoids being fooled by an empty directory\nor a file named `.git`.\n\n### `git.find(opts)` -> `Promise<String | null>`\n\nGiven a path, walk up the file system tree until a git repo working\ndirectory is found.  Since this calls `stat` a bunch of times, it's\nprobably best to only call it if you're reasonably sure you're likely to be\nin a git project somewhere.\n\nResolves to `null` if not in a git project.\n\n### `git.isClean(opts = {})` -> `Promise<Boolean>`\n\nReturn true if in a git dir, and that git dir is free of changes.  This\nwill resolve `true` if the git working dir is clean, or `false` if not, and\nreject if the path is not within a git directory or some other error\noccurs.\n\n## OPTIONS\n\n- `retry` An object to configure retry behavior for transient network\n  errors with exponential backoff.\n  - `retries`: Defaults to `opts.fetchRetries` or 2\n  - `factor`: Defaults to `opts.fetchRetryFactor` or 10\n  - `maxTimeout`: Defaults to `opts.fetchRetryMaxtimeout` or 60000\n  - `minTimeout`: Defaults to `opts.fetchRetryMintimeout` or 1000\n- `git` Path to the `git` binary to use.  Will look up the first `git` in\n  the `PATH` if not specified.\n- `spec` The [`npm-package-arg`](http://npm.im/npm-package-arg) specifier\n  object for the thing being fetched (if relevant).\n- `fakePlatform` set to a fake value of `process.platform` to use.  (Just\n  for testing `win32` behavior on Unix, and vice versa.)\n- `cwd` The current working dir for the git command.  Particularly for\n  `find` and `is` and `isClean`, it's good to know that this defaults to\n  `process.cwd()`, as one might expect.\n- Any other options that can be passed to\n  [`@npmcli/promise-spawn`](http://npm.im/@npmcli/promise-spawn), or\n  `child_process.spawn()`.\n",
    "licenseText": "The ISC License\n\nCopyright (c) npm, Inc.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE NPM DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE NPM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@npmcli/git/-/git-4.0.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@npmcli/git/-/git-4.0.4.tgz",
    "hash": "",
    "integrity": "sha512-5yZghx+u5M47LghaybLCkdSyFzV/w4OuH12d96HO389Ik9CDsLaDZJVynSGGVJOLn6gy/k7Dz5XYcplM3uxXRg==",
    "registry": "npm",
    "packageName": "@npmcli/git",
    "cacheIntegrity": "sha512-5yZghx+u5M47LghaybLCkdSyFzV/w4OuH12d96HO389Ik9CDsLaDZJVynSGGVJOLn6gy/k7Dz5XYcplM3uxXRg== sha1-zfdPIbHUQMB1b7KBWdk1Ep2dqjM="
  },
  "registry": "npm",
  "hash": "e72660871faee4ce3b2e085ac9b2c291d4b217357fc383ae1f5d9df7a1cedfcf4893d083b0b6836495729d218654938b9fa832fe4ec3cf95d872994cdeec5746"
}