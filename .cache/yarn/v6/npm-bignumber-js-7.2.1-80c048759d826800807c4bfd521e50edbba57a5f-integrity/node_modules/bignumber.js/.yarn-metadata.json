{
  "manifest": {
    "name": "bignumber.js",
    "description": "A library for arbitrary-precision decimal and non-decimal arithmetic",
    "version": "7.2.1",
    "keywords": [
      "arbitrary",
      "precision",
      "arithmetic",
      "big",
      "number",
      "decimal",
      "float",
      "biginteger",
      "bigdecimal",
      "bignumber",
      "bigint",
      "bignum"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/MikeMcl/bignumber.js.git"
    },
    "main": "bignumber",
    "module": "bignumber.mjs",
    "browser": "bignumber.js",
    "types": "bignumber.d.ts",
    "author": {
      "name": "Michael Mclaughlin",
      "email": "M8ch88l@gmail.com"
    },
    "engines": {
      "node": "*"
    },
    "license": "MIT",
    "scripts": {
      "test": "node test/test",
      "build": "uglifyjs bignumber.js --source-map bignumber.js.map -c -m -o bignumber.min.js --preamble \"/* bignumber.js v7.2.1 https://github.com/MikeMcl/bignumber.js/LICENCE */\""
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-bignumber-js-7.2.1-80c048759d826800807c4bfd521e50edbba57a5f-integrity/node_modules/bignumber.js/package.json",
    "readmeFilename": "README.md",
    "readme": "![bignumber.js](https://raw.githubusercontent.com/MikeMcl/bignumber.js/gh-pages/bignumberjs.png)\n\nA JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.\n\n[![Build Status](https://travis-ci.org/MikeMcl/bignumber.js.svg)](https://travis-ci.org/MikeMcl/bignumber.js)\n\n<br />\n\n## Features\n\n  - Integers and decimals\n  - Simple API but full-featured\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\n  - 8 KB minified and gzipped\n  - Replicates the `toExponential`, `toFixed`, `toPrecision` and `toString` methods of JavaScript's Number type\n  - Includes a `toFraction` and a correctly-rounded `squareRoot` method\n  - Supports cryptographically-secure pseudo-random number generation\n  - No dependencies\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\n  - Comprehensive [documentation](http://mikemcl.github.io/bignumber.js/) and test set\n\n![API](https://raw.githubusercontent.com/MikeMcl/bignumber.js/gh-pages/API.png)\n\nIf a smaller and simpler library is required see [big.js](https://github.com/MikeMcl/big.js/).\nIt's less than half the size but only works with decimal numbers and only has half the methods.\nIt also does not allow `NaN` or `Infinity`, or have the configuration options of this library.\n\nSee also [decimal.js](https://github.com/MikeMcl/decimal.js/), which among other things adds support for non-integer powers, and performs all operations to a specified number of significant digits.\n\n## Load\n\nThe library is the single JavaScript file *bignumber.js* (or minified, *bignumber.min.js*).\n\nBrowser:\n\n```html\n<script src='path/to/bignumber.js'></script>\n```\n\n[Node.js](http://nodejs.org):\n\n```bash\n$ npm install --save bignumber.js\n```\n\n```javascript\nvar BigNumber = require('bignumber.js');\n```\n\nES6 module (*bignumber.mjs*):\n\n```javascript\n//import BigNumber from 'bignumber.js';\nimport {BigNumber} from 'bignumber.js';\n```\n\nAMD loader libraries such as [requireJS](http://requirejs.org/):\n\n```javascript\nrequire(['bignumber'], function(BigNumber) {\n    // Use BigNumber here in local scope. No global BigNumber.\n});\n```\n\n## Use\n\n*In all examples below, `var`, semicolons and `toString` calls are not shown.\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\n\nThe library exports a single function: `BigNumber`, the constructor of BigNumber instances.\n\nIt accepts a value of type Number, String or BigNumber,\n\n```javascript\nx = new BigNumber(123.4567)\ny = BigNumber('123456.7e-3')\nz = new BigNumber(x)\nx.isEqualTo(y) && y.isEqualTo(z) && x.isEqualTo(z)      // true\n```\n\nand a base can be specified.\n\n```javascript\na = new BigNumber(1011, 2)          // \"11\"\nb = new BigNumber('zz.9', 36)       // \"1295.25\"\nc = x.plus(y)                       // \"1306.25\"\n```\n\nNote that a BigNumber is created from a Number's decimal `toString()` value not from its underlying binary value. If the latter is required, then pass the Number's `toString(2)` value and specify base 2.\n\n```javascript\nnew BigNumber(Number.MAX_VALUE.toString(2), 2)\n``` \n\nIf the limited precision of Number values is not well understood, **it is recommended to pass String values rather than Number values** to avoid a potential loss of precision.\n\n```javascript\n// Precision loss from using numeric literals with more than 15 significant digits.   \nnew BigNumber(1.0000000000000001);                 // '1'\nnew BigNumber(88259496234518.57);                  // '88259496234518.56'\nnew BigNumber(99999999999999999999);               // '100000000000000000000'\n\n// Precision loss from using numeric literals outside the range of Number values.\nnew BigNumber(2e+308);                             // 'Infinity'\nnew BigNumber(1e-324);                             // '0'\n\n// Precision loss from the unexpected result of arithmetic with Number values.\nnew BigNumber(0.7 + 0.1);                          // '0.7999999999999999' \n```\n\nA BigNumber is immutable in the sense that it is not changed by its methods.\n\n```javascript\n0.3 - 0.1                           // 0.19999999999999998\nx = new BigNumber(0.3)\nx.minus(0.1)                        // \"0.2\"\nx                                   // \"0.3\"\n```\n\nThe methods that return a BigNumber can be chained.\n\n```javascript\nx.dividedBy(y).plus(z).times(9)\nx.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').integerValue()\n```\n\nSome of the longer method names have a shorter alias.\n\n```javascript\nx.squareRoot().dividedBy(y).exponentiatedBy(3).isEqualTo( x.sqrt().div(y).pow(3) )    // true\nx.modulo(y).multipliedBy(z).eq( x.mod(y).times(z) )                                   // true\n```\n\nAs with JavaScript's Number type, there are `toExponential`, `toFixed` and `toPrecision` methods\n\n```javascript\nx = new BigNumber(255.5)\nx.toExponential(5)                  // \"2.55500e+2\"\nx.toFixed(5)                        // \"255.50000\"\nx.toPrecision(5)                    // \"255.50\"\nx.toNumber()                        //  255.5\n```\n\n and a base can be specified for `toString`.\n\n ```javascript\n x.toString(16)                     // \"ff.8\"\n ```\n\nThere is also a `toFormat` method which may be useful for internationalisation\n\n```javascript\ny = new BigNumber('1234567.898765')\ny.toFormat(2)                       // \"1,234,567.90\"\n```\n\nThe maximum number of decimal places of the result of an operation involving division (i.e. a division, square root, base conversion or negative power operation) is set using the `config` method of the `BigNumber` constructor.\n\nThe other arithmetic operations always give the exact result.\n\n```javascript\nBigNumber.config({ DECIMAL_PLACES: 10, ROUNDING_MODE: 4 })\n\nx = new BigNumber(2);\ny = new BigNumber(3);\nz = x.dividedBy(y)                        // \"0.6666666667\"\nz.squareRoot()                            // \"0.8164965809\"\nz.exponentiatedBy(-3)                     // \"3.3749999995\"\nz.toString(2)                             // \"0.1010101011\"\nz.multipliedBy(z)                         // \"0.44444444448888888889\"\nz.multipliedBy(z).decimalPlaces(10)       // \"0.4444444445\"\n```\n\nThere is a `toFraction` method with an optional *maximum denominator* argument\n\n```javascript\ny = new BigNumber(355)\npi = y.dividedBy(113)               // \"3.1415929204\"\npi.toFraction()                     // [ \"7853982301\", \"2500000000\" ]\npi.toFraction(1000)                 // [ \"355\", \"113\" ]\n```\n\nand `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `BigNumber` values.\n\n```javascript\nx = new BigNumber(NaN)                                           // \"NaN\"\ny = new BigNumber(Infinity)                                      // \"Infinity\"\nx.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()        // true\n```\n\nThe value of a BigNumber is stored in a decimal floating point format in terms of a coefficient, exponent and sign.\n\n```javascript\nx = new BigNumber(-123.456);\nx.c                                 // [ 123, 45600000000000 ]  coefficient (i.e. significand)\nx.e                                 // 2                        exponent\nx.s                                 // -1                       sign\n```\n\nFor advanced usage, multiple BigNumber constructors can be created, each with their own independent configuration which applies to all BigNumber's created from it.\n\n```javascript\n// Set DECIMAL_PLACES for the original BigNumber constructor\nBigNumber.config({ DECIMAL_PLACES: 10 })\n\n// Create another BigNumber constructor, optionally passing in a configuration object\nBN = BigNumber.clone({ DECIMAL_PLACES: 5 })\n\nx = new BigNumber(1)\ny = new BN(1)\n\nx.div(3)                            // '0.3333333333'\ny.div(3)                            // '0.33333'\n```\n\nFor futher information see the [API](http://mikemcl.github.io/bignumber.js/) reference in the *doc* directory.\n\n## Test\n\nThe *test/modules* directory contains the test scripts for each method.\n\nThe tests can be run with Node.js or a browser. For Node.js use\n\n    $ npm test\n\nor\n\n    $ node test/test\n\nTo test a single method, use, for example\n\n    $ node test/methods/toFraction\n\nFor the browser, open *test/test.html*.\n\n## Performance\n\nSee the [README](https://github.com/MikeMcl/bignumber.js/tree/master/perf) in the *perf* directory.\n\n## Build\n\nFor Node, if [uglify-js](https://github.com/mishoo/UglifyJS2) is installed\n\n    npm install uglify-js -g\n\nthen\n\n    npm run build\n\nwill create *bignumber.min.js*.\n\nA source map will also be created in the root directory.\n\n## Feedback\n\nOpen an issue, or email\n\nMichael\n\n<a href=\"mailto:M8ch88l@gmail.com\">M8ch88l@gmail.com</a>\n\n## Licence\n\nThe MIT Licence.\n\nSee [LICENCE](https://github.com/MikeMcl/bignumber.js/blob/master/LICENCE).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/bignumber.js/-/bignumber.js-7.2.1.tgz#80c048759d826800807c4bfd521e50edbba57a5f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/bignumber.js/-/bignumber.js-7.2.1.tgz",
    "hash": "80c048759d826800807c4bfd521e50edbba57a5f",
    "integrity": "sha512-S4XzBk5sMB+Rcb/LNcpzXr57VRTxgAvaAEDAl1AwRx27j00hT84O6OkteE7u8UB3NuaaygCRrEpqox4uDOrbdQ==",
    "registry": "npm",
    "packageName": "bignumber.js",
    "cacheIntegrity": "sha512-S4XzBk5sMB+Rcb/LNcpzXr57VRTxgAvaAEDAl1AwRx27j00hT84O6OkteE7u8UB3NuaaygCRrEpqox4uDOrbdQ== sha1-gMBIdZ2CaACAfEv9Uh5Q7bulel8="
  },
  "registry": "npm",
  "hash": "80c048759d826800807c4bfd521e50edbba57a5f"
}