{
  "manifest": {
    "name": "ipfs-unixfs-importer",
    "version": "12.0.1",
    "description": "JavaScript implementation of the UnixFs importer used by IPFS",
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipfs/js-ipfs-unixfs/tree/master/packages/ipfs-unixfs-importer#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipfs-unixfs.git"
    },
    "bugs": {
      "url": "https://github.com/ipfs/js-ipfs-unixfs/issues"
    },
    "keywords": [
      "IPFS"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "test": "aegir test",
      "test:node": "aegir test -t node --cov",
      "test:chrome": "aegir test -t browser --cov",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "build": "aegir build",
      "clean": "aegir clean",
      "lint": "aegir lint",
      "dep-check": "aegir dep-check -i interface-blockstore",
      "release": "aegir release"
    },
    "dependencies": {
      "@ipld/dag-pb": "^4.0.0",
      "@multiformats/murmur3": "^2.0.0",
      "err-code": "^3.0.1",
      "hamt-sharding": "^3.0.0",
      "interface-blockstore": "^4.0.0",
      "ipfs-unixfs": "^9.0.0",
      "it-all": "^2.0.0",
      "it-batch": "^2.0.0",
      "it-first": "^2.0.0",
      "it-parallel-batch": "^2.0.0",
      "merge-options": "^3.0.4",
      "multiformats": "^11.0.0",
      "rabin-wasm": "^0.1.4",
      "uint8arraylist": "^2.3.3",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "aegir": "^38.1.2",
      "assert": "^2.0.0",
      "blockstore-core": "^3.0.0",
      "it-buffer-stream": "^3.0.0",
      "wherearewe": "^2.0.1"
    },
    "browser": {
      "fs": false
    },
    "typedoc": {
      "entryPoint": "./src/index.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ipfs-unixfs-importer-12.0.1-integrity/node_modules/ipfs-unixfs-importer/package.json",
    "readmeFilename": "README.md",
    "readme": "# ipfs-unixfs-importer <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-unixfs.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-unixfs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfs-unixfs/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-ipfs-unixfs/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> JavaScript implementation of the UnixFs importer used by IPFS\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Example](#example)\n- [API](#api)\n  - [const stream = importer(source, blockstore \\[, options\\])](#const-stream--importersource-blockstore--options)\n- [Overriding internals](#overriding-internals)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipfs-unixfs-importer\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `IpfsUnixfsImporter` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipfs-unixfs-importer/dist/index.min.js\"></script>\n```\n\n## Example\n\nLet's create a little directory to import:\n\n```sh\n> cd /tmp\n> mkdir foo\n> echo 'hello' > foo/bar\n> echo 'world' > foo/quux\n```\n\nAnd write the importing logic:\n\n```js\nimport { importer } from 'ipfs-unixfs-importer'\nimport { MemoryBlockstore } from 'blockstore-core/memory'\n\n// Where the blocks will be stored\nconst blockstore = new MemoryBlockstore()\n\n// Import path /tmp/foo/bar\nconst source = [{\n  path: '/tmp/foo/bar',\n  content: fs.createReadStream(file)\n}, {\n  path: '/tmp/foo/quxx',\n  content: fs.createReadStream(file2)\n}]\n\nfor await (const entry of importer(source, blockstore, options)) {\n  console.info(entry)\n}\n```\n\nWhen run, metadata about DAGNodes in the created tree is printed until the root:\n\n```js\n{\n  cid: CID, // see https://github.com/multiformats/js-cid\n  path: 'tmp/foo/bar',\n  unixfs: UnixFS // see https://github.com/ipfs/js-ipfs-unixfs\n}\n{\n  cid: CID, // see https://github.com/multiformats/js-cid\n  path: 'tmp/foo/quxx',\n  unixfs: UnixFS // see https://github.com/ipfs/js-ipfs-unixfs\n}\n{\n  cid: CID, // see https://github.com/multiformats/js-cid\n  path: 'tmp/foo',\n  unixfs: UnixFS // see https://github.com/ipfs/js-ipfs-unixfs\n}\n{\n  cid: CID, // see https://github.com/multiformats/js-cid\n  path: 'tmp',\n  unixfs: UnixFS // see https://github.com/ipfs/js-ipfs-unixfs\n}\n```\n\n## API\n\n```js\nimport { importer } from 'ipfs-unixfs-importer'\n```\n\n### const stream = importer(source, blockstore \\[, options])\n\nThe `importer` function returns an async iterator takes a source async iterator that yields objects of the form:\n\n```js\n{\n  path: 'a name',\n  content: (Buffer or iterator emitting Buffers),\n  mtime: (Number representing seconds since (positive) or before (negative) the Unix Epoch),\n  mode: (Number representing ugo-rwx, setuid, setguid and sticky bit)\n}\n```\n\n`stream` will output file info objects as files get stored in IPFS. When stats on a node are emitted they are guaranteed to have been written.\n\n`blockstore` is an instance of a [blockstore][]\n\nThe input's file paths and directory structure will be preserved in the [`dag-pb`](https://github.com/ipld/js-dag-pb) created nodes.\n\n`options` is an JavaScript option that might include the following keys:\n\n- `wrapWithDirectory` (boolean, defaults to false): if true, a wrapping node will be created\n- `shardSplitThreshold` (positive integer, defaults to 1000): the number of directory entries above which we decide to use a sharding directory builder (instead of the default flat one)\n- `chunker` (string, defaults to `\"fixed\"`): the chunking strategy. Supports:\n  - `fixed`\n  - `rabin`\n- `avgChunkSize` (positive integer, defaults to `262144`): the average chunk size (rabin chunker only)\n- `minChunkSize` (positive integer): the minimum chunk size (rabin chunker only)\n- `maxChunkSize` (positive integer, defaults to `262144`): the maximum chunk size\n- `strategy` (string, defaults to `\"balanced\"`): the DAG builder strategy name. Supports:\n  - `flat`: flat list of chunks\n  - `balanced`: builds a balanced tree\n  - `trickle`: builds [a trickle tree](https://github.com/ipfs/specs/pull/57#issuecomment-265205384)\n- `maxChildrenPerNode` (positive integer, defaults to `174`): the maximum children per node for the `balanced` and `trickle` DAG builder strategies\n- `layerRepeat` (positive integer, defaults to 4): (only applicable to the `trickle` DAG builder strategy). The maximum repetition of parent nodes for each layer of the tree.\n- `reduceSingleLeafToSelf` (boolean, defaults to `true`): optimization for, when reducing a set of nodes with one node, reduce it to that node.\n- `hamtHashFn` (async function(string) Buffer): a function that hashes file names to create HAMT shards\n- `hamtBucketBits` (positive integer, defaults to `8`): the number of bits at each bucket of the HAMT\n- `progress` (function): a function that will be called with the byte length of chunks as a file is added to ipfs.\n- `onlyHash` (boolean, defaults to false): Only chunk and hash - do not write to disk\n- `hashAlg` (string): multihash hashing algorithm to use\n- `cidVersion` (integer, default 0): the CID version to use when storing the data (storage keys are based on the CID, *including* it's version)\n- `rawLeaves` (boolean, defaults to false): When a file would span multiple DAGNodes, if this is true the leaf nodes will not be wrapped in `UnixFS` protobufs and will instead contain the raw file bytes\n- `leafType` (string, defaults to `'file'`) what type of UnixFS node leaves should be - can be `'file'` or `'raw'` (ignored when `rawLeaves` is `true`)\n- `blockWriteConcurrency` (positive integer, defaults to 10) How many blocks to hash and write to the block store concurrently. For small numbers of large files this should be high (e.g. 50).\n- `fileImportConcurrency` (number, defaults to 50) How many files to import concurrently. For large numbers of small files this should be high (e.g. 50).\n\n## Overriding internals\n\nSeveral aspects of the importer are overridable by specifying functions as part of the options object with these keys:\n\n- `chunkValidator` (function): Optional function that supports the signature `async function * (source, options)`\n  - This function takes input from the `content` field of imported entries. It should transform them into `Buffer`s, throwing an error if it cannot.\n  - It should yield `Buffer` objects constructed from the `source` or throw an `Error`\n- `chunker` (function): Optional function that supports the signature `async function * (source, options)` where `source` is an async generator and `options` is an options object\n  - It should yield `Buffer` objects.\n- `bufferImporter` (function): Optional function that supports the signature `async function * (entry, blockstore, options)`\n  - This function should read `Buffer`s from `source` and persist them using `blockstore.put` or similar\n  - `entry` is the `{ path, content }` entry, where `entry.content` is an async generator that yields Buffers\n  - It should yield functions that return a Promise that resolves to an object with the properties `{ cid, unixfs, size }` where `cid` is a [CID], `unixfs` is a [UnixFS] entry and `size` is a `Number` that represents the serialized size of the [IPLD] node that holds the buffer data.\n  - Values will be pulled from this generator in parallel - the amount of parallelisation is controlled by the `blockWriteConcurrency` option (default: 10)\n- `dagBuilder` (function): Optional function that supports the signature `async function * (source, blockstore, options)`\n  - This function should read `{ path, content }` entries from `source` and turn them into DAGs\n  - It should yield a `function` that returns a `Promise` that resolves to `{ cid, path, unixfs, node }` where `cid` is a `CID`, `path` is a string, `unixfs` is a UnixFS entry and `node` is a `DAGNode`.\n  - Values will be pulled from this generator in parallel - the amount of parallelisation is controlled by the `fileImportConcurrency` option (default: 50)\n- `treeBuilder` (function): Optional function that supports the signature `async function * (source, blockstore, options)`\n  - This function should read `{ cid, path, unixfs, node }` entries from `source` and place them in a directory structure\n  - It should yield an object with the properties `{ cid, path, unixfs, size }` where `cid` is a `CID`, `path` is a string, `unixfs` is a UnixFS entry and `size` is a `Number`.\n\n## API Docs\n\n- <https://ipfs.github.io/js-ipfs-unixfs/modules/ipfs_unixfs_importer.html>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-unixfs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n[blockstore]: https://github.com/ipfs/js-ipfs-interfaces/tree/master/packages/interface-blockstore#readme\n\n[UnixFS]: https://github.com/ipfs/specs/tree/master/unixfs\n\n[IPLD]: https://github.com/ipld/js-ipld\n\n[CID]: https://github.com/multiformats/js-cid\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ipfs-unixfs-importer/-/ipfs-unixfs-importer-12.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ipfs-unixfs-importer/-/ipfs-unixfs-importer-12.0.1.tgz",
    "hash": "",
    "integrity": "sha512-//VPZOqbONtc1HNtb+sBrw+nIGijHEloSm1O3LVR5orSlhHQ8X7+OCkeqceFBhu40tPMe/TwgAPrkvh+fXL+bA==",
    "registry": "npm",
    "packageName": "ipfs-unixfs-importer",
    "cacheIntegrity": "sha512-//VPZOqbONtc1HNtb+sBrw+nIGijHEloSm1O3LVR5orSlhHQ8X7+OCkeqceFBhu40tPMe/TwgAPrkvh+fXL+bA== sha1-MWpS2KeT6eAGse5D7cULg+AO8wY="
  },
  "registry": "npm",
  "hash": "fff54f64ea9b38db5cd4736d6feb01af0fa72068a31c49684a6d4edcb551e68ad29611d0f17efe38291ea9c785061bb8d2d3cc7bf4f08003eb92f87e7d72fe6c"
}