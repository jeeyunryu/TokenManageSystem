{
  "manifest": {
    "name": "sonic-boom",
    "version": "1.4.1",
    "description": "Extremely fast utf8 only stream implementation",
    "main": "index.js",
    "scripts": {
      "test-only": "tap test.js",
      "test": "standard && tap test.js",
      "prepare": "husky install"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mcollina/sonic-boom.git"
    },
    "keywords": [
      "stream",
      "fs",
      "net",
      "fd",
      "file",
      "descriptor",
      "fast"
    ],
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mcollina/sonic-boom/issues"
    },
    "homepage": "https://github.com/mcollina/sonic-boom#readme",
    "devDependencies": {
      "fastbench": "^1.0.1",
      "husky": "^6.0.0",
      "proxyquire": "^2.1.0",
      "standard": "^16.0.3",
      "tap": "^15.0.1"
    },
    "dependencies": {
      "atomic-sleep": "^1.0.0",
      "flatstr": "^1.0.12"
    },
    "husky": {
      "hooks": {
        "pre-commit": "npm test"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-sonic-boom-1.4.1-d35d6a74076624f12e6f917ade7b9d75e918f53e-integrity/node_modules/sonic-boom/package.json",
    "readmeFilename": "README.md",
    "readme": "# sonic-boom&nbsp;&nbsp;![Node.js CI](https://github.com/mcollina/sonic-boom/workflows/Node.js%20CI/badge.svg)\n\nExtremely fast utf8-only stream implementation to write to files and\nfile descriptors.\n\nThis implementation is partial, but support backpressure and `.pipe()` in is here.\nHowever, it is 2-3x faster than Node Core `fs.createWriteStream()`:\n\n```\nbenchSonic*1000: 1916.904ms\nbenchSonicSync*1000: 8605.265ms\nbenchSonic4k*1000: 1965.231ms\nbenchSonicSync4k*1000: 1588.224ms\nbenchCore*1000: 5851.959ms\nbenchConsole*1000: 7605.713ms\n```\n\nNote that sync mode without buffering is _slower_ than a Node Core WritableStream, however\nthis mode matches the expected behavior of `console.log()`.\n\nNote that if this is used to log to a windows terminal (`cmd.exe` or\npowershell), it is needed to run `chcp 65001` in the terminal to\ncorrectly display utf-8 characters, see\n[chcp](https://ss64.com/nt/chcp.html) for more details.\n\n## Install\n\n```\nnpm i sonic-boom\n```\n\n## Example\n\n```js\n'use strict'\n\nconst SonicBoom = require('sonic-boom')\nconst sonic = new SonicBoom({ fd: process.stdout.fd }) // or { dest: '/path/to/destination' }\n\nfor (let i = 0; i < 10; i++) {\n  sonic.write('hello sonic\\n')\n}\n```\n\n## API\n\n### SonicBoom(opts)\n\nCreates a new instance of SonicBoom.\n\nThe options are:\n\n* `fd`: a file descriptor, something that is returned by `fs.open` or\n   `fs.openSync`.\n* `dest`: a string that is a path to a file to be written to (mode `'a'`).\n* `minLength`: the minimum lenght of the internal buffer that is\n  required to be full before flushing.\n* `sync`: perform writes synchronously (similar to `console.log`).\n\nFor `sync:false`  a `SonicBoom` instance will emit the `'ready'` event when a file descriptor is available. \nFor `sync:true` this is not relevant because the `'ready'` event will be fired when the `SonicBoom` instance is created, before it can be subscribed to. \n   \n\n### SonicBoom#write(string)\n\nWrites the string to the file.\nIt will return false to signal the producer to slow down.\n\n### SonicBoom#flush()\n\nWrites the current buffer to the file if a write was not in progress.\nDo nothing if `minLength`Â is zero or if it is already writing.\n\n### SonicBoom#reopen([file])\n\nReopen the file in place, useful for log rotation.\n\nExample:\n\n```js\nconst stream = new SonicBoom('./my.log')\nprocess.on('SIGUSR2', function () {\n  stream.reopen()\n})\n```\n\n### SonicBoom#flushSync()\n\nFlushes the buffered data synchronously. This is a costly operation.\n\n### SonicBoom#end()\n\nCloses the stream, the data will be flushed down asynchronously\n\n### SonicBoom#destroy()\n\nCloses the stream immediately, the data is not flushed.\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Matteo Collina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sonic-boom/-/sonic-boom-1.4.1.tgz#d35d6a74076624f12e6f917ade7b9d75e918f53e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sonic-boom/-/sonic-boom-1.4.1.tgz",
    "hash": "d35d6a74076624f12e6f917ade7b9d75e918f53e",
    "integrity": "sha512-LRHh/A8tpW7ru89lrlkU4AszXt1dbwSjVWguGrmlxE7tawVmDBlI1PILMkXAxJTwqhgsEeTHzj36D5CmHgQmNg==",
    "registry": "npm",
    "packageName": "sonic-boom",
    "cacheIntegrity": "sha512-LRHh/A8tpW7ru89lrlkU4AszXt1dbwSjVWguGrmlxE7tawVmDBlI1PILMkXAxJTwqhgsEeTHzj36D5CmHgQmNg== sha1-011qdAdmJPEub5F63nuddekY9T4="
  },
  "registry": "npm",
  "hash": "d35d6a74076624f12e6f917ade7b9d75e918f53e"
}