{
  "manifest": {
    "name": "ipfs-repo",
    "version": "17.0.0",
    "description": "IPFS Repo implementation",
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipfs/js-ipfs-repo/tree/master/packages/ipfs-repo#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipfs-repo.git"
    },
    "bugs": {
      "url": "https://github.com/ipfs/js-ipfs-repo/issues"
    },
    "keywords": [
      "IPFS",
      "datastore",
      "libp2p"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./src/index.js"
      },
      "./constants": {
        "types": "./src/constants.d.ts",
        "import": "./src/constants.js"
      },
      "./errors": {
        "types": "./src/errors.d.ts",
        "import": "./src/errors.js"
      },
      "./locks/fs": {
        "types": "./src/locks/fs.d.ts",
        "browser": "./src/locks/memory.js",
        "import": "./src/locks/fs.js"
      },
      "./locks/memory": {
        "types": "./src/locks/memory.d.ts",
        "import": "./src/locks/memory.js"
      },
      "./pin-types": {
        "types": "./src/pin-types.d.ts",
        "import": "./src/pin-types.js"
      },
      "./utils/blockstore": {
        "types": "./src/utils/blockstore.d.ts",
        "import": "./src/utils/blockstore.js"
      },
      "./utils/level": {
        "types": "./src/utils/level.d.ts",
        "import": "./src/utils/level.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "build": "aegir build",
      "release": "aegir release",
      "test": "aegir test",
      "test:node": "aegir test -t node --cov",
      "dep-check": "aegir dep-check -i interface-blockstore"
    },
    "dependencies": {
      "@ipld/dag-pb": "^4.0.0",
      "bytes": "^3.1.0",
      "cborg": "^1.3.4",
      "datastore-core": "^8.0.1",
      "debug": "^4.1.0",
      "err-code": "^3.0.1",
      "interface-blockstore": "^4.0.0",
      "interface-datastore": "^7.0.0",
      "ipfs-repo-migrations": "^15.0.0",
      "it-drain": "^2.0.0",
      "it-filter": "^2.0.0",
      "it-first": "^2.0.0",
      "it-map": "^2.0.0",
      "it-merge": "^2.0.0",
      "it-parallel-batch": "^2.0.0",
      "it-pipe": "^2.0.4",
      "it-pushable": "^3.1.0",
      "just-safe-get": "^4.1.1",
      "just-safe-set": "^4.1.1",
      "merge-options": "^3.0.4",
      "mortice": "^3.0.0",
      "multiformats": "^11.0.0",
      "p-queue": "^7.3.0",
      "proper-lockfile": "^4.0.0",
      "quick-lru": "^6.1.1",
      "sort-keys": "^5.0.0",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "@ipld/dag-cbor": "^9.0.0",
      "@types/bytes": "^3.1.0",
      "@types/debug": "^4.1.5",
      "@types/proper-lockfile": "^4.1.1",
      "@types/rimraf": "^3.0.2",
      "aegir": "^37.9.1",
      "blockstore-core": "^3.0.0",
      "blockstore-datastore-adapter": "^5.0.0",
      "ipfs-utils": "^9.0.7",
      "it-all": "^2.0.0",
      "just-range": "^4.1.1",
      "rimraf": "^3.0.2",
      "sinon": "^15.0.1"
    },
    "browser": {
      "rimraf": false
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ipfs-repo-17.0.0-integrity/node_modules/ipfs-repo/package.json",
    "readmeFilename": "README.md",
    "readme": "# ipfs-repo <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-repo.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-repo)\n[![CI](https://img.shields.io/github/workflow/status/ipfs/js-ipfs-repo/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/ipfs/js-ipfs-repo/actions/workflows/js-test-and-release.yml)\n\n> IPFS Repo implementation\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Background](#background)\n- [Usage](#usage)\n- [API](#api)\n  - [Setup](#setup)\n    - [`createRepo(path[, options])`](#createrepopath-options)\n    - [`Promise repo.init()`](#promise-repoinit)\n    - [`Promise repo.open()`](#promise-repoopen)\n    - [`Promise repo.close()`](#promise-repoclose)\n    - [`Promise<boolean> repo.exists()`](#promiseboolean-repoexists)\n    - [`Promise<Boolean> repo.isInitialized()`](#promiseboolean-repoisinitialized)\n  - [Repos](#repos)\n    - [`Promise repo.put(key, value:Uint8Array)`](#promise-repoputkey-valueuint8array)\n    - [`Promise<Uint8Array> repo.get(key)`](#promiseuint8array-repogetkey)\n  - [Blocks](#blocks)\n    - [`Promise<Block> repo.blocks.put(block:Block)`](#promiseblock-repoblocksputblockblock)\n    - [`AsyncIterator<Block> repo.blocks.putMany(source:AsyncIterable<Block>)`](#asynciteratorblock-repoblocksputmanysourceasynciterableblock)\n    - [`Promise<Block> repo.blocks.get(cid:CID)`](#promiseblock-repoblocksgetcidcid)\n    - [`AsyncIterable<Block> repo.blocks.getMany(source:AsyncIterable<CID>)`](#asynciterableblock-repoblocksgetmanysourceasynciterablecid)\n    - [`Promise<boolean> repo.blocks.has (cid:CID)`](#promiseboolean-repoblockshas-cidcid)\n    - [`Promise<boolean> repo.blocks.delete (cid:CID)`](#promiseboolean-repoblocksdelete-cidcid)\n    - [`AsyncIterator<Block|CID> repo.blocks.query (query)`](#asynciteratorblockcid-repoblocksquery-query)\n    - [`Promise<CID> repo.blocks.delete(cid:CID)`](#promisecid-repoblocksdeletecidcid)\n    - [`AsyncIterator<CID> repo.blocks.deleteMany(source:AsyncIterable<CID>)`](#asynciteratorcid-repoblocksdeletemanysourceasynciterablecid)\n  - [Datastore](#datastore)\n    - [`repo.datastore`](#repodatastore)\n  - [Config](#config)\n    - [`Promise repo.config.set(key:String, value:Object)`](#promise-repoconfigsetkeystring-valueobject)\n    - [`Promise repo.config.replace(value:Object)`](#promise-repoconfigreplacevalueobject)\n    - [`Promise<?> repo.config.get(key:String)`](#promise-repoconfiggetkeystring)\n    - [`Promise<Object> repo.config.getAll()`](#promiseobject-repoconfiggetall)\n    - [`Promise<boolean> repo.config.exists()`](#promiseboolean-repoconfigexists)\n  - [Version](#version)\n    - [`Promise<Number> repo.version.get()`](#promisenumber-repoversionget)\n    - [`Promise repo.version.set (version:Number)`](#promise-repoversionset-versionnumber)\n  - [API Addr](#api-addr)\n    - [`Promise<String> repo.apiAddr.get()`](#promisestring-repoapiaddrget)\n    - [`Promise repo.apiAddr.set(value)`](#promise-repoapiaddrsetvalue)\n  - [Status](#status)\n    - [`Promise<Object> repo.stat()`](#promiseobject-repostat)\n  - [Lock](#lock)\n    - [`Promise lock.lock(dir)`](#promise-locklockdir)\n    - [`Promise closer.close()`](#promise-closerclose)\n    - [`Promise<boolean> lock.locked(dir)`](#promiseboolean-locklockeddir)\n- [Notes](#notes)\n  - [Migrations](#migrations)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipfs-repo\n```\n\nThis is the implementation of the [IPFS repo spec](https://github.com/ipfs/specs/blob/master/REPO.md) in JavaScript.\n\n## Background\n\nHere is the architectural reasoning for this repo:\n\n```bash\n                          ┌────────────────────────────────────────┐\n                          │                IPFSRepo                │\n                          └────────────────────────────────────────┘\n                                      ┌─────────────────┐\n                                      │        /        │\n                                      ├─────────────────┤\n                                      │    Datastore    │\n                                      └─────────────────┘\n                                   ┌───────────┴───────────┐\n                          ┌─────────────────┐     ┌─────────────────┐\n                          │     /blocks     │     │   /datastore    │\n                          ├─────────────────┤     ├─────────────────┤\n                          │    Datastore    │     │ LevelDatastore  │\n                          └─────────────────┘     └─────────────────┘\n\n┌────────────────────────────────────────┐          ┌────────────────────────────────────────┐\n│       IPFSRepo - Default Node.js       │          │       IPFSRepo - Default Browser       │\n└────────────────────────────────────────┘          └────────────────────────────────────────┘\n            ┌─────────────────┐                                 ┌─────────────────┐\n            │        /        │                                 │        /        │\n            ├─────────────────┤                                 ├─────────────────┤\n            │   FsDatastore   │                                 │  IdbDatastore   │\n            └─────────────────┘                                 └─────────────────┘\n         ┌───────────┴───────────┐                           ┌───────────┴───────────┐\n┌─────────────────┐     ┌─────────────────┐         ┌─────────────────┐     ┌─────────────────┐\n│     /blocks     │     │   /datastore    │         │     /blocks     │     │   /datastore    │\n├─────────────────┤     ├─────────────────┤         ├─────────────────┤     ├─────────────────┤\n│ FlatfsDatastore │     │LevelDBDatastore │         │  IdbDatastore   │     │  IdbDatastore   │\n└─────────────────┘     └─────────────────┘         └─────────────────┘     └─────────────────┘\n```\n\nThis provides a well defined interface for creating and interacting with an IPFS repo.\n\n```sh\n> npm install ipfs-repo\n```\n\n```js\nimport { createRepo } from 'ipfs-repo'\n```\n\n## Usage\n\nExample:\n\n```js\nimport { createRepo } from 'ipfs-repo'\n\nconst repo = createRepo('/tmp/ipfs-repo')\n\nawait repo.init({ cool: 'config' })\nawait repo.open()\nconsole.log('repo is ready')\n```\n\nThis now has created the following structure, either on disk or as an in memory representation:\n\n    ├── blocks\n    │   ├── SHARDING\n    │   └── _README\n    ├── config\n    ├── datastore\n    ├── keys\n    └── version\n\n## API\n\n### Setup\n\n#### `createRepo(path[, options])`\n\nCreates an IPFS Repo.\n\nArguments:\n\n- `path` (string, mandatory): the path for this repo\n- `options` (object, optional): may contain the following values\n  - `autoMigrate` (bool, defaults to `true`): controls automatic migrations of repository.\n  - `onMigrationProgress` (function(version, percentComplete, message)): callback function to be notified of migration progress\n  - `lock` ([Lock](#lock) or string *Deprecated*): what type of lock to use. Lock has to be acquired when opening. string can be `\"fs\"` or `\"memory\"`.\n  - `storageBackends` (object, optional): may contain the following values, which should each be a class implementing the [datastore interface](https://github.com/ipfs/interface-datastore#readme):\n    - `root` (defaults to [`datastore-fs`](https://github.com/ipfs/js-datastore-fs#readme) in Node.js and [`datastore-level`](https://github.com/ipfs/js-datastore-level#readme) in the browser). Defines the back-end type used for gets and puts of values at the root (`repo.set()`, `repo.get()`)\n    - `blocks` (defaults to [`datastore-fs`](https://github.com/ipfs/js-datastore-fs#readme) in Node.js and [`datastore-level`](https://github.com/ipfs/js-datastore-level#readme) in the browser). Defines the back-end type used for gets and puts of values at `repo.blocks`.\n    - `keys` (defaults to [`datastore-fs`](https://github.com/ipfs/js-datastore-fs#readme) in Node.js and [`datastore-level`](https://github.com/ipfs/js-datastore-level#readme) in the browser). Defines the back-end type used for gets and puts of encrypted keys at `repo.keys`\n    - `datastore` (defaults to [`datastore-level`](https://github.com/ipfs/js-datastore-level#readme)). Defines the back-end type used as the key-value store used for gets and puts of values at `repo.datastore`.\n\n```js\nconst repo = createRepo('path/to/repo')\n```\n\n#### `Promise repo.init()`\n\nCreates the necessary folder structure inside the repo\n\n#### `Promise repo.open()`\n\n[Locks](https://en.wikipedia.org/wiki/Record_locking) the repo to prevent conflicts arising from simultaneous access\n\n#### `Promise repo.close()`\n\nUnlocks the repo.\n\n#### `Promise<boolean> repo.exists()`\n\nTells whether this repo exists or not. Returned promise resolves to a `boolean`\n\n#### `Promise<Boolean> repo.isInitialized()`\n\nThe returned promise resolves to `false` if the repo has not been initialized and `true` if it has\n\n### Repos\n\nRoot repo:\n\n#### `Promise repo.put(key, value:Uint8Array)`\n\nPut a value at the root of the repo\n\n- `key` can be a Uint8Array, a string or a [Key][]\n\n#### `Promise<Uint8Array> repo.get(key)`\n\nGet a value at the root of the repo\n\n- `key` can be a Uint8Array, a string or a [Key][]\n\n### Blocks\n\n#### `Promise<Block> repo.blocks.put(block:Block)`\n\n- `block` should be of type [Block][]\n\n#### `AsyncIterator<Block> repo.blocks.putMany(source:AsyncIterable<Block>)`\n\nPut many blocks.\n\n- `source` should be an AsyncIterable that yields entries of type [Block][]\n\n#### `Promise<Block> repo.blocks.get(cid:CID)`\n\nGet block.\n\n- `cid` is the content id of type [CID][]\n\n#### `AsyncIterable<Block> repo.blocks.getMany(source:AsyncIterable<CID>)`\n\nGet many blocks\n\n- `source` should be an AsyncIterable that yields entries of type [CID][]\n\n#### `Promise<boolean> repo.blocks.has (cid:CID)`\n\nIndicate if a block is present for the passed CID\n\n- `cid` should be of the type [CID][]\n\n#### `Promise<boolean> repo.blocks.delete (cid:CID)`\n\nDeletes a block\n\n- `cid` should be of the type [CID][]\n\n#### `AsyncIterator<Block|CID> repo.blocks.query (query)`\n\nQuery what blocks are available in blockstore.\n\nIf `query.keysOnly` is true, the returned iterator will yield [CID][]s, otherwise it will yield [Block][]s\n\n- `query` is a object as specified in [interface-datastore](https://github.com/ipfs/interface-datastore#query).\n\nDatastore:\n\n#### `Promise<CID> repo.blocks.delete(cid:CID)`\n\n- `cid` should be of the type [CID][]\n\nDelete a block\n\n#### `AsyncIterator<CID> repo.blocks.deleteMany(source:AsyncIterable<CID>)`\n\n- `source` should be an Iterable or AsyncIterable that yields entries of the type [CID][]\n\nDelete many blocks\n\n### Datastore\n\n#### `repo.datastore`\n\nThis contains a full implementation of [the `interface-datastore` API](https://github.com/ipfs/interface-datastore#api).\n\n### Config\n\nInstead of using `repo.set('config')` this exposes an API that allows you to set and get a decoded config object, as well as, in a safe manner, change any of the config values individually.\n\n#### `Promise repo.config.set(key:String, value:Object)`\n\nSet a config value. `value` can be any object that is serializable to JSON.\n\n- `key` is a string specifying the object path. Example:\n\n```js\nawait repo.config.set('a.b.c', 'c value')\nconst config = await repo.config.get()\nassert.equal(config.a.b.c, 'c value')\n```\n\n#### `Promise repo.config.replace(value:Object)`\n\nSet the whole config value. `value` can be any object that is serializable to JSON.\n\n#### `Promise<?> repo.config.get(key:String)`\n\nGet a config value. Returned promise resolves to the same type that was set before.\n\n- `key` is a string specifying the object path. Example:\n\n```js\nconst value = await repo.config.get('a.b.c')\nconsole.log('config.a.b.c = ', value)\n```\n\n#### `Promise<Object> repo.config.getAll()`\n\nGet the entire config value.\n\n#### `Promise<boolean> repo.config.exists()`\n\nWhether the config sub-repo exists.\n\n### Version\n\n#### `Promise<Number> repo.version.get()`\n\nGets the repo version (an integer).\n\n#### `Promise repo.version.set (version:Number)`\n\nSets the repo version\n\n### API Addr\n\n#### `Promise<String> repo.apiAddr.get()`\n\nGets the API address.\n\n#### `Promise repo.apiAddr.set(value)`\n\nSets the API address.\n\n- `value` should be a [Multiaddr][] or a String representing a valid one.\n\n### Status\n\n#### `Promise<Object> repo.stat()`\n\nGets the repo status.\n\nReturned promise resolves to an `Object` with the following keys:\n\n- `numObjects`\n- `repoPath`\n- `repoSize`\n- `version`\n- `storageMax`\n\n### Lock\n\nIPFS Repo comes with two built in locks: memory and fs. These can be imported via the following:\n\n```js\nimport { FSLock } from 'ipfs-repo/locks/fs'  // Default in Node.js\nimport { MemoryLock } from 'ipfs-repo/locks/memory'  // Default in browser\n```\n\nYou can also provide your own custom Lock. It must be an object with the following interface:\n\n#### `Promise lock.lock(dir)`\n\nSets the lock if one does not already exist. If a lock already exists, should throw an error.\n\n`dir` is a string to the directory the lock should be created at. The repo typically creates the lock at its root.\n\nReturns `closer`, where `closer` has a `close` method for removing the lock.\n\n#### `Promise closer.close()`\n\nCloses the lock created by `lock.open`\n\nIf no error was thrown, the lock was successfully removed.\n\n#### `Promise<boolean> lock.locked(dir)`\n\nChecks the existence of the lock.\n\n`dir` is the path to the directory to check for the lock. The repo typically checks for the lock at its root.\n\nReturned promise resolves to a `boolean` indicating the existence of the lock.\n\n## Notes\n\n- [Explanation of how repo is structured](https://github.com/ipfs/js-ipfs-repo/pull/111#issuecomment-279948247)\n\n### Migrations\n\nWhen there is a new repo migration and the version of the repo is increased, don't\nforget to propagate the changes into the test repo (`test/test-repo`).\n\n**For tools that run mainly in the browser environment, be aware that disabling automatic\nmigrations leaves the user with no way to run the migrations because there is no CLI in the browser. In such\na case, you should provide a way to trigger migrations manually.**\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-repo/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n[CID]: https://github.com/multiformats/js-cid\n\n[Key]: https://github.com/ipfs/interface-datastore#keys\n\n[Block]: https://github.com/ipld/js-ipld-block\n\n[Multiaddr]: https://github.com/multiformats/js-multiaddr\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ipfs-repo/-/ipfs-repo-17.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ipfs-repo/-/ipfs-repo-17.0.0.tgz",
    "hash": "",
    "integrity": "sha512-y+cEO+tRm7LxSMBKSH9e1eiZWloLuzVOE7HH3odsWe6EgZ7URa1FSiBfVmqx7sTtjjz1vwvBNmVGwIVVaN5tWw==",
    "registry": "npm",
    "packageName": "ipfs-repo",
    "cacheIntegrity": "sha512-y+cEO+tRm7LxSMBKSH9e1eiZWloLuzVOE7HH3odsWe6EgZ7URa1FSiBfVmqx7sTtjjz1vwvBNmVGwIVVaN5tWw== sha1-DLChfHPwEJsvBEL/XW911BtGAaQ="
  },
  "registry": "npm",
  "hash": "cbe7043beb519bb2f148c04a487f5ed5e8995a5a0bbb354e13b1c7de876c59ee84819ed445ad454a205f566ab1eec4ed8e3cf5bf0bc1366546c0855568de6d5b"
}