{
  "manifest": {
    "name": "it-ws",
    "version": "5.0.6",
    "description": "Simple async iterables for websocket client connections",
    "author": {
      "name": "Alan Shaw"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/alanshaw/it-ws#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alanshaw/it-ws.git"
    },
    "bugs": {
      "url": "https://github.com/alanshaw/it-ws/issues"
    },
    "keywords": [
      "async",
      "iterable",
      "iterator",
      "websocket",
      "ws"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      },
      "./client": {
        "types": "./dist/src/client.d.ts",
        "import": "./dist/src/client.js"
      },
      "./duplex": {
        "types": "./dist/src/duplex.d.ts",
        "import": "./dist/src/duplex.js"
      },
      "./server": {
        "types": "./dist/src/server.d.ts",
        "browser": "./dist/src/server.browser.js",
        "import": "./dist/src/server.js"
      },
      "./sink": {
        "types": "./dist/src/sink.d.ts",
        "import": "./dist/src/sink.js"
      },
      "./source": {
        "types": "./dist/src/source.d.ts",
        "import": "./dist/src/source.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "lint": "aegir lint",
      "dep-check": "aegir dep-check",
      "build": "aegir build",
      "test": "aegir test",
      "test:chrome": "aegir test -t browser --cov",
      "test:chrome-webworker": "aegir test -t webworker",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:firefox-webworker": "aegir test -t webworker -- --browser firefox",
      "test:node": "aegir test -t node --cov",
      "test:electron-main": "aegir test -t electron-main",
      "release": "aegir release"
    },
    "dependencies": {
      "event-iterator": "^2.0.0",
      "iso-url": "^1.1.2",
      "it-stream-types": "^1.0.2",
      "uint8arrays": "^4.0.2",
      "ws": "^8.4.0"
    },
    "devDependencies": {
      "@types/ws": "^8.2.2",
      "aegir": "^37.0.15",
      "delay": "^5.0.0",
      "it-all": "^2.0.0",
      "it-drain": "^2.0.0",
      "it-foreach": "^1.0.0",
      "it-goodbye": "^4.0.0",
      "it-map": "^2.0.0",
      "it-ndjson": "^1.0.0",
      "it-pipe": "^2.0.3",
      "p-defer": "^4.0.0",
      "wherearewe": "^2.0.1",
      "wsurl": "^1.0.0"
    },
    "browser": {
      "./dist/src/web-socket.js": "./dist/src/web-socket.browser.js",
      "./server": false,
      "ws": false,
      "http": false,
      "https": false
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-it-ws-5.0.6-9b69ff2ef9d08fda18ef2db604acf972d0fedded-integrity/node_modules/it-ws/package.json",
    "readmeFilename": "README.md",
    "readme": "# it-ws <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/alanshaw/it-ws.svg?style=flat-square)](https://codecov.io/gh/alanshaw/it-ws)\n[![CI](https://img.shields.io/github/workflow/status/alanshaw/it-ws/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/alanshaw/it-ws/actions/workflows/js-test-and-release.yml)\n\n> Simple async iterables for websocket client connections\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Example - client](#example---client)\n  - [Example - server](#example---server)\n- [API](#api)\n  - [`import { connect } from 'it-ws/client'`](#import--connect--from-it-wsclient)\n  - [`import { createServer } from 'it-ws/server'`](#import--createserver--from-it-wsserver)\n    - [Example](#example)\n- [use with an http server](#use-with-an-http-server)\n  - [core, websocket wrapping functions](#core-websocket-wrapping-functions)\n  - [`import duplex from 'it-ws/duplex'`](#import-duplex-from-it-wsduplex)\n  - [`import sink from 'it-ws/sink'`](#import-sink-from-it-wssink)\n  - [`import source from 'it-ws/source'`](#import-source-from-it-wssource)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i it-ws\n```\n\n## Usage\n\n### Example - client\n\n```js\nimport { connect } from 'it-ws/client'\nimport { pipe } from 'it-pipe'\n\nconst stream = connect(WS_URL)\n\nawait stream.connected() // Wait for websocket to be connected (optional)\n\npipe(source, stream, sink)\n```\n\n### Example - server\n\n```js\nimport { createServer } from 'it-ws/server'\nimport { pipe } from 'it-pipe'\n\nconst server = createServer(stream => {\n  //pipe the stream somewhere.\n  //eg, echo server\n  pipe(stream, stream)\n})\n\nawait server.listen(PORT)\n```\n\n## API\n\n### `import { connect } from 'it-ws/client'`\n\n`connect(url, { binary: boolean })`\n\nCreate a websocket client connection. Set `binary: true` to get a stream of arrayBuffers (on the browser). Defaults to true on node, but to strings on the browser. This may cause a problems if your application assumes binary.\n\nFor adding options to the WebSocket instance, as [websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options), you can provide an object with the `websocket` property into the connect options.\n\n```js\nconst stream = connect(url)\n// stream is duplex and is both a `source` and `sink`.\n// See this for more information:\n// https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#duplex-it\n```\n\n### `import { createServer } from 'it-ws/server'`\n\nCreate async iterable websocket servers.\n\n`createServer(options?, onConnection)`\n\n`options` takes the same server options as [ws module](https://github.com/websockets/ws/blob/master/doc/ws.md#new-wsserveroptions-callback)\n\n`onConnection(stream)` is called every time a connection is received.\n\n#### Example\n\nOne duplex service you may want to use this with is [muxrpc](https://github.com/dominictarr/muxrpc)\n\n```js\nimport { createServer } from 'it-ws/server'\nimport { connect } from 'it-ws/client'\nimport { pipe } from 'it-pipe'\n\ncreateServer({\n  onConnection: (stream) => {\n    // pipe duplex style to your service\n    pipe(stream, service.createStream(), stream)\n  }\n})\n.listen(9999)\n\nconst stream = client.createStream()\n\nawait pipe(\n  stream,\n  connect('ws://localhost:9999'),\n  stream\n)\n```\n\nif the connection fails, the stream will throw\n\n```js\ntry {\n  await pipe(\n    stream,\n    connect('ws://localhost:9999'),\n    stream\n  )\n} catch (err) {\n  // handle err\n}\n```\n\nTo run the server over TLS:\n\n```js\ncreateServer({\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\n  // other options\n})\n.listen(9999)\n```\n\nTo add client-authentication to the server, you can set `verifyClient`.\n[Documentation here](https://github.com/websockets/ws/blob/master/doc/ws.md#optionsverifyclient).\n\n```js\nfunction verifyClient (info) {\n  return info.secure == true\n}\ncreateServer({\n  verifyClient: verifyClient\n  // other options\n})\n```\n\n## use with an http server\n\nif you have an http server that you also need to serve stuff\nover, and want to use a single port, use the `server` option.\n\n```js\nimport http from 'http'\n\nconst server = http.createServer(function(req, res){...}).listen(....)\n\ncreateServer({\n  server: server\n  // other options\n})\n```\n\n### core, websocket wrapping functions\n\nthese modules are used internally, to wrap a websocket.\nyou probably won't need to touch these,\nbut they are documented anyway.\n\n### `import duplex from 'it-ws/duplex'`\n\nturn a websocket into a duplex stream.\nIf provided, `opts` is passed to `sink(socket, opts)`.\n\nWebSockets do not support half open mode.\n[see allowHalfOpen option in net module](http://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener)\n\nIf you have a protocol that assumes halfOpen connections, but are using\na networking protocol like websockets that does not support it, I suggest\nusing [it-goodbye](https://github.com/alanshaw/it-goodbye) with your\nprotocol.\n\nThe duplex stream will also contain a copy of the properties from\nthe http request that became the websocket. they are `method`, `url`,\n`headers` and `upgrade`.\n\nalso exposed at: `import { duplex } from 'it-ws'`\n\n### `import sink from 'it-ws/sink'`\n\nCreate a `Sink` that will write data to the `socket`.\n`opts` may be `{closeOnEnd: true, onClose: onClose}`.\n`onClose` will be called when the sink ends. If `closeOnEnd=false`\nthe stream will not close, it will just stop emitting data.\n(by default `closeOnEnd` is true)\n\nIf `opts` is a function, then `onClose = opts; opts.closeOnEnd = true`.\n\n```js\nimport sink from 'it-ws/sink'\nimport { pipe } from 'it-pipe'\nimport each from 'it-foreach'\nimport delay from 'delay'\n\n// connect to the echo endpoint for test/server.js\nvar socket = new WebSocket('wss://echo.websocket.org')\n\n// write values to the socket\npipe(\n  async function * () {\n    while (true) {\n      yield 'hello @ ' + Date.now()\n    }\n  }(),\n  // throttle so it doesn't go nuts\n  (source) => each(source, () => delay(100))\n  sink(socket)\n);\n\nsocket.addEventListener('message', function(evt) {\n  console.log('received: ' + evt.data);\n});\n```\n\nalso exposed at `import { sink } from 'it-ws'`\n\n### `import source from 'it-ws/source'`\n\nCreate a `Source` that will read data from the `socket`.\n\n```js\nimport { pipe } from 'it-pipe'\nimport source from 'it-ws/source'\nimport { toString } from 'uint8arrays/to-string'\n\npipe(\n  // connect to the test/server.js endpoint\n  source(new WebSocket('ws://localhost:3000/read')),\n  async (source) => {\n    for await (const buf of source) {\n      console.info(toString(buf))\n    }\n  }\n);\n\n```\n\nalso exposed at `import { source } from 'it-ws'`\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/it-ws/-/it-ws-5.0.6.tgz#9b69ff2ef9d08fda18ef2db604acf972d0fedded",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/it-ws/-/it-ws-5.0.6.tgz",
    "hash": "9b69ff2ef9d08fda18ef2db604acf972d0fedded",
    "integrity": "sha512-TEEJQaGtkxgP/nGVq8dq48nPT85Afu8kwwvtDFLj4rQLWRhZcb26RWdXLdn9qhXkWPiWbK5H7JWBW1Bebj/SuQ==",
    "registry": "npm",
    "packageName": "it-ws",
    "cacheIntegrity": "sha512-TEEJQaGtkxgP/nGVq8dq48nPT85Afu8kwwvtDFLj4rQLWRhZcb26RWdXLdn9qhXkWPiWbK5H7JWBW1Bebj/SuQ== sha1-m2n/LvnQj9oY7y22BKz5ctD+3e0="
  },
  "registry": "npm",
  "hash": "9b69ff2ef9d08fda18ef2db604acf972d0fedded"
}