{
  "manifest": {
    "name": "hat",
    "version": "0.0.3",
    "description": "generate random IDs and avoid collisions",
    "main": "index.js",
    "devDependencies": {
      "expresso": "0.7.x"
    },
    "scripts": {
      "test": "expresso"
    },
    "repository": {
      "type": "git",
      "url": "http://github.com/substack/node-hat.git"
    },
    "keywords": [
      "id",
      "uid",
      "uuid",
      "random",
      "hat",
      "rack",
      "unique"
    ],
    "author": {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "http://substack.net"
    },
    "license": "MIT",
    "engine": {
      "node": ">=0.4"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-hat-0.0.3-bb014a9e64b3788aed8005917413d4ff3d502d8a-integrity/node_modules/hat/package.json",
    "readmeFilename": "README.markdown",
    "readme": "hat\n===\n\nGenerate random IDs and avoid collisions.\n\n![hat](http://substack.net/images/hat.png)\n\nexamples\n========\n\nhat\n---\n\n````javascript\nvar hat = require('hat');\n\nvar id = hat();\nconsole.log(id);\n````\n\noutput:\n\n````\n0c82a54f22f775a3ed8b97b2dea74036\n````\n\nrack\n----\n\n````javascript\nvar hat = require('hat');\nvar rack = hat.rack();\n\nconsole.log(rack());\nconsole.log(rack());\n````\n\noutput:\n\n````\n1c24171393dc5de04ffcb21f1182ab28\nfabe2323acc1b559dee43d4a1e16cbeb\n````\n\nmethods\n=======\n\nvar hat = require('hat');\n\nhat(bits=128, base=16)\n----------------------\n\nGenerate a random ID string with `bits` of data in a `base`.\n\nLeading zeros are appended such that all outputs for a given number of bits have\nequal length.\n\nvar rack = hat.rack(bits=128, base=16, expandBy)\n------------------------------------------------\n\nMake a new hat rack. Call `rack()` repeatedly to generate new IDs which are\nchecked for collisions.\n\nIf `expandBy` is specified, increment `bits` by this amount if too many\ncollisions occur. If `expandBy` isn't specified, `rack()` will throw if too many\ncollisions occur during generation.\n\nOptionally call `var id = rack(data)` to store `data` at the new ID.\n\nYou can get the data out again with `rack.get(id)` and set the data with\n`rack.set(id, value)`.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hat/-/hat-0.0.3.tgz#bb014a9e64b3788aed8005917413d4ff3d502d8a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hat/-/hat-0.0.3.tgz",
    "hash": "bb014a9e64b3788aed8005917413d4ff3d502d8a",
    "integrity": "sha512-zpImx2GoKXy42fVDSEad2BPKuSQdLcqsCYa48K3zHSzM/ugWuYjLDr8IXxpVuL7uCLHw56eaiLxCRthhOzf5ug==",
    "registry": "npm",
    "packageName": "hat",
    "cacheIntegrity": "sha512-zpImx2GoKXy42fVDSEad2BPKuSQdLcqsCYa48K3zHSzM/ugWuYjLDr8IXxpVuL7uCLHw56eaiLxCRthhOzf5ug== sha1-uwFKnmSzeIrtgAWRdBPU/z1QLYo="
  },
  "registry": "npm",
  "hash": "bb014a9e64b3788aed8005917413d4ff3d502d8a"
}