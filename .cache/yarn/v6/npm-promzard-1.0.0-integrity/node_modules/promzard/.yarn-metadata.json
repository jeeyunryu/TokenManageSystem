{
  "manifest": {
    "author": {
      "name": "GitHub Inc."
    },
    "name": "promzard",
    "description": "prompting wizardly",
    "version": "1.0.0",
    "repository": {
      "url": "https://github.com/npm/promzard.git",
      "type": "git"
    },
    "dependencies": {
      "read": "^2.0.0"
    },
    "devDependencies": {
      "@npmcli/eslint-config": "^4.0.0",
      "@npmcli/template-oss": "4.11.0",
      "tap": "^16.3.0"
    },
    "main": "lib/index.js",
    "scripts": {
      "test": "tap",
      "lint": "eslint \"**/*.js\"",
      "postlint": "template-oss-check",
      "template-oss-apply": "template-oss-apply --force",
      "lintfix": "npm run lint -- --fix",
      "snap": "tap",
      "posttest": "npm run lint"
    },
    "license": "ISC",
    "files": [
      "bin/",
      "lib/"
    ],
    "engines": {
      "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.11.0"
    },
    "tap": {
      "jobs": 1,
      "test-ignore": "fixtures/",
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-promzard-1.0.0-integrity/node_modules/promzard/package.json",
    "readmeFilename": "README.md",
    "readme": "# promzard\n\nA prompting wizard for building files from specialized PromZard modules.\nUsed by `npm init`.\n\nA reimplementation of @SubStack's\n[prompter](https://github.com/substack/node-prompter), which does not\nuse AST traversal.\n\nFrom another point of view, it's a reimplementation of\n[@Marak](https://github.com/marak)'s\n[wizard](https://github.com/Marak/wizard) which doesn't use schemas.\n\nThe goal is a nice drop-in enhancement for `npm init`.\n\n## Usage\n\n```javascript\nconst promzard = require('promzard')\nconst data = await promzard(inputFile, optionalContextAdditions, options)\n```\n\nIn the `inputFile` you can have something like this:\n\n```javascript\nconst fs = require('fs/promises')\nmodule.exports = {\n  \"greeting\": prompt(\"Who shall you greet?\", \"world\", (who) => `Hello, ${who}`),\n  \"filename\": __filename,\n  \"directory\": async () => {\n    const entries = await fs.readdir(__dirname)\n    return entries.map(e => `entry: ${e}`)\n  }\n}\n```\n\nWhen run, promzard will display the prompts and resolve the async\nfunctions in order, and then either give you an error, or the resolved\ndata, ready to be dropped into a JSON file or some other place.\n\n\n### promzard(inputFile, ctx, options)\n\nThe inputFile is just a node module.  You can require() things, set\nmodule.exports, etc.  Whatever that module exports is the result, and it\nis walked over to call any functions as described below.\n\nThe only caveat is that you must give PromZard the full absolute path\nto the module (you can get this via Node's `require.resolve`.)  Also,\nthe `prompt` function is injected into the context object, so watch out.\n\nWhatever you put in that `ctx` will of course also be available in the\nmodule.  You can get quite fancy with this, passing in existing configs\nand so on.\n\n#### options.backupFile\n\nUse the `backupFile` option as a fallback when `inputFile` fails to be read.\n\n### Class: promzard.PromZard(file, ctx, options).load()\n\nJust like the `promzard` function, but the class that makes it\nall happen.  The `load` method returns a promise which will resolve\nto the resolved data or throw with an error.\n\n### prompt(...)\n\nIn the promzard input module, you can call the `prompt` function.\nThis prompts the user to input some data.  The arguments are interpreted\nbased on type:\n\n1. `string`  The first string encountered is the prompt.  The second is\n   the default value.\n2. `function` A transformer function which receives the data and returns\n   something else.  More than meets the eye.\n3. `object` The `prompt` member is the prompt, the `default` member is\n   the default value, and the `transform` is the transformer.\n\nWhatever the final value is, that's what will be put on the resulting\nobject.\n\n### Functions\n\nIf there are any functions on the promzard input module's exports, then\npromzard will await each of them.  This way, your module\ncan do asynchronous actions if necessary to validate or ascertain\nwhatever needs verification.\n\nThe functions are called in the context of the ctx object.\n\nIn the async function, you can also call prompt() and return the result\nof the prompt.\n\nFor example, this works fine in a promzard module:\n\n```js\nexports.asyncPrompt = async function () {\n  const st = await fs.stat(someFile)\n  // if there's an error, no prompt, just error\n  // otherwise prompt and use the actual file size as the default\n  return prompt('file size', st.size)\n}\n```\n\nYou can also return other async functions in the async function\ncallback.  Though that's a bit silly, it could be a handy way to reuse\nfunctionality in some cases.\n\n### Sync vs Async\n\nThe `prompt()` function is not synchronous, though it appears that way.\nIt just returns a token that is swapped out when the data object is\nwalked over asynchronously later, and returns a token.\n\nFor that reason, prompt() calls whose results don't end up on the data\nobject are never shown to the user.  For example, this will only prompt\nonce:\n\n```\nexports.promptThreeTimes = prompt('prompt me once', 'shame on you')\nexports.promptThreeTimes = prompt('prompt me twice', 'um....')\nexports.promptThreeTimes = prompt('you cant prompt me again')\n```\n\n### Isn't this exactly the sort of 'looks sync' that you said was bad about other libraries?\n\nYeah, sorta.  I wouldn't use promzard for anything more complicated than\na wizard that spits out prompts to set up a config file or something.\nMaybe there are other use cases I haven't considered.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/promzard/-/promzard-1.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/promzard/-/promzard-1.0.0.tgz",
    "hash": "",
    "integrity": "sha512-KQVDEubSUHGSt5xLakaToDFrSoZhStB8dXLzk2xvwR67gJktrHFvpR63oZgHyK19WKbHFLXJqCPXdVR3aBP8Ig==",
    "registry": "npm",
    "packageName": "promzard",
    "cacheIntegrity": "sha512-KQVDEubSUHGSt5xLakaToDFrSoZhStB8dXLzk2xvwR67gJktrHFvpR63oZgHyK19WKbHFLXJqCPXdVR3aBP8Ig== sha1-Mkb45smJWnfAVJzvtlgorA9sAGs="
  },
  "registry": "npm",
  "hash": "29054312e6d2507192b79c4b6a4693a0316b4a86614ad07c7572f3936c6fc11ebb80992dac716fa51eb7a19807c8ad7d58a6c714b5c9a823d77554776813fc22"
}