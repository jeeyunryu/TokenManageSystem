{
  "manifest": {
    "name": "globalize",
    "version": "0.1.1",
    "description": "New age globalization and localization. Formats and parses strings, dates and numbers in over 350 cultures.",
    "keywords": [
      "utility",
      "globalization",
      "internationalization",
      "multilingualization",
      "localization",
      "g11n",
      "i18n",
      "m17n",
      "L10n",
      "localize",
      "format",
      "parse",
      "translate",
      "strings",
      "numbers",
      "dates",
      "times",
      "calendars",
      "cultures",
      "languages",
      "locales"
    ],
    "homepage": "https://github.com/jquery/globalize",
    "author": {
      "name": "The jQuery Project"
    },
    "contributors": [
      {
        "name": "Dave Reed",
        "email": "dareed@microsoft.com",
        "url": "http://weblogs.asp.net/infinitiesloop"
      },
      {
        "name": "Richard D. Worth",
        "email": "rdworth@gmail.com",
        "url": "http://rdworth.org"
      },
      {
        "name": "JÃ¶rn Zaefferer",
        "email": "joern.zaefferer@gmail.com",
        "url": "http://bassistance.de"
      },
      {
        "name": "Legal-Box",
        "email": "legalbox@eric.brechemier.name",
        "url": "http://www.legal-box.com"
      },
      {
        "name": "Nikolaus Graf",
        "url": "http://www.nikgraf.com"
      },
      {
        "name": "Tobie Langel",
        "email": "tobie.langel@gmail.com",
        "url": "http://tobielangel.com"
      },
      {
        "name": "Boris Moore",
        "email": "borismoore@gmail.com",
        "url": "http://www.borismoore.com"
      }
    ],
    "main": "./lib/globalize.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/jquery/globalize.git"
    },
    "bugs": {
      "web": "http://github.com/jquery/globalize/issues"
    },
    "devDependencies": {
      "grunt": "0.3.17"
    },
    "licenses": [
      {
        "type": "MIT",
        "url": "http://jquery.org/license"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-globalize-0.1.1-integrity/node_modules/globalize/package.json",
    "readmeFilename": "README.md",
    "readme": "# Globalize\n\nA JavaScript library for globalization and localization. Enables complex\nculture-aware number and date parsing and formatting, including the raw\nculture information for hundreds of different languages and countries, as well\nas an extensible system for localization.\n\n<hr>\n<ul>\n<li><a href=\"#why\">Why Globalization</a></li>\n<li><a href=\"#what\">What is a Culture?</a></li>\n<li><a href=\"#addCultureInfo\">Globalize.addCultureInfo</a></li>\n<li><a href=\"#cultures\">Globalize.cultures</a></li>\n<li><a href=\"#culture\">Globalize.culture</a></li>\n<li><a href=\"#find\">Globalize.findClosestCulture</a></li>\n<li><a href=\"#format\">Globalize.format</a></li>\n<li><a href=\"#localize\">Globalize.localize</a></li>\n<li><a href=\"#parseInt\">Globalize.parseInt</a></li>\n<li><a href=\"#parseFloat\">Globalize.parseFloat</a></li>\n<li><a href=\"#parseDate\">Globalize.parseDate</a></li>\n<li><a href=\"#extend\">Utilizing and Extending Cultures</a></li>\n<li><a href=\"#defining\">Defining Culture Information</a></li>\n<li><a href=\"#numbers\">Number Formatting</a></li>\n<li><a href=\"#currency\">Currency Formatting</a></li>\n<li><a href=\"#dates\">Date Formatting</a></li>\n<li><a href=\"#generating\">Generating Culture Files</a></li>\n<li><a href=\"#building\">Building Globalize</a></li>\n</ul>\n\n<a name=\"why\"></a>\n<h2 id=\"why\">Why Globalization?</h2>\n<p>\nEach language, and the countries that speak that language, have different\nexpectations when it comes to how numbers (including currency and percentages)\nand dates should appear. Obviously, each language has different names for the\ndays of the week and the months of the year. But they also have different\nexpectations for the structure of dates, such as what order the day, month and\nyear are in. In number formatting, not only does the character used to\ndelineate number groupings and the decimal portion differ, but the placement of\nthose characters differ as well.\n</p>\n<p>\nA user using an application should be able to read and write dates and numbers\nin the format they are accustomed to. This library makes this possible,\nproviding an API to convert user-entered number and date strings - in their\nown format - into actual numbers and dates, and conversely, to format numbers\nand dates into that string format.\n</p>\n\n<a name=\"what\"></a>\n<h2 id=\"what\">What is a Culture?</h2>\n<p>\nGlobalize defines roughly 350 cultures. Part of the reason for this large\nnumber, besides there being a lot of cultures in the world, is because for\nsome languages, expectations differ among the countries that speak it.\nEnglish, for example, is an official language in dozens of countries. Despite\nthe language being English, the expected date formatting still greatly differs\nbetween them.\n</p>\n<p>\nSo, it does not seem useful to define cultures by their language alone. Nor\nis it useful to define a culture by its country alone, as many countries have\nseveral official languages, spoken by sizable populations. Therefore, cultures\nare defined as a combination of the language and the country speaking it. Each\nculture is given a unique code that is a combination of an ISO 639 two-letter\nlowercase culture code for the language, and a two-letter uppercase code for\nthe country or region. For example, \"en-US\" is the culture code for English in\nthe United States.\n</p>\n<p>\nYet, it is perhaps unreasonable to expect application developers to cater to\nevery possible language/country combination perfectly. It is important then to\ndefine so-called \"neutral\" cultures based on each language. These cultures\ndefine the most likely accepted set of rules by anyone speaking that language,\nwhatever the country. Neutral cultures are defined only by their language code.\nFor example, \"es\" is the neutral culture for Spanish.\n</p>\n\n<a name=\"addCultureInfo\"></a>\n<h2 id=\"addCultureInfo\">Globalize.addCultureInfo( cultureName, extendCultureName, info )</h2>\n<p>\nThis method allows you to create a new culture based on an existing culture or\nadd to existing culture info. If the optional argument <pre>extendCultureName</pre>\nis not supplied, it will extend the existing culture if it exists or create a new\nculture based on the default culture if it doesn't exist. If cultureName is not\nsupplied, it will add the supplied info to the current culture. See .culture().\n</p>\n\n\n<a name=\"cultures\"></a>\n<h2 id=\"cultures\">Globalize.cultures</h2>\n<p>\nA mapping of culture codes to culture objects. For example,\nGlobalize.cultures.fr is an object representing the complete culture\ndefinition for the neutral French culture. Note that the main globalize.js file\nalone only includes a neutral English culture. To get additional cultures, you\nmust include one or more of the culture scripts that come with it. You\ncan see in the section <a href=\"#defining\">Defining Culture Information</a>\nbelow which fields are defined in each culture.\n</p>\n\n<a name=\"culture\"></a>\n<h2 id=\"culture\">Globalize.culture( selector )</h2>\n<p>\nAn application that supports globalization and/or localization will need to\nhave a way to determine the user's preference. Attempting to automatically\ndetermine the appropriate culture is useful, but it is good practice to always\noffer the user a choice, by whatever means.\n</p>\n<p>\nWhatever your mechanism, it is likely that you will have to correlate the\nuser's preferences with the list of cultures supported in the app. This\nmethod allows you to select the best match given the culture scripts that you\nhave included and to set the Globalize culture to the culture which the user\nprefers.\n</p>\n<p>\nIf you pass an array of names instead of a single name string, the first\nculture for which there is a match (that culture's script has been referenced)\nwill be used. If none match, the search restarts using the corresponding\nneutral cultures. For example, if the application has included only the neutral\n\"fr\" culture, any of these would select it:\n<pre>\nGlobalize.culture( \"fr\" );\nconsole.log( Globalize.culture().name ) // \"fr\"\n\nGlobalize.culture( \"fr-FR\" );\nconsole.log( Globalize.culture().name ) // \"fr-FR\"\n\nGlobalize.culture([ \"es-MX\", \"fr-FR\" ]);\nconsole.log( Globalize.culture().name ) // \"es-MX\"\n</pre>\n\nIn any case, if no match is found, the neutral English culture \"en\" is selected\nby default.\n\nIf you don't pass a selector, .culture() will return the current Globalize\nculture.\n</p>\n<p>\nEach culture string may also follow the pattern defined in\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\"\n>RFC2616 sec 14.4</a>. That is, a culture name may include a \"quality\" value\nthat indicates an estimate of the user's preference for the language.\n\n<pre>\nGlobalize.culture( \"fr;q=0.4, es;q=0.5, he\" );\n</pre>\nIn this example, the neutral Hebrew culture \"he\" is given top priority (an\nunspecified quality is equal to 1). If that language is not an exact match for\nany of the cultures available in Globalize.cultures, then \"es\" is the next\nhighest priority with 0.5, etc. If none of these match, just like with the array\nsyntax, the search starts over and the same rules are applied to the\ncorresponding neutral language culture for each. If still none match, the\nneutral English culture \"en\" is used.\n</p>\n\n<a name=\"find\"></a>\n<h2 id=\"find\">Globalize.findClosestCulture( selector )</h2>\n<p>\nJust like .culture( selector ), but it just returns the matching culture, if\nany, without setting it to the current Globalize culture, returned by\n.culture().\n</p>\n\n<a name=\"format\"></a>\n<h2 id=\"format\">Globalize.format( value, format, culture )</h2>\n<p>\nFormats a date or number according to the given format string and the given\nculture (or the current culture if not specified). See the sections\n<a href=\"#numbers\">Number Formatting</a> and\n<a href=\"#dates\">Date Formatting</a> below for details on the available\nformats.\n<pre>\n// assuming a culture with number grouping of 3 digits,\n// using \",\" separator and \".\" decimal symbol.\nGlobalize.format( 1234.567, \"n\" ); // \"1,234.57\"\nGlobalize.format( 1234.567, \"n1\" ); // \"1,234.6\"\nGlobalize.format( 1234.567, \"n0\" ); // \"1,235\"\n\n// assuming a culture with \"/\" as the date separator symbol\nGlobalize.format( new Date(1955,10,5), \"yyyy/MM/dd\" ); // \"1955/11/05\"\nGlobalize.format( new Date(1955,10,5), \"dddd MMMM d, yyyy\" ); // \"Saturday November 5, 1955\"\n</pre>\n</p>\n\n<a name=\"localize\"></a>\n<h2 id=\"localize\">Globalize.localize( key, culture )</h2>\n<p>\nGets or sets a localized value. This method allows you to extend the\ninformation available to a particular culture, and to easily retrieve it\nwithout worrying about finding the most appropriate culture. For example, to\ndefine the word \"translate\" in French:\n<pre>\nGlobalize.addCultureInfo( \"fr\", {\n\tmessages: {\n\t\t\"translate\": \"traduire\"\n\t}\n});\nconsole.log( Globalize.localize( \"translate\", \"fr\" ) ); // \"traduire\"\n</pre>\nNote that localize() will find the closest match available per the same\nsemantics as the Globalize.findClosestCulture() method. If there is no\nmatch, the translation given is for the neutral English culture \"en\" by\ndefault.\n</p>\n\n\n<a name=\"parseInt\"></a>\n<h2 id=\"parseInt\">Globalize.parseInt( value, radix, culture )</h2>\n<p>\nParses a string representing a whole number in the given radix (10 by default),\ntaking into account any formatting rules followed by the given culture (or the\ncurrent culture, if not specified).\n\nIf a percentage is passed into parseInt, the percent sign will be removed and the number parsed as is.\nExample: 12.34% would be returned as 12.\n<pre>\n// assuming a culture where \",\" is the group separator\n// and \".\" is the decimal separator\nGlobalize.parseInt( \"1,234.56\" ); // 1234\n// assuming a culture where \".\" is the group separator\n// and \",\" is the decimal separator\nGlobalize.parseInt( \"1.234,56\" ); // 1234\n</pre>\n</p>\n\n<a name=\"parseFloat\"></a>\n<h2 id=\"parseFloat\">Globalize.parseFloat( value, radix, culture )</h2>\n<p>\nParses a string representing a floating point number in the given radix (10 by\ndefault), taking into account any formatting rules followed by the given\nculture (or the current culture, if not specified).\n\nIf a percentage is passed into parseFloat, the percent sign will be removed and the number parsed as is.\nExample: 12.34% would be returned as 12.34\n<pre>\n// assuming a culture where \",\" is the group separator\n// and \".\" is the decimal separator\nGlobalize.parseFloat( \"1,234.56\" ); // 1234.56\n// assuming a culture where \".\" is the group separator\n// and \",\" is the decimal separator\nGlobalize.parseFloat( \"1.234,56\" ); // 1234.56\n</pre>\n</p>\n\n<a name=\"parseDate\"></a>\n<h2 id=\"parseDate\">Globalize.parseDate( value, formats, culture )</h2>\n<p>\nParses a string representing a date into a JavaScript Date object, taking into\naccount the given possible formats (or the given culture's set of default\nformats if not given). As before, the current culture is used if one is not\nspecified.\n<pre>\nGlobalize.culture( \"en\" );\nGlobalize.parseDate( \"1/2/2003\" ); // Thu Jan 02 2003\nGlobalize.culture( \"fr\" );\nGlobalize.parseDate( \"1/2/2003\" ); // Sat Feb 01 2003\n</pre>\n</p>\n\n<a name=\"extend\"></a>\n<h2 id=\"extend\">Utilizing and Extending Cultures</h2>\n<p>\nThe culture information included with each culture is mostly necessary for the\nparsing and formatting methods, but not all of it. For example, the Native and\nEnglish names for each culture is given, as well as a boolean indicating\nwhether the language is right-to-left. This may be useful information for your\nown purposes. You may also add to the culture information directly if so\ndesired.\n</p>\n<p>\nAs an example, in the U.S., the word \"billion\" means the number 1,000,000,000\n(9 zeros). But in other countries, that number is \"1000 million\" or a\n\"milliard\", and a billion is 1,000,000,000,000 (12 zeros). If you needed to\nprovide functionality to your app or custom plugin that needed to know how many\nzeros are in a \"billion\", you could extend the culture information as follows:\n<pre>\n// define additional culture information for a possibly existing culture\nGlobalize.addCultureInfo( \"fr\", {\n\tnumberFormat: {\n\t\tbillionZeroes: 12\n\t}\n});\n</pre>\nUsing this mechanism, the \"fr\" culture will be created if it does not exist.\nAnd if it does, the given values will be added to it.\n</p>\n\n<a name=\"defining\"></a>\n<h2 id=\"defining\">Defining Culture Information</h2>\n<p>\nEach culture is defined in its own script with the naming scheme\nglobalize.culture.&lt;name&gt;.js. You may include any number of these scripts,\nmaking them available in the Globalize.cultures mapping. Including one of\nthese scripts does NOT automatically make it the current culture selected in the\nGlobalize.culture property.\n</p>\n<p>\nThe neutral English culture is defined directly in globalize.js, and set\nboth to the properties \"en\" and \"default\" of the Globalize.cultures mapping.\nExtensive comments describe the purpose of each of the fields defined.\n</p>\n<p>\nLooking at the source code of the scripts for each culture, you will notice\nthat each script uses Globalize.addCultureInfo() to have the \"default\" neutral\nEnglish culture \"en\", as a common basis, and defines only the properties that\ndiffer from neutral English.\n</p>\n<p>\nThe neutral English culture is listed here along with the comments:\n<pre>\nGlobalize.cultures[ \"default\" ] = {\n\t// A unique name for the culture in the form\n\t// &lt;language code&gt;-&lt;country/region code&gt;\n\tname: \"English\",\n\t// the name of the culture in the English language\n\tenglishName: \"English\",\n\t// the name of the culture in its own language\n\tnativeName: \"English\",\n\t// whether the culture uses right-to-left text\n\tisRTL: false,\n\t// \"language\" is used for so-called \"specific\" cultures.\n\t// For example, the culture \"es-CL\" means Spanish in Chili.\n\t// It represents the Spanish-speaking culture as it is in Chili,\n\t// which might have different formatting rules or even translations\n\t// than Spanish in Spain. A \"neutral\" culture is one that is not\n\t// specific to a region. For example, the culture \"es\" is the generic\n\t// Spanish culture, which may be a more generalized version of the language\n\t// that may or may not be what a specific culture expects.\n\t// For a specific culture like \"es-CL\", the \"language\" field refers to the\n\t// neutral, generic culture information for the language it is using.\n\t// This is not always a simple matter of the string before the dash.\n\t// For example, the \"zh-Hans\" culture is neutral (Simplified Chinese).\n\t// And the \"zh-SG\" culture is Simplified Chinese in Singapore, whose\n\t// language field is \"zh-CHS\", not \"zh\".\n\t// This field should be used to navigate from a specific culture to its\n\t// more general, neutral culture. If a culture is already as general as it\n\t// can get, the language may refer to itself.\n\tlanguage: \"en\",\n\t// \"numberFormat\" defines general number formatting rules, like the digits\n\t// in each grouping, the group separator, and how negative numbers are\n\t// displayed.\n\tnumberFormat: {\n\t\t// [negativePattern]\n\t\t// Note, numberFormat.pattern has no \"positivePattern\" unlike percent\n\t\t// and currency, but is still defined as an array for consistency with\n\t\t// them.\n\t\t//\t  negativePattern: one of \"(n)|-n|- n|n-|n -\"\n\t\tpattern: [ \"-n\" ],\n\t\t// number of decimal places normally shown\n\t\tdecimals: 2,\n\t\t// string that separates number groups, as in 1,000,000\n\t\t\",\": \",\",\n\t\t// string that separates a number from the fractional portion,\n\t\t// as in 1.99\n\t\t\".\": \".\",\n\t\t// array of numbers indicating the size of each number group.\n\t\tgroupSizes: [ 3 ],\n\t\t// symbol used for positive numbers\n\t\t\"+\": \"+\",\n\t\t// symbol used for negative numbers\n\t\t\"-\": \"-\",\n\t\tpercent: {\n\t\t\t// [negativePattern, positivePattern]\n\t\t\t//\t   negativePattern: one of \"-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %\"\n\t\t\t//\t   positivePattern: one of \"n %|n%|%n|% n\"\n\t\t\tpattern: [ \"-n %\", \"n %\" ],\n\t\t\t// number of decimal places normally shown\n\t\t\tdecimals: 2,\n\t\t\t// array of numbers indicating the size of each number group.\n\t\t\tgroupSizes: [ 3 ],\n\t\t\t// string that separates number groups, as in 1,000,000\n\t\t\t\",\": \",\",\n\t\t\t// string that separates a number from the fractional portion, as in 1.99\n\t\t\t\".\": \".\",\n\t\t\t// symbol used to represent a percentage\n\t\t\tsymbol: \"%\"\n\t\t},\n\t\tcurrency: {\n\t\t\t// [negativePattern, positivePattern]\n\t\t\t//\t   negativePattern: one of \"($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)\"\n\t\t\t//\t   positivePattern: one of \"$n|n$|$ n|n $\"\n\t\t\tpattern: [ \"($n)\", \"$n\" ],\n\t\t\t// number of decimal places normally shown\n\t\t\tdecimals: 2,\n\t\t\t// array of numbers indicating the size of each number group.\n\t\t\tgroupSizes: [ 3 ],\n\t\t\t// string that separates number groups, as in 1,000,000\n\t\t\t\",\": \",\",\n\t\t\t// string that separates a number from the fractional portion, as in 1.99\n\t\t\t\".\": \".\",\n\t\t\t// symbol used to represent currency\n\t\t\tsymbol: \"$\"\n\t\t}\n\t},\n\t// \"calendars\" property defines all the possible calendars used by this\n\t// culture. There should be at least one defined with name \"standard\" which\n\t// is the default calendar used by the culture.\n\t// A calendar contains information about how dates are formatted,\n\t// information about the calendar's eras, a standard set of the date\n\t// formats, translations for day and month names, and if the calendar is\n\t// not based on the Gregorian calendar, conversion functions to and from\n\t// the Gregorian calendar.\n\tcalendars: {\n\t\tstandard: {\n\t\t\t// name that identifies the type of calendar this is\n\t\t\tname: \"Gregorian_USEnglish\",\n\t\t\t// separator of parts of a date (e.g. \"/\" in 11/05/1955)\n\t\t\t\"/\": \"/\",\n\t\t\t// separator of parts of a time (e.g. \":\" in 05:44 PM)\n\t\t\t\":\": \":\",\n\t\t\t// the first day of the week (0 = Sunday, 1 = Monday, etc)\n\t\t\tfirstDay: 0,\n\t\t\tdays: {\n\t\t\t\t// full day names\n\t\t\t\tnames: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n\t\t\t\t// abbreviated day names\n\t\t\t\tnamesAbbr: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n\t\t\t\t// shortest day names\n\t\t\t\tnamesShort: [ \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\" ]\n\t\t\t},\n\t\t\tmonths: [\n\t\t\t\t// full month names (13 months for lunar calendars -- 13th month should be \"\" if not lunar)\n\t\t\t\tnames: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\" ],\n\t\t\t\t// abbreviated month names\n\t\t\t\tnamesAbbr: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\" ]\n\t\t\t],\n\t\t\t// AM and PM designators in one of these forms:\n\t\t\t// The usual view, and the upper and lower case versions\n\t\t\t//\t\t[standard,lowercase,uppercase]\n\t\t\t// The culture does not use AM or PM (likely all standard date\n\t\t\t// formats use 24 hour time)\n\t\t\t//\t\tnull\n\t\t\tAM: [ \"AM\", \"am\", \"AM\" ],\n\t\t\tPM: [ \"PM\", \"pm\", \"PM\" ],\n\t\t\teras: [\n\t\t\t\t// eras in reverse chronological order.\n\t\t\t\t// name: the name of the era in this culture (e.g. A.D., C.E.)\n\t\t\t\t// start: when the era starts in ticks, null if it is the\n\t\t\t\t//\t\t  earliest supported era.\n\t\t\t\t// offset: offset in years from gregorian calendar\n\t\t\t\t{\"name\":\"A.D.\",\"start\":null,\"offset\":0}\n\t\t\t],\n\t\t\t// when a two digit year is given, it will never be parsed as a\n\t\t\t// four digit year greater than this year (in the appropriate era\n\t\t\t// for the culture)\n\t\t\t// Set it as a full year (e.g. 2029) or use an offset format\n\t\t\t// starting from the current year: \"+19\" would correspond to 2029\n\t\t\t// if the current year is 2010.\n\t\t\ttwoDigitYearMax: 2029,\n\t\t\t// set of predefined date and time patterns used by the culture.\n\t\t\t// These represent the format someone in this culture would expect\n\t\t\t// to see given the portions of the date that are shown.\n\t\t\tpatterns: {\n\t\t\t\t// short date pattern\n\t\t\t\td: \"M/d/yyyy\",\n\t\t\t\t// long date pattern\n\t\t\t\tD: \"dddd, MMMM dd, yyyy\",\n\t\t\t\t// short time pattern\n\t\t\t\tt: \"h:mm tt\",\n\t\t\t\t// long time pattern\n\t\t\t\tT: \"h:mm:ss tt\",\n\t\t\t\t// long date, short time pattern\n\t\t\t\tf: \"dddd, MMMM dd, yyyy h:mm tt\",\n\t\t\t\t// long date, long time pattern\n\t\t\t\tF: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n\t\t\t\t// month/day pattern\n\t\t\t\tM: \"MMMM dd\",\n\t\t\t\t// month/year pattern\n\t\t\t\tY: \"yyyy MMMM\",\n\t\t\t\t// S is a sortable format that does not vary by culture\n\t\t\t\tS: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\"\n\t\t\t}\n\t\t\t// optional fields for each calendar:\n\t\t\t/*\n\t\t\tmonthsGenitive:\n\t\t\t\tSame as months but used when the day preceeds the month.\n\t\t\t\tOmit if the culture has no genitive distinction in month names.\n\t\t\t\tFor an explanation of genitive months, see\n\t\t\t\thttp://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx\n\t\t\tconvert:\n\t\t\t\tAllows for the support of non-gregorian based calendars. This\n\t\t\t\t\"convert\" object defines two functions to convert a date to and\n\t\t\t\tfrom a gregorian calendar date:\n\t\t\t\t\tfromGregorian( date )\n\t\t\t\t\t\tGiven the date as a parameter, return an array with\n\t\t\t\t\t\tparts [ year, month, day ] corresponding to the\n\t\t\t\t\t\tnon-gregorian based year, month, and day for the\n\t\t\t\t\t\tcalendar.\n\t\t\t\t\ttoGregorian( year, month, day )\n\t\t\t\t\t\tGiven the non-gregorian year, month, and day, return a\n\t\t\t\t\t\tnew Date() object set to the corresponding date in the\n\t\t\t\t\t\tgregorian calendar.\n\t\t\t*/\n\t\t}\n\t},\n\t// Map of messages used by .localize()\n\tmessages: {}\n}\n</pre>\n</p>\n<p>\nEach culture can have several possible calendars. The calendar named \"standard\"\nis the default calendar used by that culture. You may change the calendar in\nuse by setting the \"calendar\" field. Take a look at the calendars defined by\neach culture by looking at the script or enumerating its calendars collection.\n<pre>\n// switch to a non-standard calendar\nGlobalize.culture().calendar = Globalize.culture().calendars.SomeOtherCalendar;\n// back to the standard calendar\nGlobalize.culture().calendar = Globalize.culture().calendars.standard;\n</pre>\n\n</p>\n\n<a name=\"numbers\"></a>\n<h2 id=\"numbers\">Number Formatting</h2>\n<p>\nWhen formatting a number with format(), the main purpose is to convert the\nnumber into a human readable string using the culture's standard grouping and\ndecimal rules. The rules between cultures can vary a lot. For example, in some\ncultures, the grouping of numbers is done unevenly. In the \"te-IN\" culture\n(Telugu in India), groups have 3 digits and then 2 digits. The number 1000000\n(one million) is written as \"10,00,000\". Some cultures do not group numbers at\nall.\n</p>\n<p>\nThere are four main types of number formatting:\n<ul>\n<li><strong>n</strong> for number</li>\n<li><strong>d</strong> for decimal digits</li>\n<li><strong>p</strong> for percentage</li>\n<li><strong>c</strong> for currency</li>\n</ul>\nEven within the same culture, the formatting rules can vary between these four\ntypes of numbers. For example, the expected number of decimal places may differ\nfrom the number format to the currency format. Each format token may also be\nfollowed by a number. The number determines how many decimal places to display\nfor all the format types except decimal, for which it means the minimum number\nof digits to display, zero padding it if necessary. Also note that the way\nnegative numbers are represented in each culture can vary, such as what the\nnegative sign is, and whether the negative sign appears before or after the\nnumber. This is especially apparent with currency formatting, where many\ncultures use parentheses instead of a negative sign.\n<pre>\n// just for example - will vary by culture\nGlobalize.format( 123.45, \"n\" ); // 123.45\nGlobalize.format( 123.45, \"n0\" ); // 123\nGlobalize.format( 123.45, \"n1\" ); // 123.5\n\nGlobalize.format( 123.45, \"d\" ); // 123\nGlobalize.format( 12, \"d3\" ); // 012\n\nGlobalize.format( 123.45, \"c\" ); // $123.45\nGlobalize.format( 123.45, \"c0\" ); // $123\nGlobalize.format( 123.45, \"c1\" ); // $123.5\nGlobalize.format( -123.45, \"c\" ); // ($123.45)\n\nGlobalize.format( 0.12345, \"p\" ); // 12.35 %\nGlobalize.format( 0.12345, \"p0\" ); // 12 %\nGlobalize.format( 0.12345, \"p4\" ); // 12.3450 %\n</pre>\nParsing with parseInt and parseFloat also accepts any of these formats.\n</p>\n\n<a name=\"currency\"></a>\n<h2 id=\"currency\">Currency Formatting</h2>\n<p>\nGlobalize has a default currency symbol for each locale. This is used when\nformatting a currency value such as\n<pre>\nGlobalize.format( 1234.56, \"c\" ); // $1,234.56\n</pre>\nYou can change the currency symbol for a locale by modifying the culture's\n<code>numberFormat.currency.symbol</code> property:\n<pre>\nGlobalize.culture( \"en-US\" ).numberFormat.currency.symbol = '\\u20ac'; // euro sign U+20AC\n</pre>\nIf you need to switch between currency symbols, you could write a function\nto do that, such as\n<pre>\nfunction setCurrency( currSym ) {\n  Globalize.culture().numberFormat.currency.symbol = currSym;\n}\n</pre>\n\n<a name=\"dates\"></a>\n<h2 id=\"dates\">Date Formatting</h2>\n<p>\nDate formatting varies wildly by culture, not just in the spelling of month and\nday names, and the date separator, but by the expected order of the various\ndate components, whether to use a 12 or 24 hour clock, and how months and days\nare abbreviated. Many cultures even include \"genitive\" month names, which are\ndifferent from the typical names and are used only in certain cases.\n</p>\n<p>\nAlso, each culture has a set of \"standard\" or \"typical\" formats. For example,\nin \"en-US\", when displaying a date in its fullest form, it looks like\n\"Saturday, November 05, 1955\". Note the non-abbreviated day and month name, the\nzero padded date, and four digit year. So, Globalize expects a certain set\nof \"standard\" formatting strings for dates in the \"patterns\" property of the\n\"standard\" calendar of each culture, that describe specific formats for the\nculture. The third column shows example values in the neutral English culture\n\"en-US\"; see the second table for the meaning tokens used in date formats.\n\n<pre>\n// just for example - will vary by culture\nGlobalize.format( new Date(2012, 1, 20), 'd' ); // 2/20/2012\nGlobalize.format( new Date(2012, 1, 20), 'D' ); // Monday, February 20, 2012\n</pre>\n<p>\n\n</p>\n<table>\n<tr>\n  <th>Format</th>\n  <th>Meaning</th>\n  <th>\"en-US\"</th>\n</tr>\n<tr>\n   <td>f</td>\n   <td>Long Date, Short Time</td>\n   <td>dddd, MMMM dd, yyyy h:mm tt</td>\n</tr>\n<tr>\n   <td>F</td>\n   <td>Long Date, Long Time</td>\n   <td>dddd, MMMM dd, yyyy h:mm:ss tt</td>\n</tr>\n<tr>\n   <td>t</td>\n   <td>Short Time</td>\n   <td>h:mm tt</td>\n</tr>\n<tr>\n   <td>T</td>\n   <td>Long Time</td>\n   <td>h:mm:ss tt</td>\n</tr>\n<tr>\n   <td>d</td>\n   <td>Short Date</td>\n   <td>M/d/yyyy</td>\n</tr>\n<tr>\n   <td>D</td>\n   <td>Long Date</td>\n   <td>dddd, MMMM dd, yyyy</td>\n</tr>\n<tr>\n   <td>Y</td>\n   <td>Month/Year</td>\n   <td>MMMM, yyyy</td>\n</tr>\n<tr>\n   <td>M</td>\n   <td>Month/Day</td>\n   <td>MMMM dd</td>\n</tr>\n</table>\n</p>\n<p>\nIn addition to these standard formats, there is the \"S\" format. This is a\nsortable format that is identical in every culture:\n\"<strong>yyyy'-'MM'-'dd'T'HH':'mm':'ss</strong>\".\n</p>\n<p>\nWhen more specific control is needed over the formatting, you may use any\nformat you wish by specifying the following custom tokens:\n<table>\n<tr>\n   <th>Token</th>\n   <th>Meaning</th>\n   <th>Example</th>\n</tr>\n<tr>\n   <td>d</td>\n   <td>Day of month (no leading zero)</td>\n   <td>5</td>\n</tr>\n<tr>\n   <td>dd</td>\n   <td>Day of month (leading zero)</td>\n   <td>05</td>\n</tr>\n<tr>\n   <td>ddd</td>\n   <td>Day name (abbreviated)</td>\n   <td>Sat</td>\n</tr>\n<tr>\n   <td>dddd</td>\n   <td>Day name (full)</td>\n   <td>Saturday</td>\n</tr>\n<tr>\n   <td>M</td>\n   <td>Month of year (no leading zero)</td>\n   <td>9</td>\n</tr>\n<tr>\n   <td>MM</td>\n   <td>Month of year (leading zero)</td>\n   <td>09</td>\n</tr>\n<tr>\n   <td>MMM</td>\n   <td>Month name (abbreviated)</td>\n   <td>Sep</td>\n</tr>\n<tr>\n   <td>MMMM</td>\n   <td>Month name (full)</td>\n   <td>September</td>\n</tr>\n<tr>\n   <td>yy</td>\n   <td>Year (two digits)</td>\n   <td>55</td>\n</tr>\n<tr>\n   <td>yyyy</td>\n   <td>Year (four digits)</td>\n   <td>1955</td>\n</tr>\n<tr>\n   <td>'literal'</td>\n   <td>Literal Text</td>\n   <td>'of the clock'</td>\n</tr>\n<tr>\n   <td>\\'</td>\n   <td>Single Quote</td>\n   <td>'o'\\''clock'</td><!-- o'clock -->\n</tr>\n<tr>\n   <td>m</td>\n   <td>Minutes (no leading zero)</td>\n   <td>9</td>\n</tr>\n<tr>\n   <td>mm</td>\n   <td>Minutes (leading zero)</td>\n   <td>09</td>\n</tr>\n<tr>\n   <td>h</td>\n   <td>Hours (12 hour time, no leading zero)</td>\n   <td>6</td>\n</tr>\n<tr>\n   <td>hh</td>\n   <td>Hours (12 hour time, leading zero)</td>\n   <td>06</td>\n</tr>\n<tr>\n   <td>H</td>\n   <td>Hours (24 hour time, no leading zero)</td>\n   <td>5 (5am) 15 (3pm)</td>\n</tr>\n<tr>\n   <td>HH</td>\n   <td>Hours (24 hour time, leading zero)</td>\n   <td>05 (5am) 15 (3pm)</td>\n</tr>\n<tr>\n   <td>s</td>\n   <td>Seconds (no leading zero)</td>\n   <td>9</td>\n</tr>\n<tr>\n   <td>ss</td>\n   <td>Seconds (leading zero)</td>\n   <td>09</td>\n</tr>\n<tr>\n   <td>f</td>\n   <td>Deciseconds</td>\n   <td>1</td>\n</tr>\n<tr>\n   <td>ff</td>\n   <td>Centiseconds</td>\n   <td>11</td>\n</tr>\n<tr>\n   <td>fff</td>\n   <td>Milliseconds</td>\n   <td>111</td>\n</tr>\n<tr>\n   <td>t</td>\n   <td>AM/PM indicator (first letter)</td>\n   <td>A or P</td>\n</tr>\n<tr>\n   <td>tt</td>\n   <td>AM/PM indicator (full)</td>\n   <td>AM or PM</td>\n</tr>\n<tr>\n   <td>z</td>\n   <td>Timezone offset (hours only, no leading zero)</td>\n   <td>-8</td>\n</tr>\n<tr>\n   <td>zz</td>\n   <td>Timezone offset (hours only, leading zero)</td>\n   <td>-08</td>\n</tr>\n<tr>\n   <td>zzz</td>\n   <td>Timezone offset (full hours/minutes)</td>\n   <td>-08:00</td>\n</tr>\n<tr>\n   <td>g or gg</td>\n   <td>Era name</td>\n   <td>A.D.</td>\n</tr>\n</table>\n</p>\n\n<a name=\"generating\"></a>\n<h1 id=\"generating\">Generating Culture Files</h1>\n\nThe Globalize culture files are generated JavaScript containing metadata and\nfunctions based on culture info in the Microsoft .Net Framework 4.\n\n<h2>Requirements</h2>\n\n<ul>\n\t<li>Windows</li>\n\t<li>Microsoft .Net Framework 4 (Full, not just Client Profile) <a href=\"http://www.microsoft.com/downloads/en/details.aspx?displaylang=en&FamilyID=0a391abd-25c1-4fc0-919f-b21f31ab88b7\">download dotNetFx40_Full_x86_x64.exe</a></li>\n</ul>\n\n<h2>Building the generator</h2>\n\n1. Open a Windows Command Prompt ( Start -> Run... -> cmd )\n1. Change directory to root of Globalize project (where README.md file is located)\n1. >\"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild\" generator\\generator.csproj\n\n<h2>Running the generator</h2>\n\n1. Open a Windows Command Prompt\n1. Change directory to root of Globalize project (where README.md file is located)\n1. >\"generator\\bin\\Debug\\generator.exe\"\n\n<a name=\"building\"></a>\n<h1 id=\"building\">Building Globalize</h1>\n\nGlobalize is built using <a href=\"https://github.com/cowboy/grunt\">grunt</a>, a\nnode-based build utility. First, make sure grunt is installed globally:\n\n<pre>\n> npm install -g grunt\n</pre>\n\nthen you can lint and test by simply running grunt in the globalize folder\n\n<pre>\n> cd globalize\n> grunt\n</pre>\n",
    "license": "MIT",
    "licenseText": "Copyright Software Freedom Conservancy, Inc.\nhttp://jquery.org/license\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/globalize/-/globalize-0.1.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/globalize/-/globalize-0.1.1.tgz",
    "hash": "",
    "integrity": "sha512-5e01v8eLGfuQSOvx2MsDMOWS0GFtCx1wPzQSmcHw4hkxFzrQDBO3Xwg/m8Hr/7qXMrHeOIE29qWVzyv06u1TZA==",
    "registry": "npm",
    "packageName": "globalize",
    "cacheIntegrity": "sha512-5e01v8eLGfuQSOvx2MsDMOWS0GFtCx1wPzQSmcHw4hkxFzrQDBO3Xwg/m8Hr/7qXMrHeOIE29qWVzyv06u1TZA== sha1-TQS6ZaWAqLC9zJ7ZdK60l7nIClY="
  },
  "registry": "npm",
  "hash": "e5ed35bfc78b19fb9048ebf1d8cb0330e592d0616d0b1d703f341299c1f0e21931173ad00c13b75f083f9bc1ebffba9732b1de388136f6a595cf2bf4eaed5364"
}