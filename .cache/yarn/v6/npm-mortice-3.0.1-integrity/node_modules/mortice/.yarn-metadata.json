{
  "manifest": {
    "name": "mortice",
    "version": "3.0.1",
    "description": "Isomorphic read/write lock that works in single processes, node clusters and web workers",
    "author": {
      "name": "Alex Potsides",
      "email": "alex@achingbrain.net"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/achingbrain/mortice#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/achingbrain/mortice.git"
    },
    "bugs": {
      "url": "https://github.com/achingbrain/mortice/issues"
    },
    "keywords": [
      "async",
      "await",
      "cluster",
      "lock",
      "mutex",
      "read-write"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "test": "aegir test -t node -t browser",
      "test:node": "aegir test -t node --cov",
      "test:chrome": "aegir test -t browser --cov",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:electron-main": "aegir test -f dist/test/node.js -t electron-main",
      "build": "aegir build && node esbuild.js",
      "release": "aegir release"
    },
    "dependencies": {
      "nanoid": "^4.0.0",
      "observable-webworkers": "^2.0.1",
      "p-queue": "^7.2.0",
      "p-timeout": "^6.0.0"
    },
    "devDependencies": {
      "aegir": "^37.5.1",
      "delay": "^5.0.0",
      "esbuild": "^0.15.5",
      "execa": "^6.0.0",
      "wherearewe": "^2.0.1"
    },
    "browser": {
      "cluster": false,
      "./dist/src/node.js": "./dist/src/browser.js",
      "./src/node.js": "./src/browser.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-mortice-3.0.1-integrity/node_modules/mortice/package.json",
    "readmeFilename": "README.md",
    "readme": "# mortice <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/achingbrain/mortice.svg?style=flat-square)](https://codecov.io/gh/achingbrain/mortice)\n[![CI](https://img.shields.io/github/workflow/status/achingbrain/mortice/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/achingbrain/mortice/actions/workflows/js-test-and-release.yml)\n\n> Isomorphic read/write lock that works in single processes, node clusters and web workers\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Features](#features)\n- [Usage](#usage)\n- [Browser](#browser)\n- [License](#license)\n- [Contribution](#contribution)\n\n## Install\n\n```console\n$ npm i mortice\n```\n\n## Features\n\n- Reads occur concurrently\n- Writes occur one at a time\n- No reads occur while a write operation is in progress\n- Locks can be created with different names\n- Reads/writes can time out\n\n## Usage\n\n```javascript\nimport mortice from 'mortice'\nimport delay from 'delay'\n\n// the lock name & options objects are both optional\nconst mutex = mortice('my-lock', {\n\n  // how long before write locks time out (default: 24 hours)\n  timeout: 30000,\n\n   // control how many read operations are executed concurrently (default: Infinity)\n  concurrency: 5,\n\n  // by default the the lock will be held on the main thread, set this to true if the\n  // a lock should reside on each worker (default: false)\n  singleProcess: false\n})\n\nPromise.all([\n  (async () => {\n    const release = await mutex.readLock()\n\n    try {\n      console.info('read 1')\n    } finally {\n      release()\n    }\n  })(),\n  (async () => {\n    const release = await mutex.readLock()\n\n    try {\n      console.info('read 2')\n    } finally {\n      release()\n    }\n  })(),\n  (async () => {\n    const release = await mutex.writeLock()\n\n    try {\n      await delay(1000)\n\n      console.info('write 1')\n    } finally {\n      release()\n    }\n  })(),\n  (async () => {\n    const release = await mutex.readLock()\n\n    try {\n      console.info('read 3')\n    } finally {\n      release()\n    }\n  })()\n])\n```\n\n    read 1\n    read 2\n    <small pause>\n    write 1\n    read 3\n\n## Browser\n\nBecause there's no global way to evesdrop on messages sent by Web Workers, please pass all created Web Workers to the [`observable-webworkers`](https://npmjs.org/package/observable-webworkers) module:\n\n```javascript\n// main.js\nimport mortice from 'mortice'\nimport observe from 'observable-webworkers'\n\n// create our lock on the main thread, it will be held here\nconst mutex = mortice()\n\nconst worker = new Worker('worker.js')\n\nobserve(worker)\n```\n\n```javascript\n// worker.js\nimport mortice from 'mortice'\nimport delay from 'delay'\n\nconst mutex = mortice()\n\nlet release = await mutex.readLock()\n// read something\nrelease()\n\nrelease = await mutex.writeLock()\n// write something\nrelease()\n```\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/mortice/-/mortice-3.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/mortice/-/mortice-3.0.1.tgz",
    "hash": "",
    "integrity": "sha512-eyDUsl1nCR9+JtNksKnaESLP9MgAXCA4w1LTtsmOSQNsThnv++f36rrBu5fC/fdGIwTJZmbiaR/QewptH93pYA==",
    "registry": "npm",
    "packageName": "mortice",
    "cacheIntegrity": "sha512-eyDUsl1nCR9+JtNksKnaESLP9MgAXCA4w1LTtsmOSQNsThnv++f36rrBu5fC/fdGIwTJZmbiaR/QewptH93pYA== sha1-J8GUOxhBUCx7J6nI/qeJ+HwSRRU="
  },
  "registry": "npm",
  "hash": "7b20d4b25d67091f7e26d364b0a9da1122cff4c8005c2038c352d3b6c98e49036c4e19effbe7f7eabac1bb97c2fdf7462304c96666e2691fd07b0a6d1fdde960"
}