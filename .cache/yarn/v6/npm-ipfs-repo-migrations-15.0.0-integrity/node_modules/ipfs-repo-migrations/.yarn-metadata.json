{
  "manifest": {
    "name": "ipfs-repo-migrations",
    "version": "15.0.0",
    "description": "Migration framework for versioning of JS IPFS Repo",
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipfs/js-ipfs-repo/tree/master/packages/ipfs-repo-migrations#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipfs-repo.git"
    },
    "bugs": {
      "url": "https://github.com/ipfs/js-ipfs-repo/issues"
    },
    "keywords": [
      "IPFS",
      "libp2p",
      "migrations"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      },
      "ignorePatterns": [
        "src/migrations/migration-9/pin.js",
        "src/migrations/migration-9/pin.d.ts",
        "src/migrations/migration-12/pb/*"
      ]
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "generate": "run-s generate:*:*",
      "generate:proto:pins": "pbjs -t static-module -w es6 --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o migrations/migration-9/pin.js migrations/migration-9/pin.proto",
      "generate:proto-types:pins": "pbts -o migrations/migration-9/pin.d.ts migrations/migration-9/pin.js",
      "generate:proto:address-book": "pbjs -t static-module -w es6 --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o migrations/migration-12/pb/address-book.js migrations/migration-12/pb/address-book.proto",
      "generate:proto-types:address-book": "pbts -o migrations/migration-12/pb/address-book.d.ts migrations/migration-12/pb/address-book.js",
      "generate:proto:peer": "pbjs -t static-module -w es6 --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o migrations/migration-12/pb/peer.js migrations/migration-12/pb/peer.proto",
      "generate:proto-types:peer": "pbts -o migrations/migration-12/pb/peer.d.ts migrations/migration-12/pb/peer.js",
      "generate:proto:proto-book": "pbjs -t static-module -w es6 --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o migrations/migration-12/pb/proto-book.js migrations/migration-12/pb/proto-book.proto",
      "generate:proto-types:proto-book": "pbts -o migrations/migration-12/pb/proto-book.d.ts migrations/migration-12/pb/proto-book.js",
      "generate:proto:envelope": "pbjs -t static-module -w es6 --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o migrations/migration-12/pb/envelope.js migrations/migration-12/pb/envelope.proto",
      "generate:proto-types:envelope": "pbts -o migrations/migration-12/pb/envelope.d.ts migrations/migration-12/pb/envelope.js",
      "generate:proto:peer-record": "pbjs -t static-module -w es6 --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o migrations/migration-12/pb/peer-record.js migrations/migration-12/pb/peer-record.proto",
      "generate:proto-types:peer-record": "pbts -o migrations/migration-12/pb/peer-record.d.ts migrations/migration-12/pb/peer-record.js",
      "build": "aegir build",
      "test": "aegir test",
      "test:node": "aegir test -t node --cov",
      "lint": "aegir lint",
      "release": "aegir release",
      "dep-check": "aegir dep-check -i interface-blockstore -i npm-run-all"
    },
    "dependencies": {
      "@ipld/dag-pb": "^4.0.0",
      "@multiformats/multiaddr": "^11.0.0",
      "cborg": "^1.3.4",
      "datastore-core": "^8.0.1",
      "debug": "^4.1.0",
      "fnv1a": "^1.0.1",
      "interface-blockstore": "^4.0.0",
      "interface-datastore": "^7.0.0",
      "it-length": "^2.0.0",
      "multiformats": "^11.0.0",
      "protobufjs": "^7.0.0",
      "uint8arrays": "^4.0.2",
      "varint": "^6.0.0"
    },
    "devDependencies": {
      "@ipld/car": "^5.0.0",
      "@types/debug": "^4.1.5",
      "@types/varint": "^6.0.0",
      "aegir": "^37.9.1",
      "aws-sdk": "^2.884.0",
      "blockstore-core": "^3.0.0",
      "blockstore-datastore-adapter": "^5.0.0",
      "datastore-fs": "^8.0.0",
      "datastore-level": "^9.0.0",
      "datastore-s3": "^10.0.0",
      "just-safe-set": "^4.1.1",
      "level-5": "npm:level@^5.0.0",
      "level-6": "npm:level@^6.0.0",
      "npm-run-all": "^4.1.5",
      "protobufjs-cli": "^1.0.0",
      "sinon": "^15.0.1"
    },
    "browser": {
      "datastore-fs": "datastore-level"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ipfs-repo-migrations-15.0.0-integrity/node_modules/ipfs-repo-migrations/package.json",
    "readmeFilename": "README.md",
    "readme": "# ipfs-repo-migrations <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-repo.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-repo)\n[![CI](https://img.shields.io/github/workflow/status/ipfs/js-ipfs-repo/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/ipfs/js-ipfs-repo/actions/workflows/js-test-and-release.yml)\n\n> Migration framework for versioning of JS IPFS Repo\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Background](#background)\n  - [Use in Node.js](#use-in-nodejs)\n  - [Use in a browser with browserify, webpack or any other bundler](#use-in-a-browser-with-browserify-webpack-or-any-other-bundler)\n- [Usage](#usage)\n- [API](#api)\n  - [`.migrate(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`](#migratepath-repooptions-toversion-ignorelock-onprogress-isdryrun---promisevoid)\n    - [`onProgress(version, percent, message)`](#onprogressversion-percent-message)\n  - [`.revert(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`](#revertpath-repooptions-toversion-ignorelock-onprogress-isdryrun---promisevoid)\n  - [`getLatestMigrationVersion() -> int`](#getlatestmigrationversion---int)\n- [Creating a new migration](#creating-a-new-migration)\n  - [Architecture of a migration](#architecture-of-a-migration)\n    - [`.migrate(repoPath, repoOptions)`](#migraterepopath-repooptions)\n    - [`.revert(repoPath, repoOptions)`](#revertrepopath-repooptions)\n  - [Browser vs. NodeJS environments](#browser-vs-nodejs-environments)\n  - [Guidelines](#guidelines)\n  - [Integration with js-ipfs](#integration-with-js-ipfs)\n  - [Tests](#tests)\n  - [Empty migrations](#empty-migrations)\n  - [Migrations matrix](#migrations-matrix)\n  - [Migrations](#migrations)\n    - [7](#7)\n    - [8](#8)\n    - [9](#9)\n    - [10](#10)\n- [Developer](#developer)\n  - [Module versioning notes](#module-versioning-notes)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipfs-repo-migrations\n```\n\nThis package is inspired by the [go-ipfs repo migration tool](https://github.com/ipfs/fs-repo-migrations/)\n\n## Background\n\nAs js-ipfs evolves and new technologies, algorithms and data structures are incorporated it is necessary to\nenable users to transition between versions. Different versions of js-ipfs may expect a different IPFS repo structure or content (see: [IPFS repo spec](https://github.com/ipfs/specs/blob/master/REPO.md), [JS implementation](https://github.com/ipfs/js-ipfs-repo) ).\nSo the IPFS repo is versioned, and this package provides a framework to create migrations to transition\nfrom one version of IPFS repo to the next/previous version.\n\nThis framework:\n\n- Handles locking/unlocking of repository\n- Defines migrations API\n- Executes and reports migrations in both directions: forward and backward\n- Simplifies creation of new migrations\n- Works on the browser too!\n\n```sh\n> npm install ipfs-repo-migrations\n```\n\n### Use in Node.js\n\n```js\nimport migrations from 'ipfs-repo-migrations'\n```\n\n### Use in a browser with browserify, webpack or any other bundler\n\n```js\nimport migrations from 'ipfs-repo-migrations'\n```\n\n## Usage\n\nExample:\n\n```js\nimport migrations from 'ipfs-repo-migrations'\n\nconst repoPath = 'some/repo/path'\nconst currentRepoVersion = 7\nconst latestVersion = migrations.getLatestMigrationVersion()\nconst repoOptions = {\n  ... // the same storage backend/storage options passed to `ipfs-repo`\n}\n\nif(currentRepoVersion < latestVersion){\n  // Old repo! Lets migrate to latest version!\n  await migrations.migrate(repoPath, latestVersion, {\n    repoOptions\n  })\n}\n```\n\nTo migrate your repository using the CLI, see the [how to run migrations](./run.md) tutorial.\n\n## API\n\n### `.migrate(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`\n\nExecutes a forward migration to a specific version, or to the latest version if a specific version is not specified.\n\n**Arguments:**\n\n- `path` (string, mandatory) - path to the repo to be migrated\n- `repoOptions` (object, mandatory) - options that are passed to migrations, that use them to construct the datastore. (options are the same as for IPFSRepo).\n- `toVersion` (int, mandatory) - version to which the repo should be migrated.\n- `options` (object, optional) - options for the migration\n- `options.ignoreLock` (bool, optional) - if true will not lock the repo when applying migrations. Use with caution.\n- `options.onProgress` (function, optional) - callback that is called during each migration to report progress.\n- `options.isDryRun` (bool, optional) - flag that indicates if it is a dry run that should give the same output as running a migration but without making any actual changes.\n\n#### `onProgress(version, percent, message)`\n\nSignature of the progress callback.\n\n**Arguments:**\n\n- `migration` (object) - object of migration that just successfully finished running. See [Architecture of migrations](#architecture-of-migrations) for details.\n- `counter` (int) - index of current migration.\n- `totalMigrations` (int) - total count of migrations that will be run.\n\n### `.revert(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`\n\nExecutes backward migration to a specific version.\n\n**Arguments:**\n\n- `path` (string, mandatory) - path to the repo to be reverted\n- `repoOptions` (object, mandatory) - options that are passed to migrations, that use them to construct the datastore. (options are the same as for IPFSRepo).\n- `toVersion` (int, mandatory) - version to which the repo should be reverted to.\n- `options` (object, optional) - options for the reversion\n- `options.ignoreLock` (bool, optional) - if true will not lock the repo when applying migrations. Use with caution.\n- `options.onProgress` (function, optional) - callback that is called during each migration to report progress.\n- `options.isDryRun` (bool, optional) - flag that indicates if it is a dry run that should give the same output as running a migration but without making any actual changes.\n\n### `getLatestMigrationVersion() -> int`\n\nReturn the version of the latest migration.\n\n## Creating a new migration\n\nMigrations are one of those things that can be extremely painful on users. At the end of the day, we want users never to have to think about it. The process should be:\n\n- SAFE. No data lost. Ever.\n- Revertible. Tools must implement forward and backward (if possible) migrations.\n- Tests. Migrations have to be well tested.\n- To Spec. The tools must conform to the spec.\n\nIf your migration has several parts, it should be fail-proof enough that if one part of migration fails the previous changes\nare reverted before propagating the error. If possible then the outcome should be consistent repo so it migration could\nbe run again.\n\n### Architecture of a migration\n\nAll migrations are placed in the `/src/migrations` folder. Each folder there represents one migration that follows the migration\nAPI.\n\nAll migrations are collected in `/src/migrations/index.js`, which should not be edited manually.\n\n**The order of migrations is important and migrations must be sorted in ascending order**.\n\nEach migration must follow this API. It must export an object in its `index.js` that has following properties:\n\n- `version` (int) - Number that represents the version which the repo will migrate to (eg. `8` will move the repo to version 8).\n- `description` (string) - Brief description of what the migrations does.\n- `migrate` (function) - Function that performs the migration (see signature of this function below)\n- `revert` (function) - If defined then this function will revert the migration to the previous version. Otherwise it is assumed that it is not possible to revert this migration.\n\n#### `.migrate(repoPath, repoOptions)`\n\n*Do not confuse this function with the `require('ipfs-repo-migrations').migrate()` function that drives the whole migration process!*\n\nArguments:\n\n- `repoPath` (string) - absolute path to the root of the repo\n- `repoOptions` (object, optional) - object containing `IPFSRepo` options, that should be used to construct a datastore instance.\n\n#### `.revert(repoPath, repoOptions)`\n\n*Do not confuse this function with the `require('ipfs-repo-migrations').revert()` function that drives the whole backward migration process!*\n\nArguments:\n\n- `repoPath` (string) - path to the root of the repo\n- `repoOptions` (object, optional) - object containing `IPFSRepo` options, that should be used to construct the datastore instance.\n\n### Browser vs. NodeJS environments\n\nThe migration might need to perform specific tasks in browser or NodeJS environment. In such a case create\nmigration file `/migrations/migration-<number>/index_browser.js` which have to follow the same API is described before.\nThen add entry in `package.json` to the `browser` field as follow:\n\n    './migrations/migration-<number>/index.js': './migrations/migration-<number>/index_browser.js'\n\nIn browser environments then `index.js` will be replaced with `index_browser.js`.\n\nSimple migrations should not need to distinguish between\nthese environments as the datastore implementation will handle the main differences.\n\nThere are currently two main datastore implementations:\n\n1. [`datastore-fs`](https://github.com/ipfs/js-datastore-fs) that is backed by file system and is used mainly in the NodeJS environment\n2. [`datastore-idb`](https://github.com/ipfs/js-datastore-idb) that is backed by LevelDB and is used mainly in the browser environment\n\nBoth implementations share the same API and hence are interchangeable.\n\nWhen the migration is run in a browser environment, `datastore-fs` is automatically replaced with `datastore-idb` even\nwhen it is directly imported (`require('datastore-fs')` will return `datastore-idb` in a browser).\nSo with simple migrations you shouldn't worry about the difference between `datastore-fs` and `datastore-idb`\nand by default use the `datastore-fs` package (as the replace mechanism does not work vice versa).\n\n### Guidelines\n\nThe recommended way to write a new migration is to first bootstrap a dummy migration using the CLI:\n\n```sh\n> npm run new-migration\n```\n\nA new folder is created with the bootstrapped migration. You can then simply fill in the required fields and\nwrite the rest of the migration!\n\n### Integration with js-ipfs\n\nWhen a new migration is created, new version of this package have to be released. Afterwards version of this package in [`js-ipfs-repo`](https://github.com/ipfs/js-ipfs-repo) have to be updated\ntogether with the repo version that `IPFSRepo` expects. Then the updated version of `js-ipfs-repo` should be propagated to `js-ipfs`.\n\n### Tests\n\nIf a migration affects any of the following functionality, it must provide tests for the following functions\nto work under the version of the repo that it migrates to:\n\n- `/src/repo/version.js`:`getVersion()` - retrieving repository's version\n- `/src/repo/lock.js`:`lock()` - locking repository that uses file system\n- `/src/repo/lock-memory.js`:`lock()` - locking repository that uses memory\n\nEvery migration must have test coverage. Tests for migrations should be placed in the `/test/migrations/` folder. Most probably\nyou will have to plug the tests into `browser.js`/`node.js` if they require specific bootstrapping on each platform.\n\n### Empty migrations\n\nFor interop with go-ipfs it might be necessary just to bump a version of a repo without any actual\nmodification as there might not be any changes needed in the JS implementation. For that purpose you can create an \"empty migration\".\n\nThe easiest way to do so is with the CLI:\n\n```sh\n> npm run new-migration -- --empty\n```\n\nThis will create an empty migration with the next version.\n\n### Migrations matrix\n\n| IPFS repo version | JS IPFS version |\n| ----------------: | :-------------: |\n|                 7 |      v0.0.0     |\n|                 8 |     v0.48.0     |\n|                 9 |     v0.49.0     |\n\n### Migrations\n\n#### 7\n\nThis is the initial version of the datastore, inherited from go-IPFS in an attempt to maintain cross-compatibility between the two implementations.\n\n#### 8\n\nBlockstore keys are transformed into base32 representations of the multihash from the CID of the block.\n\n#### 9\n\nPins were migrated from a DAG to a Datastore - see [ipfs/js-ipfs#2771](https://github.com/ipfs/js-ipfs/pull/2771)\n\n#### 10\n\n`level@6.x.x` upgrades the `level-js` dependency from `4.x.x` to `5.x.x`.  This update requires a database migration to convert all string keys/values into buffers. Only runs in the browser, node is unaffected. See [Level/level-js#179](https://github.com/Level/level-js/pull/179)\n\n## Developer\n\n### Module versioning notes\n\nIn order to have good overview of what version of package contains what kind of migration, to every release there\nshould be appended version's metadata in format `migr-<versionOfLatestMigration>`. If for releasing is used `aegir`\nyou can use the `release --metadata` option.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-repo/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ipfs-repo-migrations/-/ipfs-repo-migrations-15.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ipfs-repo-migrations/-/ipfs-repo-migrations-15.0.0.tgz",
    "hash": "",
    "integrity": "sha512-7OWFmDROrS455syVBTHegCWT5+YOLl5ac7MZpZU2OXP1n4/AEAD15ycNJzLUEHpyYTqOfVQlnz2Uh9eyiW+cJA==",
    "registry": "npm",
    "packageName": "ipfs-repo-migrations",
    "cacheIntegrity": "sha512-7OWFmDROrS455syVBTHegCWT5+YOLl5ac7MZpZU2OXP1n4/AEAD15ycNJzLUEHpyYTqOfVQlnz2Uh9eyiW+cJA== sha1-YXiJ9KXqxR/p9WIgctAGKb5dGbs="
  },
  "registry": "npm",
  "hash": "ece58598344ead2e39e6cc950531de802593e7e60e2e5e5a73b319a595363973f59f8fc01000f5e7270d2732d4107a72613a8e7d54259f3d9487d7b2896f9c24"
}