{
  "manifest": {
    "name": "@ipld/car",
    "version": "5.1.1",
    "description": "Content Addressable aRchive format reader and writer",
    "author": {
      "name": "Rod",
      "email": "rod@vagg.org",
      "url": "http://r.va.gg/"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipld/js-car#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipld/js-car.git"
    },
    "bugs": {
      "url": "https://github.com/ipld/js-car/issues"
    },
    "keywords": [
      "car",
      "ipfs",
      "ipld",
      "multiformats"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./src/index.js",
        "browser": "./src/index-browser.js"
      },
      "./buffer-writer": {
        "types": "./dist/src/buffer-writer.d.ts",
        "import": "./src/buffer-writer.js"
      },
      "./decoder": {
        "types": "./dist/src/decoder.d.ts",
        "import": "./src/decoder.js"
      },
      "./indexed-reader": {
        "types": "./dist/src/indexed-reader.d.ts",
        "browser": "./src/indexed-reader-browser.js",
        "import": "./src/indexed-reader.js"
      },
      "./indexer": {
        "types": "./dist/src/indexer.d.ts",
        "import": "./src/indexer.js"
      },
      "./iterator": {
        "types": "./dist/src/iterator.d.ts",
        "import": "./src/iterator.js"
      },
      "./reader": {
        "types": "./dist/src/reader.d.ts",
        "browser": "./src/reader-browser.js",
        "import": "./src/reader.js"
      },
      "./buffer-reader": {
        "types": "./dist/src/buffer-reader-browser.d.ts",
        "browser": "./src/buffer-reader-browser.js",
        "import": "./src/buffer-reader.js"
      },
      "./writer": {
        "types": "./dist/src/writer.d.ts",
        "browser": "./src/writer-browser.js",
        "import": "./src/writer.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "build": "aegir build",
      "release": "aegir release",
      "test": "npm run lint && aegir test && npm run test:examples",
      "test:node": "aegir test -t node --cov",
      "test:chrome": "aegir test -t browser --cov",
      "test:chrome-webworker": "aegir test -t webworker",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:firefox-webworker": "aegir test -t webworker -- --browser firefox",
      "test:electron-main": "aegir test -t electron-main",
      "test:examples": "npm run test --prefix examples/",
      "dep-check": "aegir dep-check",
      "coverage": "c8 --reporter=html --reporter=text mocha test/test-*.js && npx st -d coverage -p 8888",
      "docs": "jsdoc4readme --readme --description-only src/reader*.js src/indexed-reader.js src/iterator.js src/indexer.js src/writer*.js src/buffer-writer.js src/decoder.js src/buffer-reader*.js"
    },
    "dependencies": {
      "@ipld/dag-cbor": "^9.0.0",
      "cborg": "^1.9.0",
      "multiformats": "^11.0.0",
      "varint": "^6.0.0"
    },
    "devDependencies": {
      "@ipld/dag-pb": "^4.0.0",
      "@ipld/garbage": "^6.0.0",
      "@types/node": "^18.0.0",
      "@types/varint": "^6.0.0",
      "@typescript-eslint/eslint-plugin": "^5.6.0",
      "@typescript-eslint/parser": "^5.6.0",
      "aegir": "^37.5.6",
      "jsdoc4readme": "^1.4.0"
    },
    "browser": {
      "./src/index.js": "./src/index-browser.js",
      "./src/index-reader.js": "./src/index-reader-browser.js",
      "./src/reader.js": "./src/reader-browser.js",
      "./src/buffer-reader.js": "./src/buffer-reader-browser.js",
      "./src/writer.js": "./src/writer-browser.js",
      "fs": false,
      "util": false,
      "stream": false
    },
    "standard": {
      "ignore": [
        "dist"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@ipld-car-5.1.1-integrity/node_modules/@ipld/car/package.json",
    "readmeFilename": "README.md",
    "readme": "# @ipld/car\n\n[![codecov](https://img.shields.io/codecov/c/github/ipld/js-car.svg?style=flat-square)](https://codecov.io/gh/ipld/js-car)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipld/js-car/js-test-and-release.yml?branch=master&style=flat-square)](https://github.com/ipld/js-car/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Content Addressable aRchive format reader and writer\n\n## Install\n\n```console\n$ npm i @ipld/car\n```\n\nSee also:\n\n- Original [Go implementation](https://github.com/ipfs/go-car)\n- [CAR specification](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md)\n- [IPLD](https://ipld.io)\n\n## Contents\n\n- [Example](#example)\n- [Usage](#usage)\n- [API](#api)\n- [License](#license)\n\n## Example\n\n```js\n// Create a simple .car file with a single block and that block's CID as the\n// single root. Then read the .car and fetch the block again.\n\nimport fs from 'fs'\nimport { Readable } from 'stream'\nimport { CarReader, CarWriter } from '@ipld/car'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nasync function example() {\n  const bytes = new TextEncoder().encode('random meaningless bytes')\n  const hash = await sha256.digest(raw.encode(bytes))\n  const cid = CID.create(1, raw.code, hash)\n\n  // create the writer and set the header with a single root\n  const { writer, out } = await CarWriter.create([cid])\n  Readable.from(out).pipe(fs.createWriteStream('example.car'))\n\n  // store a new block, creates a new file entry in the CAR archive\n  await writer.put({ cid, bytes })\n  await writer.close()\n\n  const inStream = fs.createReadStream('example.car')\n  // read and parse the entire stream in one go, this will cache the contents of\n  // the car in memory so is not suitable for large files.\n  const reader = await CarReader.fromIterable(inStream)\n\n  // read the list of roots from the header\n  const roots = await reader.getRoots()\n  // retrieve a block, as a { cid:CID, bytes:UInt8Array } pair from the archive\n  const got = await reader.get(roots[0])\n  // also possible: for await (const { cid, bytes } of CarIterator.fromIterable(inStream)) { ... }\n\n  console.log(\n    'Retrieved [%s] from example.car with CID [%s]',\n    new TextDecoder().decode(got.bytes),\n    roots[0].toString()\n  )\n}\n\nexample().catch((err) => {\n  console.error(err)\n  process.exit(1)\n})\n```\n\nWill output:\n\n```\nRetrieved [random meaningless bytes] from example.car with CID [bafkreihwkf6mtnjobdqrkiksr7qhp6tiiqywux64aylunbvmfhzeql2coa]\n```\n\nSee the [examples](./examples) directory for more.\n\n## Usage\n\n`@ipld/car` is consumed through factory methods on its different classes. Each\nclass represents a discrete set of functionality. You should select the classes\nthat make the most sense for your use-case.\n\nPlease be aware that `@ipld/car` **does not validate** that block data matches\nthe paired CIDs when reading a CAR. See the\n[verify-car.js](./examples/verify-car.js) example for one possible approach to\nvalidating blocks as they are read. Any CID verification requires that the hash\nfunction that was used to generate the CID be available, the CAR format does\nnot restrict the allowable multihashes.\n\n### [`CarReader`](#CarReader)\n\nThe basic `CarReader` class is consumed via:\n\n```js\nimport { CarReader } from '@ipld/car/reader'\nimport { CarBufferReader } from '@ipld/car/buffer-reader'\n```\n\nOr alternatively: `import { CarReader } from '@ipld/car'`. CommonJS `require`\nwill also work for the same import paths and references.\n\n`CarReader` is useful for relatively small CAR archives as it buffers the\nentirety of the archive in memory to provide access to its data. This class is\nalso suitable in a browser environment. The `CarReader` class provides\nrandom-access [`get(key)`](#CarReader_get) and [`has(key)`](#CarReader_has)\nmethods as well as iterators for [`blocks()`](#CarReader_blocks)] and\n[`cids()`](#CarReader_cids)].\n\n`CarReader` can be instantiated from a\n[single `Uint8Array`](#CarReader__fromBytes) or from\n[an `AsyncIterable`](#CarReader__fromIterable) of `Uint8Array`s (note that\nNode.js streams are `AsyncIterable`s and can be consumed in this way).\n\n`CarBufferReader` works exactly the same way as `CarReader` but all methods are synchronous.\n\n### [`CarIndexedReader`](#CarIndexedReader)\n\nThe `CarIndexedReader` class is a special form of `CarReader` and can be\nconsumed in **Node.js only** (not in the browser) via:\n\n```js\nimport { CarIndexedReader } from '@ipld/car/indexed-reader'\n```\n\nOr alternatively: `import { CarIndexedReader } from '@ipld/car'`. CommonJS\n`require` will also work for the same import paths and references.\n\nA `CarIndexedReader` provides the same functionality as `CarReader` but is\ninstantiated from [a path to a CAR file](#CarIndexedReader__fromFile) and also\nadds a [`close()`](#CarWriter_close) method that must be called when the reader\nis no longer required, to clean up resources.\n\n`CarIndexedReader` performs a single full-scan of a CAR file, collecting a list\nof `CID`s and their block positions in the archive. It then performs\nrandom-access reads when blocks are requested via `get()` and the `blocks()` and\n`cids()` iterators.\n\nThis class may be sutiable for random-access (primarily via `has()` and `get()`)\nto relatively large CAR files.\n\n### [`CarBlockIterator`](#CarBlockIterator) and [`CarCIDIterator`](#CarCIDIterator)\n\n```js\nimport { CarBlockIterator } from '@ipld/car/iterator'\n// or\nimport { CarCIDIterator } from '@ipld/car/iterator'\n```\n\nOr alternatively:\n`import { CarBlockIterator, CarCIDIterator } from '@ipld/car'`. CommonJS\n`require` will also work for the same import paths and references.\n\nThese two classes provide `AsyncIterable`s to the blocks or just the `CIDs`\ncontained within a CAR archive. These are efficient mechanisms for scanning an\nentire CAR archive, regardless of size, if random-access to blocks is not\nrequired.\n\n`CarBlockIterator` and `CarCIDIterator` can be instantiated from a\nsingle `Uint8Array` (see\n[`CarBlockIterator.fromBytes()`](#CarBlockIterator__fromBytes) and\n[`CarCIDIterator.fromBytes()`](#CarCIDIterator__fromBytes)) or from\nan `AsyncIterable` of `Uint8Array`s (see\n[`CarBlockIterator.fromIterable()`](#CarBlockIterator__fromIterable) and\n[`CarCIDIterator.fromIterable()`](#CarCIDIterator__fromIterable))—note that\nNode.js streams are `AsyncIterable`s and can be consumed in this way.\n\n### [`CarIndexer`](#CarIndexer)\n\nThe `CarIndexer` class can be used to scan a CAR archive and provide indexing\ndata on the contents. It can be consumed via:\n\n```js\nimport CarIndexer from '@ipld/car/indexed-reader'\n```\n\nOr alternatively: `import { CarIndexer } from '@ipld/car'`. CommonJS\n`require` will also work for the same import paths and references.\n\nThis class is used within [`CarIndexedReader`](#CarIndexedReader) and is only\nuseful in cases where an external index of a CAR needs to be generated and used.\n\nThe index data can also be used with\n[`CarReader.readRaw()`](#CarReader__readRaw)] to fetch block data directly from\na file descriptor using the index data for that block.\n\n### [`CarWriter`](#CarWriter)\n\nA `CarWriter` is used to create new CAR archives. It can be consumed via:\n\n```js\nimport CarWriter from '@ipld/car/writer'\n```\n\nOr alternatively: `import { CarWriter } from '@ipld/car'`. CommonJS\n`require` will also work for the same import paths and references.\n\n[Creation of a `CarWriter`](#CarWriter__create) involves a \"channel\", or a\n`{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair. The `writer` side\nof the channel is used to [`put()`](#CarWriter_put) blocks, while the `out`\nside of the channel emits the bytes that form the encoded CAR archive.\n\nIn Node.js, you can use the\n[`Readable.from()`](https://nodejs.org/api/stream.html#stream_stream_readable_from_iterable_options)\nAPI to convert the `out` `AsyncIterable` to a standard Node.js stream, or it can\nbe directly fed to a\n[`stream.pipeline()`](https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback).\n\n## API\n\n### Contents\n\n * [`class CarReader`](#CarReader)\n * [`async CarReader#getRoots()`](#CarReader_getRoots)\n * [`async CarReader#has(key)`](#CarReader_has)\n * [`async CarReader#get(key)`](#CarReader_get)\n * [`async * CarReader#blocks()`](#CarReader_blocks)\n * [`async * CarReader#cids()`](#CarReader_cids)\n * [`async CarReader.fromBytes(bytes)`](#CarReader__fromBytes)\n * [`async CarReader.fromIterable(asyncIterable)`](#CarReader__fromIterable)\n * [`async CarReader.readRaw(fd, blockIndex)`](#CarReader__readRaw)\n * [`class CarIndexedReader`](#CarIndexedReader)\n * [`async CarIndexedReader#getRoots()`](#CarIndexedReader_getRoots)\n * [`async CarIndexedReader#has(key)`](#CarIndexedReader_has)\n * [`async CarIndexedReader#get(key)`](#CarIndexedReader_get)\n * [`async * CarIndexedReader#blocks()`](#CarIndexedReader_blocks)\n * [`async * CarIndexedReader#cids()`](#CarIndexedReader_cids)\n * [`async CarIndexedReader#close()`](#CarIndexedReader_close)\n * [`async CarIndexedReader.fromFile(path)`](#CarIndexedReader__fromFile)\n * [`class CarBlockIterator`](#CarBlockIterator)\n * [`async CarBlockIterator#getRoots()`](#CarBlockIterator_getRoots)\n * [`async CarBlockIterator.fromBytes(bytes)`](#CarBlockIterator__fromBytes)\n * [`async CarBlockIterator.fromIterable(asyncIterable)`](#CarBlockIterator__fromIterable)\n * [`class CarCIDIterator`](#CarCIDIterator)\n * [`async CarCIDIterator#getRoots()`](#CarCIDIterator_getRoots)\n * [`async CarCIDIterator.fromBytes(bytes)`](#CarCIDIterator__fromBytes)\n * [`async CarCIDIterator.fromIterable(asyncIterable)`](#CarCIDIterator__fromIterable)\n * [`class CarIndexer`](#CarIndexer)\n * [`async CarIndexer#getRoots()`](#CarIndexer_getRoots)\n * [`async CarIndexer.fromBytes(bytes)`](#CarIndexer__fromBytes)\n * [`async CarIndexer.fromIterable(asyncIterable)`](#CarIndexer__fromIterable)\n * [`class CarWriter`](#CarWriter)\n * [`async CarWriter#put(block)`](#CarWriter_put)\n * [`async CarWriter#close()`](#CarWriter_close)\n * [`async CarWriter.create(roots)`](#CarWriter__create)\n * [`async CarWriter.createAppender()`](#CarWriter__createAppender)\n * [`async CarWriter.updateRootsInBytes(bytes, roots)`](#CarWriter__updateRootsInBytes)\n * [`async CarWriter.updateRootsInFile(fd, roots)`](#CarWriter__updateRootsInFile)\n * [`class CarBufferWriter`](#CarBufferWriter)\n * [`CarBufferWriter#addRoot(root, options)`](#CarBufferWriter_addRoot)\n * [`CarBufferWriter#write(block)`](#CarBufferWriter_write)\n * [`CarBufferWriter#close([options])`](#CarBufferWriter_close)\n * [`CarBufferWriter.blockLength(Block)`](#CarBufferWriter__blockLength__Block__)\n * [`CarBufferWriter.calculateHeaderLength(rootLengths)`](#CarBufferWriter__calculateHeaderLength__rootLengths__)\n * [`CarBufferWriter.headerLength({ roots })`](#CarBufferWriter__headerLength______roots______)\n * [`CarBufferWriter.estimateHeaderLength(rootCount[, rootByteLength])`](#CarBufferWriter__estimateHeaderLength__rootCount______rootByteLength____)\n * [`CarBufferWriter.createWriter(buffer[, options])`](#CarBufferWriter__createWriter__buffer______options____)\n * [`async decoder.readHeader(reader)`](#async__decoder__readHeader__reader__)\n * [`async decoder.readBlockHead(reader)`](#async__decoder__readBlockHead__reader__)\n * [`decoder.createDecoder(reader)`](#decoder__createDecoder__reader__)\n * [`decoder.bytesReader(bytes)`](#decoder__bytesReader__bytes__)\n * [`decoder.asyncIterableReader(asyncIterable)`](#decoder__asyncIterableReader__asyncIterable__)\n * [`decoder.limitReader(reader, byteLimit)`](#decoder__limitReader__reader____byteLimit__)\n * [`class CarBufferReader`](#CarBufferReader)\n * [`CarBufferReader#getRoots()`](#CarBufferReader_getRoots)\n * [`CarBufferReader#has(key)`](#CarBufferReader_has)\n * [`CarBufferReader#get(key)`](#CarBufferReader_get)\n * [`CarBufferReader#blocks()`](#CarBufferReader_blocks)\n * [`CarBufferReader#cids()`](#CarBufferReader_cids)\n * [`CarBufferReader.fromBytes(bytes)`](#CarBufferReader__fromBytes)\n * [`CarBufferReader.readRaw(fd, blockIndex)`](#CarBufferReader__readRaw)\n\n<a name=\"CarReader\"></a>\n### `class CarReader`\n\nProperties:\n\n* `version` `(number)`: The version number of the CAR referenced by this\n  reader (should be `1` or `2`).\n\nProvides blockstore-like access to a CAR.\n\nImplements the `RootsReader` interface:\n[`getRoots()`](#CarReader__getRoots). And the `BlockReader` interface:\n[`get()`](#CarReader__get), [`has()`](#CarReader__has),\n[`blocks()`](#CarReader__blocks) (defined as a `BlockIterator`) and\n[`cids()`](#CarReader__cids) (defined as a `CIDIterator`).\n\nLoad this class with either `import { CarReader } from '@ipld/car/reader'`\n(`const { CarReader } = require('@ipld/car/reader')`). Or\n`import { CarReader } from '@ipld/car'` (`const { CarReader } = require('@ipld/car')`).\nThe former will likely result in smaller bundle sizes where this is\nimportant.\n\n<a name=\"CarReader_getRoots\"></a>\n### `async CarReader#getRoots()`\n\n* Returns:  `Promise<CID[]>`\n\nGet the list of roots defined by the CAR referenced by this reader. May be\nzero or more `CID`s.\n\n<a name=\"CarReader_has\"></a>\n### `async CarReader#has(key)`\n\n* `key` `(CID)`\n\n* Returns:  `Promise<boolean>`\n\nCheck whether a given `CID` exists within the CAR referenced by this\nreader.\n\n<a name=\"CarReader_get\"></a>\n### `async CarReader#get(key)`\n\n* `key` `(CID)`\n\n* Returns:  `Promise<(Block|undefined)>`\n\nFetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR\nreferenced by this reader matching the provided `CID`. In the case where\nthe provided `CID` doesn't exist within the CAR, `undefined` will be\nreturned.\n\n<a name=\"CarReader_blocks\"></a>\n### `async * CarReader#blocks()`\n\n* Returns:  `AsyncGenerator<Block>`\n\nReturns a `BlockIterator` (`AsyncIterable<Block>`) that iterates over all\nof the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within\nthe CAR referenced by this reader.\n\n<a name=\"CarReader_cids\"></a>\n### `async * CarReader#cids()`\n\n* Returns:  `AsyncGenerator<CID>`\n\nReturns a `CIDIterator` (`AsyncIterable<CID>`) that iterates over all of\nthe `CID`s contained within the CAR referenced by this reader.\n\n<a name=\"CarReader__fromBytes\"></a>\n### `async CarReader.fromBytes(bytes)`\n\n* `bytes` `(Uint8Array)`\n\n* Returns:  `Promise<CarReader>`\n\nInstantiate a [`CarReader`](#CarReader) from a `Uint8Array` blob. This performs a\ndecode fully in memory and maintains the decoded state in memory for full\naccess to the data via the `CarReader` API.\n\n<a name=\"CarReader__fromIterable\"></a>\n### `async CarReader.fromIterable(asyncIterable)`\n\n* `asyncIterable` `(AsyncIterable<Uint8Array>)`\n\n* Returns:  `Promise<CarReader>`\n\nInstantiate a [`CarReader`](#CarReader) from a `AsyncIterable<Uint8Array>`, such as\na [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\nThis performs a decode fully in memory and maintains the decoded state in\nmemory for full access to the data via the `CarReader` API.\n\nCare should be taken for large archives; this API may not be appropriate\nwhere memory is a concern or the archive is potentially larger than the\namount of memory that the runtime can handle.\n\n<a name=\"CarReader__readRaw\"></a>\n### `async CarReader.readRaw(fd, blockIndex)`\n\n* `fd` `(fs.promises.FileHandle|number)`: A file descriptor from the\n  Node.js `fs` module. Either an integer, from `fs.open()` or a `FileHandle`\n  from `fs.promises.open()`.\n* `blockIndex` `(BlockIndex)`: An index pointing to the location of the\n  Block required. This `BlockIndex` should take the form:\n  `{cid:CID, blockLength:number, blockOffset:number}`.\n\n* Returns:  `Promise<Block>`: A `{ cid:CID, bytes:Uint8Array }` pair.\n\nReads a block directly from a file descriptor for an open CAR file. This\nfunction is **only available in Node.js** and not a browser environment.\n\nThis function can be used in connection with [`CarIndexer`](#CarIndexer) which emits\nthe `BlockIndex` objects that are required by this function.\n\nThe user is responsible for opening and closing the file used in this call.\n\n<a name=\"CarIndexedReader\"></a>\n### `class CarIndexedReader`\n\nProperties:\n\n* `version` `(number)`: The version number of the CAR referenced by this\n  reader (should be `1`).\n\nA form of [`CarReader`](#CarReader) that pre-indexes a CAR archive from a file and\nprovides random access to blocks within the file using the index data. This\nfunction is **only available in Node.js** and not a browser environment.\n\nFor large CAR files, using this form of `CarReader` can be singificantly more\nefficient in terms of memory. The index consists of a list of `CID`s and\ntheir location within the archive (see [`CarIndexer`](#CarIndexer)). For large numbers\nof blocks, this index can also occupy a significant amount of memory. In some\ncases it may be necessary to expand the memory capacity of a Node.js instance\nto allow this index to fit. (e.g. by running with\n`NODE_OPTIONS=\"--max-old-space-size=16384\"`).\n\nAs an `CarIndexedReader` instance maintains an open file descriptor for its\nCAR file, an additional [`CarReader#close`](#CarReader_close) method is attached. This\n_must_ be called to have full clean-up of resources after use.\n\nLoad this class with either\n`import { CarIndexedReader } from '@ipld/car/indexed-reader'`\n(`const { CarIndexedReader } = require('@ipld/car/indexed-reader')`). Or\n`import { CarIndexedReader } from '@ipld/car'`\n(`const { CarIndexedReader } = require('@ipld/car')`). The former will likely\nresult in smaller bundle sizes where this is important.\n\n<a name=\"CarIndexedReader_getRoots\"></a>\n### `async CarIndexedReader#getRoots()`\n\n* Returns:  `Promise<CID[]>`\n\nSee [`CarReader#getRoots`](#CarReader_getRoots)\n\n<a name=\"CarIndexedReader_has\"></a>\n### `async CarIndexedReader#has(key)`\n\n* `key` `(CID)`\n\n* Returns:  `Promise<boolean>`\n\nSee [`CarReader#has`](#CarReader_has)\n\n<a name=\"CarIndexedReader_get\"></a>\n### `async CarIndexedReader#get(key)`\n\n* `key` `(CID)`\n\n* Returns:  `Promise<(Block|undefined)>`\n\nSee [`CarReader#get`](#CarReader_get)\n\n<a name=\"CarIndexedReader_blocks\"></a>\n### `async * CarIndexedReader#blocks()`\n\n* Returns:  `AsyncGenerator<Block>`\n\nSee [`CarReader#blocks`](#CarReader_blocks)\n\n<a name=\"CarIndexedReader_cids\"></a>\n### `async * CarIndexedReader#cids()`\n\n* Returns:  `AsyncGenerator<CID>`\n\nSee [`CarReader#cids`](#CarReader_cids)\n\n<a name=\"CarIndexedReader_close\"></a>\n### `async CarIndexedReader#close()`\n\n* Returns:  `Promise<void>`\n\nClose the underlying file descriptor maintained by this `CarIndexedReader`.\nThis must be called for proper resource clean-up to occur.\n\n<a name=\"CarIndexedReader__fromFile\"></a>\n### `async CarIndexedReader.fromFile(path)`\n\n* `path` `(string)`\n\n* Returns:  `Promise<CarIndexedReader>`\n\nInstantiate an [`CarIndexedReader`](#CarIndexedReader) from a file with the provided\n`path`. The CAR file is first indexed with a full path that collects `CID`s\nand block locations. This index is maintained in memory. Subsequent reads\noperate on a read-only file descriptor, fetching the block from its in-file\nlocation.\n\nFor large archives, the initial indexing may take some time. The returned\n`Promise` will resolve only after this is complete.\n\n<a name=\"CarBlockIterator\"></a>\n### `class CarBlockIterator`\n\nProperties:\n\n* `version` `(number)`: The version number of the CAR referenced by this\n  iterator (should be `1`).\n\nProvides an iterator over all of the `Block`s in a CAR. Implements a\n`BlockIterator` interface, or `AsyncIterable<Block>`. Where a `Block` is\na `{ cid:CID, bytes:Uint8Array }` pair.\n\nAs an implementer of `AsyncIterable`, this class can be used directly in a\n`for await (const block of iterator) {}` loop. Where the `iterator` is\nconstructed using [`CarBlockiterator.fromBytes`](#CarBlockiterator__fromBytes) or\n[`CarBlockiterator.fromIterable`](#CarBlockiterator__fromIterable).\n\nAn iteration can only be performce _once_ per instantiation.\n\n`CarBlockIterator` also implements the `RootsReader` interface and provides\nthe [`getRoots()`](#CarBlockiterator__getRoots) method.\n\nLoad this class with either\n`import { CarBlockIterator } from '@ipld/car/iterator'`\n(`const { CarBlockIterator } = require('@ipld/car/iterator')`). Or\n`import { CarBlockIterator } from '@ipld/car'`\n(`const { CarBlockIterator } = require('@ipld/car')`).\n\n<a name=\"CarBlockIterator_getRoots\"></a>\n### `async CarBlockIterator#getRoots()`\n\n* Returns:  `Promise<CID[]>`\n\nGet the list of roots defined by the CAR referenced by this iterator. May be\nzero or more `CID`s.\n\n<a name=\"CarBlockIterator__fromBytes\"></a>\n### `async CarBlockIterator.fromBytes(bytes)`\n\n* `bytes` `(Uint8Array)`\n\n* Returns:  `Promise<CarBlockIterator>`\n\nInstantiate a [`CarBlockIterator`](#CarBlockIterator) from a `Uint8Array` blob. Rather\nthan decoding the entire byte array prior to returning the iterator, as in\n[`CarReader.fromBytes`](#CarReader__fromBytes), only the header is decoded and the remainder\nof the CAR is parsed as the `Block`s as yielded.\n\n<a name=\"CarBlockIterator__fromIterable\"></a>\n### `async CarBlockIterator.fromIterable(asyncIterable)`\n\n* `asyncIterable` `(AsyncIterable<Uint8Array>)`\n\n* Returns:  `Promise<CarBlockIterator>`\n\nInstantiate a [`CarBlockIterator`](#CarBlockIterator) from a `AsyncIterable<Uint8Array>`,\nsuch as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\nRather than decoding the entire byte array prior to returning the iterator,\nas in [`CarReader.fromIterable`](#CarReader__fromIterable), only the header is decoded and the\nremainder of the CAR is parsed as the `Block`s as yielded.\n\n<a name=\"CarCIDIterator\"></a>\n### `class CarCIDIterator`\n\nProperties:\n\n* `version` `(number)`: The version number of the CAR referenced by this\n  iterator (should be `1`).\n\nProvides an iterator over all of the `CID`s in a CAR. Implements a\n`CIDIterator` interface, or `AsyncIterable<CID>`. Similar to\n[`CarBlockIterator`](#CarBlockIterator) but only yields the CIDs in the CAR.\n\nAs an implementer of `AsyncIterable`, this class can be used directly in a\n`for await (const cid of iterator) {}` loop. Where the `iterator` is\nconstructed using [`CarCIDiterator.fromBytes`](#CarCIDiterator__fromBytes) or\n[`CarCIDiterator.fromIterable`](#CarCIDiterator__fromIterable).\n\nAn iteration can only be performce _once_ per instantiation.\n\n`CarCIDIterator` also implements the `RootsReader` interface and provides\nthe [`getRoots()`](#CarCIDiterator__getRoots) method.\n\nLoad this class with either\n`import { CarCIDIterator } from '@ipld/car/iterator'`\n(`const { CarCIDIterator } = require('@ipld/car/iterator')`). Or\n`import { CarCIDIterator } from '@ipld/car'`\n(`const { CarCIDIterator } = require('@ipld/car')`).\n\n<a name=\"CarCIDIterator_getRoots\"></a>\n### `async CarCIDIterator#getRoots()`\n\n* Returns:  `Promise<CID[]>`\n\nGet the list of roots defined by the CAR referenced by this iterator. May be\nzero or more `CID`s.\n\n<a name=\"CarCIDIterator__fromBytes\"></a>\n### `async CarCIDIterator.fromBytes(bytes)`\n\n* `bytes` `(Uint8Array)`\n\n* Returns:  `Promise<CarCIDIterator>`\n\nInstantiate a [`CarCIDIterator`](#CarCIDIterator) from a `Uint8Array` blob. Rather\nthan decoding the entire byte array prior to returning the iterator, as in\n[`CarReader.fromBytes`](#CarReader__fromBytes), only the header is decoded and the remainder\nof the CAR is parsed as the `CID`s as yielded.\n\n<a name=\"CarCIDIterator__fromIterable\"></a>\n### `async CarCIDIterator.fromIterable(asyncIterable)`\n\n* `asyncIterable` `(AsyncIterable<Uint8Array>)`\n\n* Returns:  `Promise<CarCIDIterator>`\n\nInstantiate a [`CarCIDIterator`](#CarCIDIterator) from a `AsyncIterable<Uint8Array>`,\nsuch as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\nRather than decoding the entire byte array prior to returning the iterator,\nas in [`CarReader.fromIterable`](#CarReader__fromIterable), only the header is decoded and the\nremainder of the CAR is parsed as the `CID`s as yielded.\n\n<a name=\"CarIndexer\"></a>\n### `class CarIndexer`\n\nProperties:\n\n* `version` `(number)`: The version number of the CAR referenced by this\n  reader (should be `1`).\n\nProvides an iterator over all of the `Block`s in a CAR, returning their CIDs\nand byte-location information. Implements an `AsyncIterable<BlockIndex>`.\nWhere a `BlockIndex` is a\n`{ cid:CID, length:number, offset:number, blockLength:number, blockOffset:number }`.\n\nAs an implementer of `AsyncIterable`, this class can be used directly in a\n`for await (const blockIndex of iterator) {}` loop. Where the `iterator` is\nconstructed using [`CarIndexer.fromBytes`](#CarIndexer__fromBytes) or\n[`CarIndexer.fromIterable`](#CarIndexer__fromIterable).\n\nAn iteration can only be performce _once_ per instantiation.\n\n`CarIndexer` also implements the `RootsReader` interface and provides\nthe [`getRoots()`](#CarIndexer__getRoots) method.\n\nLoad this class with either\n`import { CarIndexer } from '@ipld/car/indexer'`\n(`const { CarIndexer } = require('@ipld/car/indexer')`). Or\n`import { CarIndexer } from '@ipld/car'`\n(`const { CarIndexer } = require('@ipld/car')`). The former will likely\nresult in smaller bundle sizes where this is important.\n\n<a name=\"CarIndexer_getRoots\"></a>\n### `async CarIndexer#getRoots()`\n\n* Returns:  `Promise<CID[]>`\n\nGet the list of roots defined by the CAR referenced by this indexer. May be\nzero or more `CID`s.\n\n<a name=\"CarIndexer__fromBytes\"></a>\n### `async CarIndexer.fromBytes(bytes)`\n\n* `bytes` `(Uint8Array)`\n\n* Returns:  `Promise<CarIndexer>`\n\nInstantiate a [`CarIndexer`](#CarIndexer) from a `Uint8Array` blob. Only the header\nis decoded initially, the remainder is processed and emitted via the\niterator as it is consumed.\n\n<a name=\"CarIndexer__fromIterable\"></a>\n### `async CarIndexer.fromIterable(asyncIterable)`\n\n* `asyncIterable` `(AsyncIterable<Uint8Array>)`\n\n* Returns:  `Promise<CarIndexer>`\n\nInstantiate a [`CarIndexer`](#CarIndexer) from a `AsyncIterable<Uint8Array>`,\nsuch as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\nis decoded initially, the remainder is processed and emitted via the\niterator as it is consumed.\n\n<a name=\"CarWriter\"></a>\n### `class CarWriter`\n\nProvides a writer interface for the creation of CAR files.\n\nCreation of a `CarWriter` involves the instatiation of an input / output pair\nin the form of a `WriterChannel`, which is a\n`{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair. These two\ncomponents form what can be thought of as a stream-like interface. The\n`writer` component (an instantiated `CarWriter`), has methods to\n[`put()`](#CarWriter__put) new blocks and [`close()`](#CarWriter__put)\nthe writing operation (finalising the CAR archive). The `out` component is\nan `AsyncIterable` that yields the bytes of the archive. This can be\nredirected to a file or other sink. In Node.js, you can use the\n[`Readable.from()`](https://nodejs.org/api/stream.html#stream_stream_readable_from_iterable_options)\nAPI to convert this to a standard Node.js stream, or it can be directly fed\nto a\n[`stream.pipeline()`](https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback).\n\nThe channel will provide a form of backpressure. The `Promise` from a\n`write()` won't resolve until the resulting data is drained from the `out`\niterable.\n\nIt is also possible to ignore the `Promise` from `write()` calls and allow\nthe generated data to queue in memory. This should be avoided for large CAR\narchives of course due to the memory costs and potential for memory overflow.\n\nLoad this class with either\n`import { CarWriter } from '@ipld/car/writer'`\n(`const { CarWriter } = require('@ipld/car/writer')`). Or\n`import { CarWriter } from '@ipld/car'`\n(`const { CarWriter } = require('@ipld/car')`). The former will likely\nresult in smaller bundle sizes where this is important.\n\n<a name=\"CarWriter_put\"></a>\n### `async CarWriter#put(block)`\n\n* `block` `(Block)`: A `{ cid:CID, bytes:Uint8Array }` pair.\n\n* Returns:  `Promise<void>`: The returned promise will only resolve once the\n  bytes this block generates are written to the `out` iterable.\n\nWrite a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) to the archive.\n\n<a name=\"CarWriter_close\"></a>\n### `async CarWriter#close()`\n\n* Returns:  `Promise<void>`\n\nFinalise the CAR archive and signal that the `out` iterable should end once\nany remaining bytes are written.\n\n<a name=\"CarWriter__create\"></a>\n### `async CarWriter.create(roots)`\n\n* `roots` `(CID[]|CID|void)`\n\n* Returns:  `WriterChannel`: The channel takes the form of\n  `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.\n\nCreate a new CAR writer \"channel\" which consists of a\n`{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.\n\n<a name=\"CarWriter__createAppender\"></a>\n### `async CarWriter.createAppender()`\n\n* Returns:  `WriterChannel`: The channel takes the form of\n  `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.\n\nCreate a new CAR appender \"channel\" which consists of a\n`{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.\nThis appender does not consider roots and does not produce a CAR header.\nIt is designed to append blocks to an _existing_ CAR archive. It is\nexpected that `out` will be concatenated onto the end of an existing\narchive that already has a properly formatted header.\n\n<a name=\"CarWriter__updateRootsInBytes\"></a>\n### `async CarWriter.updateRootsInBytes(bytes, roots)`\n\n* `bytes` `(Uint8Array)`\n* `roots` `(CID[])`: A new list of roots to replace the existing list in\n  the CAR header. The new header must take up the same number of bytes as the\n  existing header, so the roots should collectively be the same byte length\n  as the existing roots.\n\n* Returns:  `Promise<Uint8Array>`\n\nUpdate the list of roots in the header of an existing CAR as represented\nin a Uint8Array.\n\nThis operation is an _overwrite_, the total length of the CAR will not be\nmodified. A rejection will occur if the new header will not be the same\nlength as the existing header, in which case the CAR will not be modified.\nIt is the responsibility of the user to ensure that the roots being\nreplaced encode as the same length as the new roots.\n\nThe byte array passed in an argument will be modified and also returned\nupon successful modification.\n\n<a name=\"CarWriter__updateRootsInFile\"></a>\n### `async CarWriter.updateRootsInFile(fd, roots)`\n\n* `fd` `(fs.promises.FileHandle|number)`: A file descriptor from the\n  Node.js `fs` module. Either an integer, from `fs.open()` or a `FileHandle`\n  from `fs.promises.open()`.\n* `roots` `(CID[])`: A new list of roots to replace the existing list in\n  the CAR header. The new header must take up the same number of bytes as the\n  existing header, so the roots should collectively be the same byte length\n  as the existing roots.\n\n* Returns:  `Promise<void>`\n\nUpdate the list of roots in the header of an existing CAR file. The first\nargument must be a file descriptor for CAR file that is open in read and\nwrite mode (not append), e.g. `fs.open` or `fs.promises.open` with `'r+'`\nmode.\n\nThis operation is an _overwrite_, the total length of the CAR will not be\nmodified. A rejection will occur if the new header will not be the same\nlength as the existing header, in which case the CAR will not be modified.\nIt is the responsibility of the user to ensure that the roots being\nreplaced encode as the same length as the new roots.\n\nThis function is **only available in Node.js** and not a browser\nenvironment.\n\n<a name=\"CarBufferWriter\"></a>\n### `class CarBufferWriter`\n\nA simple CAR writer that writes to a pre-allocated buffer.\n\n<a name=\"CarBufferWriter_addRoot\"></a>\n### `CarBufferWriter#addRoot(root, options)`\n\n* `root` `(CID)`\n* `options`\n\n* Returns:  `CarBufferWriter`\n\nAdd a root to this writer, to be used to create a header when the CAR is\nfinalized with [`close()`](#CarBufferWriter__close)\n\n<a name=\"CarBufferWriter_write\"></a>\n### `CarBufferWriter#write(block)`\n\n* `block` `(Block)`: A `{ cid:CID, bytes:Uint8Array }` pair.\n\n* Returns:  `CarBufferWriter`\n\nWrite a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) to the archive.\nThrows if there is not enough capacity.\n\n<a name=\"CarBufferWriter_close\"></a>\n### `CarBufferWriter#close([options])`\n\n* `options` `(object, optional)`\n  * `options.resize` `(boolean, optional)`\n\n* Returns:  `Uint8Array`\n\nFinalize the CAR and return it as a `Uint8Array`.\n\n<a name=\"CarBufferWriter__blockLength__Block__\"></a>\n### `CarBufferWriter.blockLength(Block)`\n\n* `block` `(Block)`\n\n* Returns:  `number`\n\nCalculates number of bytes required for storing given block in CAR. Useful in\nestimating size of an `ArrayBuffer` for the `CarBufferWriter`.\n\n<a name=\"CarBufferWriter__calculateHeaderLength__rootLengths__\"></a>\n### `CarBufferWriter.calculateHeaderLength(rootLengths)`\n\n* `rootLengths` `(number[])`\n\n* Returns:  `number`\n\nCalculates header size given the array of byteLength for roots.\n\n<a name=\"CarBufferWriter__headerLength______roots______\"></a>\n### `CarBufferWriter.headerLength({ roots })`\n\n* `options` `(object)`\n  * `options.roots` `(CID[])`\n\n* Returns:  `number`\n\nCalculates header size given the array of roots.\n\n<a name=\"CarBufferWriter__estimateHeaderLength__rootCount______rootByteLength____\"></a>\n### `CarBufferWriter.estimateHeaderLength(rootCount[, rootByteLength])`\n\n* `rootCount` `(number)`\n* `rootByteLength` `(number, optional)`\n\n* Returns:  `number`\n\nEstimates header size given a count of the roots and the expected byte length\nof the root CIDs. The default length works for a standard CIDv1 with a\nsingle-byte multihash code, such as SHA2-256 (i.e. the most common CIDv1).\n\n<a name=\"CarBufferWriter__createWriter__buffer______options____\"></a>\n### `CarBufferWriter.createWriter(buffer[, options])`\n\n* `buffer` `(ArrayBuffer)`\n* `options` `(object, optional)`\n  * `options.roots` `(CID[], optional)`\n  * `options.byteOffset` `(number, optional)`\n  * `options.byteLength` `(number, optional)`\n  * `options.headerSize` `(number, optional)`\n\n* Returns:  `CarBufferWriter`\n\nCreates synchronous CAR writer that can be used to encode blocks into a given\nbuffer. Optionally you could pass `byteOffset` and `byteLength` to specify a\nrange inside buffer to write into. If car file is going to have `roots` you\nneed to either pass them under `options.roots` (from which header size will\nbe calculated) or provide `options.headerSize` to allocate required space\nin the buffer. You may also provide known `roots` and `headerSize` to\nallocate space for the roots that may not be known ahead of time.\n\nNote: Incorrect `headerSize` may lead to copying bytes inside a buffer\nwhich will have a negative impact on performance.\n\n<a name=\"async__decoder__readHeader__reader__\"></a>\n### `async decoder.readHeader(reader)`\n\n* `reader` `(BytesReader)`\n* `strictVersion` `(number, optional)`\n\n* Returns:  `Promise<(CarHeader|CarV2Header)>`\n\nReads header data from a `BytesReader`. The header may either be in the form\nof a `CarHeader` or `CarV2Header` depending on the CAR being read.\n\n<a name=\"async__decoder__readBlockHead__reader__\"></a>\n### `async decoder.readBlockHead(reader)`\n\n* `reader` `(BytesReader)`\n\n* Returns:  `Promise<BlockHeader>`\n\nReads the leading data of an individual block from CAR data from a\n`BytesReader`. Returns a `BlockHeader` object which contains\n`{ cid, length, blockLength }` which can be used to either index the block\nor read the block binary data.\n\n<a name=\"decoder__createDecoder__reader__\"></a>\n### `decoder.createDecoder(reader)`\n\n* `reader` `(BytesReader)`\n\n* Returns:  `CarDecoder`\n\nCreates a `CarDecoder` from a `BytesReader`. The `CarDecoder` is as async\ninterface that will consume the bytes from the `BytesReader` to yield a\n`header()` and either `blocks()` or `blocksIndex()` data.\n\n<a name=\"decoder__bytesReader__bytes__\"></a>\n### `decoder.bytesReader(bytes)`\n\n* `bytes` `(Uint8Array)`\n\n* Returns:  `BytesReader`\n\nCreates a `BytesReader` from a `Uint8Array`.\n\n<a name=\"decoder__asyncIterableReader__asyncIterable__\"></a>\n### `decoder.asyncIterableReader(asyncIterable)`\n\n* `asyncIterable` `(AsyncIterable<Uint8Array>)`\n\n* Returns:  `BytesReader`\n\nCreates a `BytesReader` from an `AsyncIterable<Uint8Array>`, which allows for\nconsumption of CAR data from a streaming source.\n\n<a name=\"decoder__limitReader__reader____byteLimit__\"></a>\n### `decoder.limitReader(reader, byteLimit)`\n\n* `reader` `(BytesReader)`\n* `byteLimit` `(number)`\n\n* Returns:  `BytesReader`\n\nWraps a `BytesReader` in a limiting `BytesReader` which limits maximum read\nto `byteLimit` bytes. It _does not_ update `pos` of the original\n`BytesReader`.\n\n<a name=\"CarBufferReader\"></a>\n### `class CarBufferReader`\n\nProperties:\n\n* `version` `(number)`: The version number of the CAR referenced by this\n  reader (should be `1` or `2`).\n\nProvides blockstore-like access to a CAR.\n\nImplements the `RootsBufferReader` interface:\n[`getRoots()`](#ICarBufferReader__getRoots). And the `BlockBufferReader` interface:\n[`get()`](#ICarBufferReader__get), [`has()`](#ICarBufferReader__has),\n[`blocks()`](#ICarBufferReader__blocks) and\n[`cids()`](#ICarBufferReader__cids).\n\nLoad this class with either `import { CarBufferReader } from '@ipld/car/buffer-reader'`\n(`const { CarBufferReader } = require('@ipld/car/buffer-reader')`). Or\n`import { CarBufferReader } from '@ipld/car'` (`const { CarBufferReader } = require('@ipld/car')`).\nThe former will likely result in smaller bundle sizes where this is\nimportant.\n\n<a name=\"CarBufferReader_getRoots\"></a>\n### `CarBufferReader#getRoots()`\n\n* Returns:  `CID[]`\n\nGet the list of roots defined by the CAR referenced by this reader. May be\nzero or more `CID`s.\n\n<a name=\"CarBufferReader_has\"></a>\n### `CarBufferReader#has(key)`\n\n* `key` `(CID)`\n\n* Returns:  `boolean`\n\nCheck whether a given `CID` exists within the CAR referenced by this\nreader.\n\n<a name=\"CarBufferReader_get\"></a>\n### `CarBufferReader#get(key)`\n\n* `key` `(CID)`\n\n* Returns:  `Block|undefined`\n\nFetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR\nreferenced by this reader matching the provided `CID`. In the case where\nthe provided `CID` doesn't exist within the CAR, `undefined` will be\nreturned.\n\n<a name=\"CarBufferReader_blocks\"></a>\n### `CarBufferReader#blocks()`\n\n* Returns:  `Block[]`\n\nReturns a `Block[]` of the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within\nthe CAR referenced by this reader.\n\n<a name=\"CarBufferReader_cids\"></a>\n### `CarBufferReader#cids()`\n\n* Returns:  `CID[]`\n\nReturns a `CID[]` of the `CID`s contained within the CAR referenced by this reader.\n\n<a name=\"CarBufferReader__fromBytes\"></a>\n### `CarBufferReader.fromBytes(bytes)`\n\n* `bytes` `(Uint8Array)`\n\n* Returns:  `CarBufferReader`\n\nInstantiate a [`CarBufferReader`](#CarBufferReader) from a `Uint8Array` blob. This performs a\ndecode fully in memory and maintains the decoded state in memory for full\naccess to the data via the `CarReader` API.\n\n<a name=\"CarBufferReader__readRaw\"></a>\n### `CarBufferReader.readRaw(fd, blockIndex)`\n\n* `fd` `(number)`: A file descriptor from the\n  Node.js `fs` module. An integer, from `fs.open()`.\n* `blockIndex` `(BlockIndex)`: An index pointing to the location of the\n  Block required. This `BlockIndex` should take the form:\n  `{cid:CID, blockLength:number, blockOffset:number}`.\n\n* Returns:  `Block`: A `{ cid:CID, bytes:Uint8Array }` pair.\n\nReads a block directly from a file descriptor for an open CAR file. This\nfunction is **only available in Node.js** and not a browser environment.\n\nThis function can be used in connection with [`CarIndexer`](#CarIndexer) which emits\nthe `BlockIndex` objects that are required by this function.\n\nThe user is responsible for opening and closing the file used in this call.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@ipld/car/-/car-5.1.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@ipld/car/-/car-5.1.1.tgz",
    "hash": "",
    "integrity": "sha512-HoFTUqUJL9cPGhC9qRmHCvamfIsj1JllQSQ/Xu9/KN/VNJp8To9Ms4qiZPEMOwcrNFclfYqrahjGYbf4KL/d9A==",
    "registry": "npm",
    "packageName": "@ipld/car",
    "cacheIntegrity": "sha512-HoFTUqUJL9cPGhC9qRmHCvamfIsj1JllQSQ/Xu9/KN/VNJp8To9Ms4qiZPEMOwcrNFclfYqrahjGYbf4KL/d9A== sha1-FKJtyXxHg63kkayBH2GIUlm5114="
  },
  "registry": "npm",
  "hash": "1e815352a5092fd70f1a10bda919870af6a67c8b23d4996541243f5eef7f28dfd5349a7c4e8f4cb38aa264f10c3b072b3457257d8aab6a18c661b7f828bfddf4"
}