{
  "manifest": {
    "name": "pure-rand",
    "version": "5.0.5",
    "description": " Pure random number generator written in TypeScript",
    "type": "commonjs",
    "main": "lib/pure-rand.js",
    "exports": {
      ".": {
        "require": "./lib/pure-rand.js",
        "import": "./lib/esm/pure-rand.js",
        "types": "./lib/types/pure-rand.d.ts",
        "default": "./lib/esm/pure-rand.js"
      }
    },
    "module": "lib/esm/pure-rand.js",
    "types": "lib/types/pure-rand.d.ts",
    "files": [
      "lib"
    ],
    "sideEffects": false,
    "packageManager": "yarn@3.3.0",
    "scripts": {
      "format:check": "prettier --list-different \"**/*.{js,ts}\"",
      "format": "prettier --write \"**/*.{js,ts}\"",
      "build": "tsc && tsc -p ./tsconfig.declaration.json",
      "build:esm": "tsc --module es2015 --outDir lib/esm --moduleResolution node && cp package.esm-template.json lib/esm/package.json",
      "build:prod": "yarn build && yarn build:esm && node postbuild/main.cjs",
      "build:prod-ci": "cross-env EXPECT_GITHUB_SHA=true yarn build:prod",
      "test": "jest --config jest.config.js --coverage",
      "build:bench:old": "tsc --outDir lib-reference/",
      "build:bench:new": "tsc --outDir lib-test/",
      "bench": "node perf/benchmark.cjs"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dubzzz/pure-rand.git"
    },
    "author": {
      "name": "Nicolas DUBIEN",
      "email": "github@dubien.org"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dubzzz/pure-rand/issues"
    },
    "homepage": "https://github.com/dubzzz/pure-rand#readme",
    "devDependencies": {
      "@types/jest": "^27.0.1",
      "@types/node": "^18.6.3",
      "cross-env": "^7.0.3",
      "fast-check": "^3.1.1",
      "jest": "^26.1.0",
      "prettier": "2.7.1",
      "replace-in-file": "^6.1.0",
      "source-map-support": "^0.5.16",
      "tinybench": "^2.3.1",
      "ts-jest": "^26.1.2",
      "ts-node": "^10.0.0",
      "typescript": "^4.0.2"
    },
    "keywords": [
      "pure random",
      "random number generator"
    ],
    "funding": [
      {
        "type": "individual",
        "url": "https://github.com/sponsors/dubzzz"
      },
      {
        "type": "opencollective",
        "url": "https://opencollective.com/fast-check"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-pure-rand-5.0.5-bda2a7f6a1fc0f284d78d78ca5902f26f2ad35cf-integrity/node_modules/pure-rand/package.json",
    "readmeFilename": "README.md",
    "readme": "# pure-rand\n#### Pure random number generator written in TypeScript\n\n[![Build Status](https://github.com/dubzzz/pure-rand/workflows/Build%20Status/badge.svg?branch=main)](https://github.com/dubzzz/pure-rand/actions)\n[![npm version](https://badge.fury.io/js/pure-rand.svg)](https://badge.fury.io/js/pure-rand)\n[![dependencies Status](https://david-dm.org/dubzzz/pure-rand/status.svg)](https://david-dm.org/dubzzz/pure-rand)\n[![devDependencies Status](https://david-dm.org/dubzzz/pure-rand/dev-status.svg)](https://david-dm.org/dubzzz/pure-rand?type=dev)\n\n[![codecov](https://codecov.io/gh/dubzzz/pure-rand/branch/main/graph/badge.svg?token=KYN5IQCGE5)](https://codecov.io/gh/dubzzz/pure-rand)\n[![Maintainability](https://api.codeclimate.com/v1/badges/7cb8cb395740446a3108/maintainability)](https://codeclimate.com/github/dubzzz/pure-rand/maintainability)\n\n## Getting started\n\n### In node\n\nInstall the module with: `npm install pure-rand`\n\nUnlike classical random number generators, `pure-rand` comes with a set of *pure* and *seeded* generators (implementing the interface [RandomGenerator](https://github.com/dubzzz/pure-rand/blob/main/src/generator/RandomGenerator.ts)).\nEach time a call to `.next()` method is done, the generator provides both the generated value and the next generator.\n\nAs a consequence, a given generator will always produce the same value. It can be called as many times as required without impacting its state. This ability makes it easier to replay code section relying on random without having to re-seed a new generator and replay the whole path to be in the same state.\n\n### In a web-page\n\nIn order to use `pure-rand` from a web-page, you have to reference the web-aware script as follow:\n\n```html\n<script type=\"module\">\n   import * as prand from \"https://unpkg.com/pure-rand/lib/esm/pure-rand.js\";\n   // prand is now available\n</script>\n```\n\nYou can also reference a precise version by setting the version you want in the url:\n\n```html\n<script type=\"module\">\n   import * as prand from \"https://unpkg.com/pure-rand@1.2.0/lib/esm/pure-rand.js\";\n   // prand is now available\n</script>\n```\n\n## Usage\n\n```javascript\nimport prand from 'pure-rand'\n\nconst seed = 42;\n\n// Instanciates a Mersenne Twister\n// random number generator with the seed=42\nconst gen1 = prand.mersenne(seed);\n\n// Build a random value `n` and the next generator `gen2`\n// the random value `n` is within the range:\n// gen1.min() (included) to gen1.max() (included)\nconst [n, gen2] = gen1.next();\n// Calling again next on gen1 will provide the very same output:\n// `n: number` and `gen2: RandomGenerator`\n\n// In order to generate values within range,\n// distributions are provided by the pure-rand\n\n// Like `.next()` method,\n// distributions take an incoming generator and extract a couple:\n// (n: number, nextGenerator: RandomGenerator)\n\n// The distribution built by the call to prand.uniformIntDistribution(0, 9)\n// generates uniformly integers within 0 (included) and 9 (included)\nconst [nRange, gen3] = prand.uniformIntDistribution(0, 9)(gen1);\n// Calling again the same Distribution with the same RandomGenerator\n// will provide the same output\n\n// Whenever you want to use the distribution only once you can directly call\n// prand.uniformIntDistribution(from, to, rng) which is totally equivalent to prand.uniformIntDistribution(from, to)(rng)\n// In terms of performances, the 3 parameters version is faster\nconst [nNoDistributionInstance, gen4] = prand.uniformIntDistribution(0, 9, gen3);\n\n// Some generators come with built-in jump\n// jump provides the ability to skip a very large number of intermediate values\n// Calling jump is recommended whenever you want to build non-overlapping subsequences\nconst gen4 = prand.xoroshiro128plus(seed);\nconst offsetGen4 = gen4.jump();\n// In the case of:\n// - xoroshiro128plus - jump is equivalent to 2^64 calls to next\n// - xorshift128plus  - jump is equivalent to 2^64 calls to next\n```\n\nModule import can also be done using one of the following syntaxes:\n\n```javascript\nimport * as prand from 'pure-rand';\nimport { mersenne } from 'pure-rand';\nconst prand = require('pure-rand');\nconst { mersenne } = require('pure-rand');\n```\n\n## Documentation\n\n### Random number generators\n\nAll the [RandomGenerator](https://github.com/dubzzz/pure-rand/blob/main/src/generator/) provided by `pure-rand` derive from the interface [RandomGenerator](https://github.com/dubzzz/pure-rand/blob/main/src/generator/RandomGenerator.ts) and are pure and seeded as described above.\n\nThe following generators are available:\n- `prand.xorshift128plus(seed: number)`: xorshift128+ generator whose values are within the range -0x80000000 to 0x7fffffff\n- `prand.xoroshiro128plus(seed: number)`: xoroshiro128+ generator whose values are within the range -0x80000000 to 0x7fffffff\n- `prand.mersenne(seed: number)`: Mersenne Twister generator whose values are within the range 0 to 0xffffffff\n- `prand.congruential(seed: number)`: Linear Congruential generator whose values are within the range 0 to 0x7fff\n- `prand.congruential32(seed: number)`: Linear Congruential generator whose values are within the range 0 to 0xffffffff\n\nSome helpers are also provided in order to ease the use of `RandomGenerator` instances:\n- `prand.generateN(rng: RandomGenerator, num: number): [number[], RandomGenerator]`: generates `num` random values using `rng` and return the next `RandomGenerator`\n- `prand.skipN(rng: RandomGenerator, num: number): RandomGenerator`: skips `num` random values and return the next `RandomGenerator`\n\n### Distributions\n\nAll the [Distribution](https://github.com/dubzzz/pure-rand/tree/main/src/distribution) take a `RandomGenerator` as input and produce a couple `(n: number, nextGenerator: RandomGenerator)`. A `Distribution` is defined as `type Distribution<T> = (rng: RandomGenerator) => [T, RandomGenerator];`.\n\nFor the moment, available `Distribution` are:\n- `prand.uniformIntDistribution(from: number, to: number): Distribution<number>`\n- `prand.uniformBigIntDistribution(from: bigint, to: bigint): Distribution<bigint>`\\*\n- `prand.uniformArrayIntDistribution(from: ArrayInt, to: ArrayInt): Distribution<ArrayInt>`\\*\\*\n\n\\*Requires your JavaScript interpreter to support bigint\n\n\\*\\*ArrayInt is an object having the structure `{sign, data}` with sign being either 1 or -1 and data an array of numbers between 0 (included) and 0xffffffff (included)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Nicolas DUBIEN\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pure-rand/-/pure-rand-5.0.5.tgz#bda2a7f6a1fc0f284d78d78ca5902f26f2ad35cf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pure-rand/-/pure-rand-5.0.5.tgz",
    "hash": "bda2a7f6a1fc0f284d78d78ca5902f26f2ad35cf",
    "integrity": "sha512-BwQpbqxSCBJVpamI6ydzcKqyFmnd5msMWUGvzXLm1aXvusbbgkbOto/EUPM00hjveJEaJtdbhUjKSzWRhQVkaw==",
    "registry": "npm",
    "packageName": "pure-rand",
    "cacheIntegrity": "sha512-BwQpbqxSCBJVpamI6ydzcKqyFmnd5msMWUGvzXLm1aXvusbbgkbOto/EUPM00hjveJEaJtdbhUjKSzWRhQVkaw== sha1-vaKn9qH8DyhNeNeMpZAvJvKtNc8="
  },
  "registry": "npm",
  "hash": "bda2a7f6a1fc0f284d78d78ca5902f26f2ad35cf"
}