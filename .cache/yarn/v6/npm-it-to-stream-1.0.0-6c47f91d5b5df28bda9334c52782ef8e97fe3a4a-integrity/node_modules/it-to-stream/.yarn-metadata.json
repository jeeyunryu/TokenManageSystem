{
  "manifest": {
    "name": "it-to-stream",
    "version": "1.0.0",
    "description": "Convert streaming iterables to Node.js streams",
    "main": "src/index.js",
    "browser": {
      "stream": "readable-stream"
    },
    "scripts": {
      "test": "ava test/*.test.js --verbose",
      "lint": "standard",
      "coverage": "nyc --reporter=text --reporter=lcov npm test"
    },
    "keywords": [
      "stream",
      "readablestream"
    ],
    "author": {
      "name": "Alan Shaw"
    },
    "license": "MIT",
    "dependencies": {
      "buffer": "^6.0.3",
      "fast-fifo": "^1.0.0",
      "get-iterator": "^1.0.2",
      "p-defer": "^3.0.0",
      "p-fifo": "^1.0.0",
      "readable-stream": "^3.6.0"
    },
    "devDependencies": {
      "ava": "^3.9.0",
      "it-pair": "^1.0.0",
      "nyc": "^15.1.0",
      "standard": "^16.0.3"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alanshaw/it-to-stream.git"
    },
    "bugs": {
      "url": "https://github.com/alanshaw/it-to-stream/issues"
    },
    "homepage": "https://github.com/alanshaw/it-to-stream#readme",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-it-to-stream-1.0.0-6c47f91d5b5df28bda9334c52782ef8e97fe3a4a-integrity/node_modules/it-to-stream/package.json",
    "readmeFilename": "README.md",
    "readme": "# it-to-stream\n\n[![Build Status](https://travis-ci.org/alanshaw/it-to-stream.svg?branch=master)](https://travis-ci.org/alanshaw/it-to-stream)\n[![dependencies Status](https://status.david-dm.org/gh/alanshaw/it-to-stream.svg)](https://david-dm.org/alanshaw/it-to-stream)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n> Convert streaming iterables to Node.js streams\n\n## Install\n\n```sh\nnpm i it-to-stream\n```\n\n## Usage\n\n```js\nconst toStream = require('it-to-stream')\n```\n\n### Convert source iterable to readable stream\n\n```js\n// A streaming iterable \"source\" is just an (async) iterable\nconst source = (async function * () {\n  for (const value of [1, 2, 3, 4]) yield Buffer.from(value.toString())\n})()\n\nconst readable = toStream.readable(source)\n\n// Now we have a readable stream, we can consume it by\nreadable.on('data', console.log)\n// or\nreadable.pipe(writable)\n// or\npipeline(readable, writable, err => console.log(err || 'done'))\n```\n\n### Convert sink iterable to writable stream\n\n```js\n// A streaming iterable \"sink\" is an (async) function that takes a \"source\"\n// and consumes it.\nconst sink = async source => {\n  for await (const chunk of source) {\n    console.log(chunk.toString())\n  }\n}\n\nconst writable = toStream.writable(sink)\n\n// Now we have a writable stream, we can pipe to it\nfs.createReadStream('/path/to/file').pipe(writable)\n```\n\n### Convert transform iterable to transform stream\n\n```js\n// A streaming iterable \"transform\" is a function that takes a \"source\" and\n// returns a \"source\".\nconst transform = source => (async function * () {\n  for await (const chunk of source) {\n    // Replace all space characters with dashes\n    yield Buffer.from(chunk.toString().replace(/ /g, '-'))\n  }\n})()\n\nconst transform = toStream.transform(transform)\n\n// Now we have a transform stream, we can pipe to and from it\nfs.createReadStream('/path/to/file')\n  .pipe(transform)\n  .pipe(fs.createWriteStream('/path/to/file2'))\n```\n\n## API\n\n```js\nconst toStream = require('it-to-stream')\n```\n\n### `toStream.readable(source, [options]): Readable`\n\nConvert a [source](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#source-it) iterable to a [`Readable`](https://nodejs.org/dist/latest/docs/api/stream.html#stream_readable_streams) stream.\n\n`options` are passed directly to the `Readable` constructor.\n\n### `toStream.writable(sink, [options]): Writable`\n\nConvert a [sink](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#sink-it) iterable to a [`Writable`](https://nodejs.org/dist/latest/docs/api/stream.html#stream_writable_streams) stream.\n\n`options` are passed directly to the `Writable` constructor.\n\n### `toStream.transform(transform, [options]): Transform`\n\nConvert a [transform](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#transform-it) iterable to a [`Transform`](https://nodejs.org/dist/latest/docs/api/stream.html#stream_duplex_and_transform_streams) stream.\n\n`options` are passed directly to the `Transform` constructor.\n\n### `toStream.duplex(duplex, [options]): Duplex`\n\nConvert a [duplex](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#duplex-it) iterable to a [`Duplex`](https://nodejs.org/dist/latest/docs/api/stream.html#stream_duplex_and_transform_streams) stream.\n\n`options` are passed directly to the `Duplex` constructor.\n\n## Related\n\n* [`stream-to-it`](https://www.npmjs.com/package/stream-to-it) Convert Node.js streams to streaming iterables\n* [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/alanshaw/it-to-stream/issues/new) or submit PRs.\n\n## License\n\n[MIT](LICENSE) Â© Alan Shaw\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Alan Shaw\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/it-to-stream/-/it-to-stream-1.0.0.tgz#6c47f91d5b5df28bda9334c52782ef8e97fe3a4a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/it-to-stream/-/it-to-stream-1.0.0.tgz",
    "hash": "6c47f91d5b5df28bda9334c52782ef8e97fe3a4a",
    "integrity": "sha512-pLULMZMAB/+vbdvbZtebC0nWBTbG581lk6w8P7DfIIIKUfa8FbY7Oi0FxZcFPbxvISs7A9E+cMpLDBc1XhpAOA==",
    "registry": "npm",
    "packageName": "it-to-stream",
    "cacheIntegrity": "sha512-pLULMZMAB/+vbdvbZtebC0nWBTbG581lk6w8P7DfIIIKUfa8FbY7Oi0FxZcFPbxvISs7A9E+cMpLDBc1XhpAOA== sha1-bEf5HVtd8ovakzTFJ4Lvjpf+Oko="
  },
  "registry": "npm",
  "hash": "6c47f91d5b5df28bda9334c52782ef8e97fe3a4a"
}