{
  "manifest": {
    "name": "class-is",
    "version": "1.1.0",
    "description": "Enhances a JavaScript class by adding an is<Class> property to compare types between realms.",
    "keywords": [
      "withis",
      "with-is",
      "isclass",
      "is-class",
      "symbols",
      "realms",
      "instanceof",
      "instance-of"
    ],
    "author": {
      "name": "Diogo Silva",
      "email": "fsdiogo@gmail.com"
    },
    "homepage": "https://github.com/moxystudio/js-class-is",
    "repository": {
      "type": "git",
      "url": "git@github.com:moxystudio/js-class-is.git"
    },
    "license": "MIT",
    "main": "index.js",
    "scripts": {
      "lint": "eslint .",
      "test": "jest --env node --coverage",
      "prerelease": "npm t && npm run lint",
      "release": "standard-version",
      "precommit": "lint-staged",
      "commitmsg": "commitlint -e $GIT_PARAMS"
    },
    "standard-version": {
      "scripts": {
        "posttag": "git push --follow-tags origin master && npm publish"
      }
    },
    "lint-staged": {
      "*.js": [
        "eslint --fix",
        "git add"
      ]
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "devDependencies": {
      "@commitlint/cli": "^6.1.3",
      "@commitlint/config-conventional": "^6.1.3",
      "eslint": "^4.19.1",
      "eslint-config-moxy": "^5.2.1",
      "husky": "^0.14.3",
      "jest": "^22.4.3",
      "lint-staged": "^7.0.0",
      "standard-version": "^4.3.0"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-class-is-1.1.0-integrity/node_modules/class-is/package.json",
    "readmeFilename": "README.md",
    "readme": "# class-is\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][codecov-image]][codecov-url] [![Dependency status][david-dm-image]][david-dm-url] [![Dev Dependency status][david-dm-dev-image]][david-dm-dev-url] [![Greenkeeper badge][greenkeeper-image]][greenkeeper-url]\n\n[npm-url]:https://npmjs.org/package/class-is\n[downloads-image]:http://img.shields.io/npm/dm/class-is.svg\n[npm-image]:http://img.shields.io/npm/v/class-is.svg\n[travis-url]:https://travis-ci.org/moxystudio/js-class-is\n[travis-image]:http://img.shields.io/travis/moxystudio/js-class-is/master.svg\n[codecov-url]:https://codecov.io/gh/moxystudio/js-class-is\n[codecov-image]:https://img.shields.io/codecov/c/github/moxystudio/js-class-is/master.svg\n[david-dm-url]:https://david-dm.org/moxystudio/js-class-is\n[david-dm-image]:https://img.shields.io/david/moxystudio/js-class-is.svg\n[david-dm-dev-url]:https://david-dm.org/moxystudio/js-class-is?type=dev\n[david-dm-dev-image]:https://img.shields.io/david/dev/moxystudio/js-class-is.svg\n[greenkeeper-image]:https://badges.greenkeeper.io/moxystudio/js-class-is.svg\n[greenkeeper-url]:https://greenkeeper.io/\n\nEnhances a JavaScript class by adding an `is<Class>` property to compare types between realms.\n\n\n## Motivation\n\nChecking if a value is an instance of a class in JavaScript is not an easy task.\n\nYou can use `instanceof`, but that doesn't work between different realms or different versions. Comparing with `constructor.name` could be a solution but if you need to Uglify the module it doesn't work, as it creates different names for the same module.\n\n[Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) to the rescue!\n\n\n## Installation\n\n`$ npm install class-is`\n\nIf you want to use this module in the browser you have to compile it yourself to your desired target.\n\n\n## Usage\n\n### ES6 classes:\n\n```js\n// Package X\nconst withIs = require('class-is');\n\nclass Person {\n    constructor(name, city) {\n        this.name = name;\n        this.city = city;\n    }\n}\n\nmodule.exports = withIs(Person, {\n    className: 'Person',\n    symbolName: '@org/package-x/Person',\n});\n```\n\n```js\n// Package Y\nconst withIs = require('class-is');\n\nclass Animal {\n    constructor(species) {\n        this.species = species;\n    }\n}\n\nmodule.exports = withIs(Animal, {\n    className: 'Animal',\n    symbolName: '@org/package-y/Animal',\n});\n```\n\n```js\nconst Person = require('package-x');\nconst Animal = require('package-y');\n\nconst diogo = new Person('Diogo', 'Porto');\nconst wolf = new Animal('Gray Wolf');\n\nconsole.log(Person.isPerson(diogo));\nconsole.log(Person.isPerson(wolf));\n```\n\nRunning the example above will print:\n\n```\ntrue\nfalse\n```\n\n### ES5 and below classes:\n\nIn ES5 it's not unusual to see constructors like the one below, so you can call it without using the `new` keyword.\n\n```js\nfunction Circle(radius) {\n    if (!(this instanceof Circle)) {\n        return new Circle();\n    }\n\n    this.radius = radius;\n}\n```\n\nIn such cases you can use the `withIs.proto` method:\n\n```js\nconst withIs = require('class-is');\n\nconst Circle = withIs.proto(function (radius) {\n    if (!(this instanceof Circle)) {\n        return new Circle();\n    }\n\n    this.radius = radius;\n}, {\n    className: 'Circle',\n    symbolName: '@org/package/Circle',\n});\n```\n\n...or even better:\n\n```js\nconst withIs = require('class-is');\n\nfunction Circle(radius) {\n    this.radius = radius;\n}\n\nmodule.exports = withIs.proto(Circle, {\n    className: 'Circle',\n    symbolName: '@org/package/Circle',\n    withoutNew: true,\n});\n```\n\n\n## API\n\n### withIs(Class, { className, symbolName })\n\n###### class\n\nType: `class`\n\nThe class to be enhanced.\n\n###### className\n\nType: `String`\n\nThe name of the class your passing.\n\n###### symbolName\n\nType: `String`\n\nUnique *id* for the class. This should be namespaced so different classes from different modules do not collide and give false positives.\n\nExample: `@organization/package/Class`\n\n### withIs.proto(Class, { className, symbolName, withoutNew })\n\nThe `className` and `symbolName` parameters are the same as above.\n\n###### withoutNew\n\nType: `Boolean`   \nDefault: `false`\n\nAllow creating an instance without the `new` operator.\n\n\n## Tests\n\n`$ npm test`   \n`$ npm test -- --watch` during development\n\n\n## License\n\n[MIT](http://www.opensource.org/licenses/mit-license.php)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Diogo Silva <fsdiogo@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/class-is/-/class-is-1.1.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/class-is/-/class-is-1.1.0.tgz",
    "hash": "",
    "integrity": "sha512-rhjH9AG1fvabIDoGRVH587413LPjTZgmDF9fOFCbFJQV4yuocX1mHxxvXI4g3cGwbVY9wAYIoKlg1N79frJKQw==",
    "registry": "npm",
    "packageName": "class-is",
    "cacheIntegrity": "sha512-rhjH9AG1fvabIDoGRVH587413LPjTZgmDF9fOFCbFJQV4yuocX1mHxxvXI4g3cGwbVY9wAYIoKlg1N79frJKQw== sha1-nTwPugRA0hHYQ87D3t+kgFUAWCU="
  },
  "registry": "npm",
  "hash": "ae18c7f401b57ef69b203a064551f9f3be35dcb3e34d98260c5f5f38509b149415e32ba8717d661f1c6f5c8e20ddc1b06d563dc00608a0a960d4defd7eb24a43"
}