{
  "manifest": {
    "name": "p-retry",
    "version": "5.1.2",
    "description": "Retry a promise-returning or async function",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/p-retry.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "type": "module",
    "exports": "./index.js",
    "engines": {
      "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
    },
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "promise",
      "retry",
      "retries",
      "operation",
      "failed",
      "rejected",
      "try",
      "exponential",
      "backoff",
      "attempt",
      "async",
      "await",
      "promises",
      "concurrently",
      "concurrency",
      "parallel",
      "bluebird"
    ],
    "dependencies": {
      "@types/retry": "0.12.1",
      "retry": "^0.13.1"
    },
    "devDependencies": {
      "ava": "^4.1.0",
      "delay": "^5.0.0",
      "tsd": "^0.19.1",
      "xo": "^0.48.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-p-retry-5.1.2-c16eaee4f2016f9161d12da40d3b8b0f2e3c1b76-integrity/node_modules/p-retry/package.json",
    "readmeFilename": "readme.md",
    "readme": "# p-retry\n\n> Retry a promise-returning or async function\n\nIt does exponential backoff and supports custom retry strategies for failed operations.\n\n## Install\n\n```sh\nnpm install p-retry\n```\n\n## Usage\n\n```js\nimport pRetry, {AbortError} from 'p-retry';\nimport fetch from 'node-fetch';\n\nconst run = async () => {\n\tconst response = await fetch('https://sindresorhus.com/unicorn');\n\n\t// Abort retrying if the resource doesn't exist\n\tif (response.status === 404) {\n\t\tthrow new AbortError(response.statusText);\n\t}\n\n\treturn response.blob();\n};\n\nconsole.log(await pRetry(run, {retries: 5}));\n```\n\n## API\n\n### pRetry(input, options?)\n\nReturns a `Promise` that is fulfilled when calling `input` returns a fulfilled promise. If calling `input` returns a rejected promise, `input` is called again until the maximum number of retries is reached. It then rejects with the last rejection reason.\n\nIt does not retry on most `TypeError`'s, with the exception of network errors. This is done on a best case basis as different browsers have different [messages](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful) to indicate this. See [whatwg/fetch#526 (comment)](https://github.com/whatwg/fetch/issues/526#issuecomment-554604080)\n\n#### input\n\nType: `Function`\n\nReceives the current attempt number as the first argument and is expected to return a `Promise` or any value.\n\n#### options\n\nType: `object`\n\nOptions are passed to the [`retry`](https://github.com/tim-kos/node-retry#retryoperationoptions) module.\n\n##### onFailedAttempt(error)\n\nType: `Function`\n\nCallback invoked on each retry. Receives the error thrown by `input` as the first argument with properties `attemptNumber` and `retriesLeft` which indicate the current attempt number and the number of attempts left, respectively.\n\n```js\nimport pRetry from 'p-retry';\n\nconst run = async () => {\n\tconst response = await fetch('https://sindresorhus.com/unicorn');\n\n\tif (!response.ok) {\n\t\tthrow new Error(response.statusText);\n\t}\n\n\treturn response.json();\n};\n\nconst result = await pRetry(run, {\n\tonFailedAttempt: error => {\n\t\tconsole.log(`Attempt ${error.attemptNumber} failed. There are ${error.retriesLeft} retries left.`);\n\t\t// 1st request => Attempt 1 failed. There are 4 retries left.\n\t\t// 2nd request => Attempt 2 failed. There are 3 retries left.\n\t\t// â€¦\n\t},\n\tretries: 5\n});\n\nconsole.log(result);\n```\n\nThe `onFailedAttempt` function can return a promise. For example, you can do some async logging:\n\n```js\nimport pRetry from 'p-retry';\nimport logger from './some-logger';\n\nconst run = async () => { â€¦ };\n\nconst result = await pRetry(run, {\n\tonFailedAttempt: async error => {\n\t\tawait logger.log(error);\n\t}\n});\n```\n\nIf the `onFailedAttempt` function throws, all retries will be aborted and the original promise will reject with the thrown error.\n\n##### signal\n\nType: [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n\nYou can abort retrying using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\nWhen `AbortController.abort(reason)` is called, the promise will be rejected with `reason` if it's an instance of `Error`, or a `DOMException` with `reason` as its message otherwise. If no reason is provided, the promise will reject with a `DOMException`.\n\n*Requires Node.js 16 or later.*\n\n```js\nimport pRetry from 'p-retry';\n\nconst run = async () => { â€¦ };\nconst controller = new AbortController();\n\ncancelButton.addEventListener('click', () => {\n\tcontroller.abort('User clicked cancel button');\n});\n\ntry {\n\tawait pRetry(run, {signal: controller.signal});\n} catch (error) {\n\tconsole.log(error.message);\n\t//=> 'User clicked cancel button'\n}\n```\n\n### AbortError(message)\n### AbortError(error)\n\nAbort retrying and reject the promise.\n\n### message\n\nType: `string`\n\nAn error message.\n\n### error\n\nType: `Error`\n\nA custom error.\n\n## Tip\n\nYou can pass arguments to the function being retried by wrapping it in an inline arrow function:\n\n```js\nimport pRetry from 'p-retry';\n\nconst run = async emoji => {\n\t// â€¦\n};\n\n// Without arguments\nawait pRetry(run, {retries: 5});\n\n// With arguments\nawait pRetry(() => run('ðŸ¦„'), {retries: 5});\n```\n\n## Related\n\n- [p-timeout](https://github.com/sindresorhus/p-timeout) - Timeout a promise after a specified amount of time\n- [Moreâ€¦](https://github.com/sindresorhus/promise-fun)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/p-retry/-/p-retry-5.1.2.tgz#c16eaee4f2016f9161d12da40d3b8b0f2e3c1b76",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/p-retry/-/p-retry-5.1.2.tgz",
    "hash": "c16eaee4f2016f9161d12da40d3b8b0f2e3c1b76",
    "integrity": "sha512-couX95waDu98NfNZV+i/iLt+fdVxmI7CbrrdC2uDWfPdUAApyxT4wmDlyOtR5KtTDmkDO0zDScDjDou9YHhd9g==",
    "registry": "npm",
    "packageName": "p-retry",
    "cacheIntegrity": "sha512-couX95waDu98NfNZV+i/iLt+fdVxmI7CbrrdC2uDWfPdUAApyxT4wmDlyOtR5KtTDmkDO0zDScDjDou9YHhd9g== sha1-wW6u5PIBb5Fh0S2kDTuLDy48G3Y="
  },
  "registry": "npm",
  "hash": "c16eaee4f2016f9161d12da40d3b8b0f2e3c1b76"
}