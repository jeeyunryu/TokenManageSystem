{
  "manifest": {
    "name": "ipfs-unixfs-exporter",
    "version": "10.0.1",
    "description": "JavaScript implementation of the UnixFs exporter used by IPFS",
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipfs/js-ipfs-unixfs/tree/master/packages/ipfs-unixfs-exporter#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipfs-unixfs.git"
    },
    "bugs": {
      "url": "https://github.com/ipfs/js-ipfs-unixfs/issues"
    },
    "keywords": [
      "IPFS"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "test": "aegir test",
      "test:node": "aegir test -t node --cov",
      "test:chrome": "aegir test -t browser --cov",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "build": "aegir build",
      "clean": "aegir clean",
      "lint": "aegir lint",
      "dep-check": "aegir dep-check -i interface-blockstore",
      "release": "aegir release"
    },
    "dependencies": {
      "@ipld/dag-cbor": "^9.0.0",
      "@ipld/dag-pb": "^4.0.0",
      "@multiformats/murmur3": "^2.0.0",
      "err-code": "^3.0.1",
      "hamt-sharding": "^3.0.0",
      "interface-blockstore": "^4.0.0",
      "ipfs-unixfs": "^9.0.0",
      "it-last": "^2.0.0",
      "it-map": "^2.0.0",
      "it-parallel": "^3.0.0",
      "it-pipe": "^2.0.4",
      "it-pushable": "^3.1.0",
      "multiformats": "^11.0.0",
      "p-queue": "^7.3.0",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "@types/sinon": "^10.0.0",
      "abort-controller": "^3.0.0",
      "aegir": "^38.1.2",
      "blockstore-core": "^3.0.0",
      "crypto-browserify": "^3.12.0",
      "delay": "^5.0.0",
      "ipfs-unixfs-importer": "^12.0.0",
      "it-all": "^2.0.0",
      "it-buffer-stream": "^3.0.0",
      "it-first": "^2.0.0",
      "merge-options": "^3.0.4",
      "native-abort-controller": "^1.0.3",
      "sinon": "^15.0.0"
    },
    "browser": {
      "fs": false
    },
    "typedoc": {
      "entryPoint": "./src/index.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ipfs-unixfs-exporter-10.0.1-7b4cde8dd8d02919c6c28c47b16fe1f17faa51a1-integrity/node_modules/ipfs-unixfs-exporter/package.json",
    "readmeFilename": "README.md",
    "readme": "# ipfs-unixfs-exporter <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-unixfs.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-unixfs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfs-unixfs/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-ipfs-unixfs/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> JavaScript implementation of the UnixFs exporter used by IPFS\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Example](#example)\n- [API](#api)\n  - [`exporter(cid, blockstore, options)`](#exportercid-blockstore-options)\n  - [UnixFSEntry](#unixfsentry)\n  - [Raw entries](#raw-entries)\n  - [CBOR entries](#cbor-entries)\n  - [`entry.content({ offset, length })`](#entrycontent-offset-length-)\n  - [`walkPath(cid, blockstore)`](#walkpathcid-blockstore)\n  - [`recursive(cid, blockstore)`](#recursivecid-blockstore)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipfs-unixfs-exporter\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `IpfsUnixfsExporter` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipfs-unixfs-exporter/dist/index.min.js\"></script>\n```\n\n## Example\n\n```js\n// import a file and export it again\nimport { importer } from 'ipfs-unixfs-importer'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { MemoryBlockstore } from 'blockstore-core/memory'\n\n// Should contain the blocks we are trying to export\nconst blockstore = new MemoryBlockstore()\nconst files = []\n\nfor await (const file of importer([{\n  path: '/foo/bar.txt',\n  content: new Uint8Array([0, 1, 2, 3])\n}], blockstore)) {\n  files.push(file)\n}\n\nconsole.info(files[0].cid) // Qmbaz\n\nconst entry = await exporter(files[0].cid, blockstore)\n\nconsole.info(entry.cid) // Qmqux\nconsole.info(entry.path) // Qmbaz/foo/bar.txt\nconsole.info(entry.name) // bar.txt\nconsole.info(entry.unixfs.fileSize()) // 4\n\n// stream content from unixfs node\nconst size = entry.unixfs.fileSize()\nconst bytes = new Uint8Array(size)\nlet offset = 0\n\nfor await (const buf of entry.content()) {\n  bytes.set(buf, offset)\n  offset += chunk.length\n}\n\nconsole.info(bytes) // 0, 1, 2, 3\n```\n\n## API\n\n```js\nimport { exporter } from 'ipfs-unixfs-exporter'\n```\n\n### `exporter(cid, blockstore, options)`\n\nUses the given [blockstore][] instance to fetch an IPFS node by it's CID.\n\nReturns a Promise which resolves to a `UnixFSEntry`.\n\n`options` is an optional object argument that might include the following keys:\n\n- `signal` ([AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)): Used to cancel any network requests that are initiated as a result of this export\n\n### UnixFSEntry\n\n```javascript\n{\n  type: 'file' // or 'directory'\n  name: 'foo.txt',\n  path: 'Qmbar/foo.txt',\n  cid: CID, // see https://github.com/multiformats/js-cid\n  content: function, // returns an async iterator\n  unixfs: UnixFS // see https://github.com/ipfs/js-ipfs-unixfs\n}\n```\n\nIf the entry is a file, `entry.content()` returns an async iterator that yields one or more Uint8Arrays containing the file content:\n\n```javascript\nif (entry.type === 'file') {\n  for await (const chunk of entry.content()) {\n    // chunk is a Buffer\n  }\n}\n```\n\nIf the entry is a directory, `entry.content()` returns further `entry` objects:\n\n```javascript\nif (entry.type === 'directory') {\n  for await (const entry of dir.content()) {\n    console.info(entry.name)\n  }\n}\n```\n\n### Raw entries\n\nEntries with a `raw` codec `CID` return raw entries:\n\n```javascript\n{\n  name: 'foo.txt',\n  path: 'Qmbar/foo.txt',\n  cid: CID, // see https://github.com/multiformats/js-cid\n  node: Buffer, // see https://nodejs.org/api/buffer.html\n  content: function, // returns an async iterator\n}\n```\n\n`entry.content()` returns an async iterator that yields a buffer containing the node content:\n\n```javascript\nfor await (const chunk of entry.content()) {\n  // chunk is a Buffer\n}\n```\n\nUnless you an options object containing `offset` and `length` keys as an argument to `entry.content()`, `chunk` will be equal to `entry.node`.\n\n### CBOR entries\n\nEntries with a `dag-cbor` codec `CID` return JavaScript object entries:\n\n```javascript\n{\n  name: 'foo.txt',\n  path: 'Qmbar/foo.txt',\n  cid: CID, // see https://github.com/multiformats/js-cid\n  node: Uint8Array,\n  content: function // returns an async iterator that yields a single object - see https://github.com/ipld/js-ipld-dag-cbor\n}\n```\n\nThere is no `content` function for a `CBOR` node.\n\n### `entry.content({ offset, length })`\n\nWhen `entry` is a file or a `raw` node, `offset` and/or `length` arguments can be passed to `entry.content()` to return slices of data:\n\n```javascript\nconst length = 5\nconst data = new Uint8Array(length)\nlet offset = 0\n\nfor await (const chunk of entry.content({\n  offset: 0,\n  length\n})) {\n  data.set(chunk, offset)\n  offset += chunk.length\n}\n\n// `data` contains the first 5 bytes of the file\nreturn data\n```\n\nIf `entry` is a directory, passing `offset` and/or `length` to `entry.content()` will limit the number of files returned from the directory.\n\n```javascript\nconst entries = []\n\nfor await (const entry of dir.content({\n  offset: 0,\n  length: 5\n})) {\n  entries.push(entry)\n}\n\n// `entries` contains the first 5 files/directories in the directory\n```\n\n### `walkPath(cid, blockstore)`\n\n`walkPath` will return an async iterator that yields entries for all segments in a path:\n\n```javascript\nimport { walkPath } from 'ipfs-unixfs-exporter'\n\nconst entries = []\n\nfor await (const entry of walkPath('Qmfoo/foo/bar/baz.txt', blockstore)) {\n  entries.push(entry)\n}\n\n// entries contains 4x `entry` objects\n```\n\n### `recursive(cid, blockstore)`\n\n`recursive` will return an async iterator that yields all entries beneath a given CID or IPFS path, as well as the containing directory.\n\n```javascript\nimport { recursive } from 'ipfs-unixfs-exporter'\n\nconst entries = []\n\nfor await (const child of recursive('Qmfoo/foo/bar', blockstore)) {\n  entries.push(entry)\n}\n\n// entries contains all children of the `Qmfoo/foo/bar` directory and it's children\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-ipfs-unixfs/modules/ipfs_unixfs_exporter.html>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-unixfs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n[dag API]: https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/DAG.md\n\n[blockstore]: https://github.com/ipfs/js-ipfs-interfaces/tree/master/packages/interface-blockstore#readme\n\n[UnixFS]: https://github.com/ipfs/specs/tree/master/unixfs\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ipfs-unixfs-exporter/-/ipfs-unixfs-exporter-10.0.1.tgz#7b4cde8dd8d02919c6c28c47b16fe1f17faa51a1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ipfs-unixfs-exporter/-/ipfs-unixfs-exporter-10.0.1.tgz",
    "hash": "7b4cde8dd8d02919c6c28c47b16fe1f17faa51a1",
    "integrity": "sha512-lSaCF2wpG7U26heLNiauTwaKmBRmr3unoj2/PVv93J/mgD7Qy+gq9/pJNLhQReX1iOIQY6pQjm02aCJ3oAfyMQ==",
    "registry": "npm",
    "packageName": "ipfs-unixfs-exporter",
    "cacheIntegrity": "sha512-lSaCF2wpG7U26heLNiauTwaKmBRmr3unoj2/PVv93J/mgD7Qy+gq9/pJNLhQReX1iOIQY6pQjm02aCJ3oAfyMQ== sha1-e0zejdjQKRnGwoxHsW/h8X+qUaE="
  },
  "registry": "npm",
  "hash": "7b4cde8dd8d02919c6c28c47b16fe1f17faa51a1"
}