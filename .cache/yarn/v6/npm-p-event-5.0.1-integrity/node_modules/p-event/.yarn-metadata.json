{
  "manifest": {
    "name": "p-event",
    "version": "5.0.1",
    "description": "Promisify an event by waiting for it to be emitted",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/p-event.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "type": "module",
    "exports": "./index.js",
    "engines": {
      "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
    },
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "promise",
      "events",
      "event",
      "emitter",
      "eventemitter",
      "event-emitter",
      "emit",
      "emits",
      "listener",
      "promisify",
      "addlistener",
      "addeventlistener",
      "wait",
      "waits",
      "on",
      "browser",
      "dom",
      "async",
      "await",
      "promises",
      "bluebird"
    ],
    "dependencies": {
      "p-timeout": "^5.0.2"
    },
    "devDependencies": {
      "@types/node": "^16.11.6",
      "ava": "^3.15.0",
      "delay": "^5.0.0",
      "tsd": "^0.18.0",
      "xo": "^0.45.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-p-event-5.0.1-integrity/node_modules/p-event/package.json",
    "readmeFilename": "readme.md",
    "readme": "# p-event\n\n> Promisify an event by waiting for it to be emitted\n\nUseful when you need only one event emission and want to use it with promises or await it in an async function.\n\nIt works with any event API in Node.js and the browser (using a bundler).\n\nIf you want multiple individual events as they are emitted, you can use the `pEventIterator()` method. [Observables](https://medium.com/@benlesh/learning-observable-by-building-observable-d5da57405d87) can be useful too.\n\n## Install\n\n```sh\nnpm install p-event\n```\n\n## Usage\n\nIn Node.js:\n\n```js\nimport {pEvent} from 'p-event';\nimport emitter from './some-event-emitter';\n\ntry {\n\tconst result = await pEvent(emitter, 'finish');\n\n\t// `emitter` emitted a `finish` event\n\tconsole.log(result);\n} catch (error) {\n\t// `emitter` emitted an `error` event\n\tconsole.error(error);\n}\n```\n\nIn the browser:\n\n```js\nimport {pEvent} from 'p-event';\n\nawait pEvent(document, 'DOMContentLoaded');\nconsole.log('ðŸ˜Ž');\n```\n\nAsync iteration:\n\n```js\nimport {pEventIterator} from 'p-event';\nimport emitter from './some-event-emitter';\n\nconst asyncIterator = pEventIterator(emitter, 'data', {\n\tresolutionEvents: ['finish']\n});\n\nfor await (const event of asyncIterator) {\n\tconsole.log(event);\n}\n```\n\n## API\n\n### pEvent(emitter, event, options?)\n### pEvent(emitter, event, filter)\n\nReturns a `Promise` that is fulfilled when `emitter` emits an event matching `event`, or rejects if `emitter` emits any of the events defined in the `rejectionEvents` option.\n\n**Note**: `event` is a string for a single event type, for example, `'data'`. To listen on multiple\nevents, pass an array of strings, such as `['started', 'stopped']`.\n\nThe returned promise has a `.cancel()` method, which when called, removes the event listeners and causes the promise to never be settled.\n\n#### emitter\n\nType: `object`\n\nEvent emitter object.\n\nShould have either a `.on()`/`.addListener()`/`.addEventListener()` and `.off()`/`.removeListener()`/`.removeEventListener()` method, like the [Node.js `EventEmitter`](https://nodejs.org/api/events.html) and [DOM events](https://developer.mozilla.org/en-US/docs/Web/Events).\n\n#### event\n\nType: `string | string[]`\n\nName of the event or events to listen to.\n\nIf the same event is defined both here and in `rejectionEvents`, this one takes priority.\n\n#### options\n\nType: `object`\n\n##### rejectionEvents\n\nType: `string[]`\\\nDefault: `['error']`\n\nEvents that will reject the promise.\n\n##### multiArgs\n\nType: `boolean`\\\nDefault: `false`\n\nBy default, the promisified function will only return the first argument from the event callback, which works fine for most APIs. This option can be useful for APIs that return multiple arguments in the callback. Turning this on will make it return an array of all arguments from the callback, instead of just the first argument. This also applies to rejections.\n\nExample:\n\n```js\nimport {pEvent} from 'p-event';\nimport emitter from './some-event-emitter';\n\nconst [foo, bar] = await pEvent(emitter, 'finish', {multiArgs: true});\n```\n\n##### timeout\n\nType: `number`\\\nDefault: `Infinity`\n\nTime in milliseconds before timing out.\n\n##### filter\n\nType: `Function`\n\nA filter function for accepting an event.\n\n```js\nimport {pEvent} from 'p-event';\nimport emitter from './some-event-emitter';\n\nconst result = await pEvent(emitter, 'ðŸ¦„', value => value > 3);\n// Do something with first ðŸ¦„ event with a value greater than 3\n```\n\n### pEventMultiple(emitter, event, options)\n\nWait for multiple event emissions. Returns an array.\n\nThis method has the same arguments and options as `pEvent()` with the addition of the following options:\n\n#### options\n\nType: `object`\n\n##### count\n\n*Required*\\\nType: `number`\n\nThe number of times the event needs to be emitted before the promise resolves.\n\n##### resolveImmediately\n\nType: `boolean`\\\nDefault: `false`\n\nWhether to resolve the promise immediately. Emitting one of the `rejectionEvents` won't throw an error.\n\n**Note**: The returned array will be mutated when an event is emitted.\n\nExample:\n\n```js\nimport {pEventMultiple} from 'p-event';\n\nconst emitter = new EventEmitter();\n\nconst promise = pEventMultiple(emitter, 'hello', {\n\tresolveImmediately: true,\n\tcount: Infinity\n});\n\nconst result = await promise;\nconsole.log(result);\n//=> []\n\nemitter.emit('hello', 'Jack');\nconsole.log(result);\n//=> ['Jack']\n\nemitter.emit('hello', 'Mark');\nconsole.log(result);\n//=> ['Jack', 'Mark']\n\n// Stops listening\nemitter.emit('error', new Error('ðŸ˜¿'));\n\nemitter.emit('hello', 'John');\nconsole.log(result);\n//=> ['Jack', 'Mark']\n```\n\n### pEventIterator(emitter, event, options?)\n### pEventIterator(emitter, event, filter)\n\nReturns an [async iterator](https://2ality.com/2016/10/asynchronous-iteration.html) that lets you asynchronously iterate over events of `event` emitted from `emitter`. The iterator ends when `emitter` emits an event matching any of the events defined in `resolutionEvents`, or rejects if `emitter` emits any of the events defined in the `rejectionEvents` option.\n\nThis method has the same arguments and options as `pEvent()` with the addition of the following options:\n\n#### options\n\nType: `object`\n\n##### limit\n\nType: `number` *(non-negative integer)*\\\nDefault: `Infinity`\n\nThe maximum number of events for the iterator before it ends. When the limit is reached, the iterator will be marked as `done`. This option is useful to paginate events, for example, fetching 10 events per page.\n\n##### resolutionEvents\n\nType: `string[]`\\\nDefault: `[]`\n\nEvents that will end the iterator.\n\n### TimeoutError\n\nExposed for instance checking and sub-classing.\n\nExample:\n\n```js\nimport {pEvent} from 'p-event';\n\ntry {\n\tawait pEvent(emitter, 'finish');\n} catch (error) {\n\tif (error instanceof pEvent.TimeoutError) {\n\t\t// Do something specific for timeout errors\n\t}\n}\n```\n\n## Before and after\n\n```js\nimport fs from 'node:fs';\n\nfunction getOpenReadStream(file, callback) {\n\tconst stream = fs.createReadStream(file);\n\n\tstream.on('open', () => {\n\t\tcallback(null, stream);\n\t});\n\n\tstream.on('error', error => {\n\t\tcallback(error);\n\t});\n}\n\ngetOpenReadStream('unicorn.txt', (error, stream) => {\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn;\n\t}\n\n\tconsole.log('File descriptor:', stream.fd);\n\tstream.pipe(process.stdout);\n});\n```\n\n```js\nimport fs from 'node:fs';\nimport {pEvent} from 'p-event';\n\nasync function getOpenReadStream(file) {\n\tconst stream = fs.createReadStream(file);\n\tawait pEvent(stream, 'open');\n\treturn stream;\n}\n\n(async () => {\n\tconst stream = await getOpenReadStream('unicorn.txt');\n\tconsole.log('File descriptor:', stream.fd);\n\tstream.pipe(process.stdout);\n})()\n\t.catch(console.error);\n```\n\n## Tip\n\n### Dealing with calls that resolve with an error code\n\nSome functions might use a single event for success and for certain errors. Promises make it easy to have combined error handler for both error events and successes containing values which represent errors.\n\n```js\nimport {pEvent} from 'p-event';\nimport emitter from './some-event-emitter';\n\ntry {\n\tconst result = await pEvent(emitter, 'finish');\n\n\tif (result === 'unwanted result') {\n\t\tthrow new Error('Emitter finished with an error');\n\t}\n\n\t// `emitter` emitted a `finish` event with an acceptable value\n\tconsole.log(result);\n} catch (error) {\n\t// `emitter` emitted an `error` event or\n\t// emitted a `finish` with 'unwanted result'\n\tconsole.error(error);\n}\n```\n\n## Related\n\n- [pify](https://github.com/sindresorhus/pify) - Promisify a callback-style function\n- [p-map](https://github.com/sindresorhus/p-map) - Map over promises concurrently\n- [Moreâ€¦](https://github.com/sindresorhus/promise-fun)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/p-event/-/p-event-5.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/p-event/-/p-event-5.0.1.tgz",
    "hash": "",
    "integrity": "sha512-dd589iCQ7m1L0bmC5NLlVYfy3TbBEsMUfWx9PyAgPeIcFZ/E2yaTZ4Rz4MiBmmJShviiftHVXOqfnfzJ6kyMrQ==",
    "registry": "npm",
    "packageName": "p-event",
    "cacheIntegrity": "sha512-dd589iCQ7m1L0bmC5NLlVYfy3TbBEsMUfWx9PyAgPeIcFZ/E2yaTZ4Rz4MiBmmJShviiftHVXOqfnfzJ6kyMrQ== sha1-YUYk7AKuf08T0JpyHJBYYYSvWww="
  },
  "registry": "npm",
  "hash": "75de7cf62090ee6d4bd1b982e4d2e55587f2dd36c112c3147d6c7d3f20203de21c159fc4db2693678473e0c8819a625286f8a27ed1d55cea9f9dfcc9ea4c8cad"
}