{
  "manifest": {
    "name": "@trufflesuite/chromafi",
    "version": "3.0.0",
    "description": "ðŸ¦…  cli syntax highlighting: any function - any object - 176 languages",
    "main": "index.js",
    "scripts": {
      "test": "xo && nyc  --reporter=html --reporter=lcov ava",
      "coveralls": "cat ./coverage/lcov.info | ./node_modules/.bin/coveralls -v"
    },
    "husky": {
      "hooks": {
        "pre-commit": "yarn test"
      }
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:trufflesuite/chromafi.git"
    },
    "dependencies": {
      "camelcase": "^4.1.0",
      "chalk": "^2.3.2",
      "cheerio": "^1.0.0-rc.2",
      "detect-indent": "^5.0.0",
      "highlight.js": "^10.4.1",
      "lodash.merge": "^4.6.2",
      "strip-ansi": "^4.0.0",
      "strip-indent": "^2.0.0"
    },
    "devDependencies": {
      "ava": "^0.25.0",
      "coveralls": "^3.0.0",
      "husky": "^0.14.3",
      "nyc": "^11.6.0",
      "xo": "^0.20.3"
    },
    "xo": {
      "esnext": true,
      "semicolon": false,
      "rules": {
        "no-console": 1,
        "space-before-function-paren": 0,
        "unicorn/escape-case": 0
      },
      "ignores": [
        "examples/**/*"
      ]
    },
    "ava": {
      "failfast": true
    },
    "keywords": [
      "syntax",
      "highlight",
      "cli",
      "color",
      "console",
      "terminal",
      "language",
      "highlight.js",
      "chalk",
      "object",
      "string",
      "function",
      "line-numbers",
      "1c",
      "abnf",
      "accesslog",
      "actionscript",
      "ada",
      "apache",
      "applescript",
      "arduino",
      "armasm",
      "asciidoc",
      "aspectj",
      "autohotkey",
      "autoit",
      "avrasm",
      "awk",
      "axapta",
      "bash",
      "basic",
      "bnf",
      "brainfuck",
      "cal",
      "capnproto",
      "ceylon",
      "clean",
      "clojure-repl",
      "clojure",
      "cmake",
      "coffeescript",
      "coq",
      "cos",
      "cpp",
      "crmsh",
      "crystal",
      "cs",
      "csp",
      "css",
      "d",
      "dart",
      "delphi",
      "diff",
      "django",
      "dns",
      "dockerfile",
      "dos",
      "dsconfig",
      "dts",
      "dust",
      "ebnf",
      "elixir",
      "elm",
      "erb",
      "erlang-repl",
      "erlang",
      "excel",
      "fix",
      "flix",
      "fortran",
      "fsharp",
      "gams",
      "gauss",
      "gcode",
      "gherkin",
      "glsl",
      "go",
      "golo",
      "gradle",
      "groovy",
      "haml",
      "handlebars",
      "haskell",
      "haxe",
      "hsp",
      "htmlbars",
      "http",
      "hy",
      "inform7",
      "ini",
      "irpf90",
      "java",
      "javascript",
      "jboss-cli",
      "json",
      "julia-repl",
      "julia",
      "kotlin",
      "lasso",
      "ldif",
      "leaf",
      "less",
      "lisp",
      "livecodeserver",
      "livescript",
      "llvm",
      "lsl",
      "lua",
      "makefile",
      "markdown",
      "mathematica",
      "matlab",
      "maxima",
      "mel",
      "mercury",
      "mipsasm",
      "mizar",
      "mojolicious",
      "monkey",
      "moonscript",
      "n1ql",
      "nginx",
      "nimrod",
      "nix",
      "nsis",
      "objectivec",
      "ocaml",
      "openscad",
      "oxygene",
      "parser3",
      "perl",
      "pf",
      "php",
      "pony",
      "powershell",
      "processing",
      "profile",
      "prolog",
      "protobuf",
      "puppet",
      "purebasic",
      "python",
      "q",
      "qml",
      "r",
      "rib",
      "roboconf",
      "routeros",
      "rsl",
      "ruby",
      "ruleslanguage",
      "rust",
      "scala",
      "scheme",
      "scilab",
      "scss",
      "shell",
      "smali",
      "smalltalk",
      "sml",
      "sqf",
      "sql",
      "stan",
      "stata",
      "step21",
      "stylus",
      "subunit",
      "swift",
      "taggerscript",
      "tap",
      "tcl",
      "tex",
      "thrift",
      "tp",
      "twig",
      "typescript",
      "vala",
      "vbnet",
      "vbscript-html",
      "vbscript",
      "verilog",
      "vhdl",
      "vim",
      "x86asm",
      "xl",
      "xml",
      "xquery",
      "yaml",
      "zephir"
    ],
    "author": {
      "name": "F1LT3R"
    },
    "license": "MIT",
    "homepage": "https://github.com/trufflesuite/chromafi/tree/release",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@trufflesuite-chromafi-3.0.0-f6956408c1af6a38a6ed1657783ce59504a1eb8b-integrity/node_modules/@trufflesuite/chromafi/package.json",
    "readmeFilename": "README.md",
    "readme": "# Chromafi\n\n[![Build Status](https://travis-ci.org/F1LT3R/chromafi.svg?branch=master)](https://travis-ci.org/F1LT3R/chromafi)\n[![Coverage Status](https://coveralls.io/repos/github/F1LT3R/chromafi/badge.svg?branch=master)](https://coveralls.io/github/F1LT3R/chromafi?branch=master)\n[![Npm Version](https://img.shields.io/npm/v/chromafi.svg)](https://www.npmjs.com/package/chromafi)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\n> ðŸ¦…  cli syntax highlighting: any function - any object - 176 languages\n\n![Figure 00](examples/figure-00.png)\n\n## Fork notice\n\nThis is Truffle's customized fork of Chromafi.  The original Chromafi can be found [here](https://github.com/F1LT3R/chromafi).\n\nThe differences are as follows:\n\n1. This fork allows colors to continue across lines.\n2. This fork exposes the `hljs` object as `chromafi.hljs` so that it can be modified.\n3. This fork uses `lodash.merge` instead of `deepmerge` for Webpack compatibility.\n4. This fork has removed the `ansi-mark` functionality and dependency.\n\n## Support\n\nSupport the development of Chromafi by [becoming a patreon](https://patreon.com/bePatron?u=9720216).\n\n<a href=\"https://patreon.com/bePatron?u=9720216\"><img width=\"120\" src=\"https://f1lt3r.io/content/images/2018/04/become_a_patron_button@2x.png\"></a>\n\n## Features\n\n<center><img width=\"360px\" src=\"chromafi-logo.png\"></center>\n\n* JavaScript objects that are logged to the console... still look like JavaScript objects.\n* Chromafi highlights JavaScript functions.\n* Adjust indentation for tabbed code with Chromafi.\n* User defined color palettes.\n* Line numbers optional.\n* Padding adjustment for use with background colors or tight spaces.\n* Chromafi also highlights strings of code in 176 languages.\n\n## Usage\n\n### Chromafi a JavaScript Object\n\n```javascript\nconst chromafi = require('chromafi')\n\nconst obj = {\n    foo: 'bar',\n    baz: 1337,\n    qux: true,\n    zxc: null,\n    'foogle-bork': function (a, b) {\n        return b - a\n    }\n}\n\nconst chromatastic = chromafi(obj)\n\nconsole.log(chromatastic)\n```\n\n![Figure 01](examples/figure-01.png)\n\n### Chromafi a JavaScript Function\n\n```javascript\nconst chromafi = require('chromafi')\n\nfunction add (a, b) {\n    return a + b\n}\n\nconst chromantic = chromafi(add)\n\nconsole.log(chromantic)\n```\n\n![Figure 02](examples/figure-02.png)\n\n### Chromafi a String of Code\n\n```javascript\nconst chromafi = require('chromafi')\n\nconst codeString = `\n// Creates a Class based on Type\nconst create = (kind, parent) => {\n    // Create the Class based on the Type's\n    // Constructor or use an Anon. Func\n    const protoclass = kind.ctor || function () {}\n\n    // Inherit from a parent object\n    if (parent) {\n        protoclass.prototype = new Parent()\n    }\n\n    // Merge prototype from Class's Type\n    if (kind.proto) {\n        merge.call(protoclass.prototype, kind.proto)\n    }\n\n    return protoclass\n}\n`\n\nconst chromadactic = chromafi(codeString)\n\nconsole.log(chromadactic)\n```\n\n![Figure 03](examples/figure-03.png)\n\n## Options\n\n```javascript\nconst chromafi = require('chromafi')\nconst chalk = require('chalk')\n\nconst obj = {foobar: 1337}\n\nconst options = {\n    lineNumberPad: 0,\n    codePad: 0,\n    indent: 2,\n    lineNumbers: true,\n    colors: {\n        base: chalk.bgBlack.white.bold,\n        line_numbers: chalk.bgCyan.black\n    }\n}\n\nconst chromafanatic = chromafi(obj, options)\n\nconsole.log(chromafanatic)\n\n```\n\n![Figure 04](examples/figure-04.png)\n\n## Light Color Scheme\n\nChromafi uses [Chalk](https://github.com/chalk/chalk) to write ANSI color codes to the terminal.\n\n```javascript\nconst chromafi = require('chromafi')\n\nconst chromafi = require('.')\nconst chalk = require('chalk')\n\nconst obj = {\n    foo: 'bar',\n    baz: 1337,\n    qux: true,\n    zxc: null,\n    'foogle-bork': function (a, b) {\n        return b - a\n    }\n}\n\nconst chromafantastic = chromafi(obj, {\n    colors: {\n        base: chalk.bgWhite.black.bold,\n        keyword: chalk.red,\n        number: chalk.blue.dim,\n        function: chalk.black,\n        title: chalk.blue,\n        params: chalk.black,\n        string: chalk.black,\n        built_in: chalk.blue,\n        literal: chalk.blue,\n        attr: chalk.black,\n        // Just pass `chalk` to ignore colors\n        trailing_space: chalk,\n        regexp: chalk.blue,\n        line_numbers: chalk.bgBlue.white\n    }\n})\n\nconsole.log(chromafantastic)\n```\n\n![Figure 05](examples/figure-05.png)\n\n## Highlighting Other Languages\n\nChromafi uses [Highlight.js](https://highlightjs.org/) to syntax highlight to your code. This means Chromafi can highlight any language that `Highlight.js` can.\n\nLet's Chromafi some assembler syntax:\n\n```javascript\nconst chromafi = require('chromafi')\n\nconst armAssemblyCode = `\n.text\n\n.global connect\nconnect:\n    mov     r3, #2              ; s->sin_family = AF_INET\n    strh    r3, [sp]\n    ldr     r3, =server_port    ; s->sin_port = server_port\n    ldr     r3, [r3]\n    strh    r3, [sp, #2]\n    ldr     r3, =server_addr    ; s->sin_addr = server_addr\n    ldr     r3, [r3]\n    str     r3, [sp, #4]\n    mov     r3, #0              ; bzero(&s->sin_zero)\n    str     r3, [sp, #8]\n    str     r3, [sp, #12]\n    mov     r1, sp      ; const struct sockaddr *addr = sp\n\n    ldr     r7, =connect_call\n    ldr     r7, [r7]\n    swi     #0\n\n    add     sp, sp, #16\n    pop     {r0}        ; pop sockfd\n\n    pop     {r7}\n    pop     {fp, ip, lr}\n    mov     sp, ip\n    bx      lr\n\n.data\nsocket_call:   .long 281\nconnect_call:  .long 283\n\n/* all addresses are network byte-order (big-endian) */\nserver_addr:            .long 0x0100007f ; localhost\nserver_port:            .hword 0x0b1a\n`\n\nconst chromalicious = chromafi(armAssemblyCode, {lang: 'arm'})\n\nconsole.log(chromalicious)\n```\n\n![Figure 06](examples/figure-06.png)\n\n## Supported Languages\n\n> 1c, abnf, accesslog, actionscript, ada, apache, applescript, arduino, armasm, asciidoc, aspectj, autohotkey, autoit, avrasm, awk, axapta, bash, basic, bnf, brainfuck, cal, capnproto, ceylon, clean, clojure-repl, clojure, cmake, coffeescript, coq, cos, cpp, crmsh, crystal, cs, csp, css, d, dart, delphi, diff, django, dns, dockerfile, dos, dsconfig, dts, dust, ebnf, elixir, elm, erb, erlang-repl, erlang, excel, fix, flix, fortran, fsharp, gams, gauss, gcode, gherkin, glsl, go, golo, gradle, groovy, haml, handlebars, haskell, haxe, hsp, htmlbars, http, hy, inform7, ini, irpf90, java, javascript, jboss-cli, json, julia-repl, julia, kotlin, lasso, ldif, leaf, less, lisp, livecodeserver, livescript, llvm, lsl, lua, makefile, markdown, mathematica, matlab, maxima, mel, mercury, mipsasm, mizar, mojolicious, monkey, moonscript, n1ql, nginx, nimrod, nix, nsis, objectivec, ocaml, openscad, oxygene, parser3, perl, pf, php, pony, powershell, processing, profile, prolog, protobuf, puppet, purebasic, python, q, qml, r, rib, roboconf, routeros, rsl, ruby, ruleslanguage, rust, scala, scheme, scilab, scss, shell, smali, smalltalk, sml, sqf, sql, stan, stata, step21, stylus, subunit, swift, taggerscript, tap, tcl, tex, thrift, tp, twig, typescript, vala, vbnet, vbscript-html, vbscript, verilog, vhdl, vim, x86asm, xl, xml, xquery, yaml, zephir\n\n\n## Credits\n\nThank you to the following Noun Project artists for the vectors used in the lead graphic.\n\n- [Yoshi](https://thenounproject.com/aure7/)\n- [Tom Ingebretsen](https://thenounproject.com/tomplusplus/)\n- [Roussy Lucas](https://thenounproject.com/lroussy/)\n- [Wira](https://thenounproject.com/wirawizinda097/)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Alistair G MacDonald\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@trufflesuite/chromafi/-/chromafi-3.0.0.tgz#f6956408c1af6a38a6ed1657783ce59504a1eb8b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@trufflesuite/chromafi/-/chromafi-3.0.0.tgz",
    "hash": "f6956408c1af6a38a6ed1657783ce59504a1eb8b",
    "integrity": "sha512-oqWcOqn8nT1bwlPPfidfzS55vqcIDdpfzo3HbU9EnUmcSTX+I8z0UyUFI3tZQjByVJulbzxHxUGS3ZJPwK/GPQ==",
    "registry": "npm",
    "packageName": "@trufflesuite/chromafi",
    "cacheIntegrity": "sha512-oqWcOqn8nT1bwlPPfidfzS55vqcIDdpfzo3HbU9EnUmcSTX+I8z0UyUFI3tZQjByVJulbzxHxUGS3ZJPwK/GPQ== sha1-9pVkCMGvajim7RZXeDzllQSh64s="
  },
  "registry": "npm",
  "hash": "f6956408c1af6a38a6ed1657783ce59504a1eb8b"
}