{
  "manifest": {
    "name": "secp256k1",
    "version": "4.0.3",
    "description": "This module provides native bindings to ecdsa secp256k1 functions",
    "keywords": [
      "ec",
      "ecdh",
      "ecdsa",
      "secp256k1"
    ],
    "bugs": {
      "url": "https://github.com/cryptocoinjs/secp256k1-node/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/cryptocoinjs/secp256k1-node.git"
    },
    "license": "MIT",
    "author": {
      "name": "Martin Becze",
      "email": "mjbecze@gmail.com"
    },
    "contributors": [
      {
        "name": "Aaron Davis",
        "url": "https://github.com/kumavis"
      },
      {
        "name": "Ian Matyssik",
        "url": "https://github.com/phpb-com"
      },
      {
        "name": "Kagami Hiiragi",
        "email": "kagami@genshiken.org",
        "url": "http://kagami.genshiken.org/"
      },
      {
        "name": "ethers",
        "url": "https://github.com/ethers"
      },
      {
        "name": "Kirill Fomichev",
        "email": "fanatid@ya.ru",
        "url": "https://github.com/fanatid"
      }
    ],
    "main": "./index.js",
    "browser": {
      "./index.js": "./elliptic.js"
    },
    "scripts": {
      "install": "node-gyp-build || exit 0"
    },
    "dependencies": {
      "elliptic": "^6.5.4",
      "node-addon-api": "^2.0.0",
      "node-gyp-build": "^4.2.0"
    },
    "engines": {
      "node": ">=10.0.0"
    },
    "gypfile": true,
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-secp256k1-4.0.3-integrity/node_modules/secp256k1/package.json",
    "readmeFilename": "README.md",
    "readme": "# secp256k1-node\n\nThis module provides native bindings to [bitcoin-core/secp256k1](https://github.com/bitcoin-core/secp256k1). In browser [elliptic](https://github.com/indutny/elliptic) will be used as fallback.\n\nWorks on node version 10.0.0 or greater, because use [N-API](https://nodejs.org/api/n-api.html).\n\n## Installation\n\n##### from npm\n\n`npm install secp256k1`\n\n##### from git\n\n```\ngit clone git@github.com:cryptocoinjs/secp256k1-node.git\ncd secp256k1-node\ngit submodule update --init\nnpm install\n```\n\n##### Windows\n\nThe easiest way to build the package on windows is to install [windows-build-tools](https://github.com/felixrieseberg/windows-build-tools).\n\nOr install the following software:\n\n  * Git: https://git-scm.com/download/win\n  * nvm: https://github.com/coreybutler/nvm-windows\n  * Python 2.7: https://www.python.org/downloads/release/python-2712/\n  * Visual C++ Build Tools: http://landinghub.visualstudio.com/visual-cpp-build-tools (Custom Install, and select both Windows 8.1 and Windows 10 SDKs)\n\nAnd run commands:\n\n```\nnpm config set msvs_version 2015 --global\nnpm install npm@next -g\n```\n\nBased on:\n\n  * https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245\n  * https://github.com/nodejs/node-gyp/issues/972\n\n## Usage\n\n* [API Reference (v4.x)](API.md) (current version)\n* [API Reference (v3.x)](https://github.com/cryptocoinjs/secp256k1-node/blob/v3.x/API.md)\n* [API Reference (v2.x)](https://github.com/cryptocoinjs/secp256k1-node/blob/v2.x/API.md)\n\n##### Private Key generation, Public Key creation, signature creation, signature verification\n\n```js\nconst { randomBytes } = require('crypto')\nconst secp256k1 = require('secp256k1')\n// or require('secp256k1/elliptic')\n//   if you want to use pure js implementation in node\n\n// generate message to sign\n// message should have 32-byte length, if you have some other length you can hash message\n// for example `msg = sha256(rawMessage)`\nconst msg = randomBytes(32)\n\n// generate privKey\nlet privKey\ndo {\n  privKey = randomBytes(32)\n} while (!secp256k1.privateKeyVerify(privKey))\n\n// get the public key in a compressed format\nconst pubKey = secp256k1.publicKeyCreate(privKey)\n\n// sign the message\nconst sigObj = secp256k1.ecdsaSign(msg, privKey)\n\n// verify the signature\nconsole.log(secp256k1.ecdsaVerify(sigObj.signature, msg, pubKey))\n// => true\n```\n\n\\* **.verify return false for high signatures**\n\n##### Get X point of ECDH\n\n```js\nconst { randomBytes } = require('crypto')\n// const secp256k1 = require('./elliptic')\nconst secp256k1 = require('./')\n\n// generate privKey\nfunction getPrivateKey () {\n  while (true) {\n    const privKey = randomBytes(32)\n    if (secp256k1.privateKeyVerify(privKey)) return privKey\n  }\n}\n\n// generate private and public keys\nconst privKey = getPrivateKey()\nconst pubKey = secp256k1.publicKeyCreate(getPrivateKey())\n\n// compressed public key from X and Y\nfunction hashfn (x, y) {\n  const pubKey = new Uint8Array(33)\n  pubKey[0] = (y[31] & 1) === 0 ? 0x02 : 0x03\n  pubKey.set(x, 1)\n  return pubKey\n}\n\n// get X point of ecdh\nconst ecdhPointX = secp256k1.ecdh(pubKey, privKey, { hashfn }, Buffer.alloc(33))\nconsole.log(ecdhPointX.toString('hex'))\n```\n\n## LICENSE\n\nThis library is free and open-source software released under the MIT license.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2016 secp256k1-node contributors\n\nParts of this software are based on bn.js, elliptic, hash.js\nCopyright (c) 2014-2016 Fedor Indutny\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/secp256k1/-/secp256k1-4.0.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/secp256k1/-/secp256k1-4.0.3.tgz",
    "hash": "",
    "integrity": "sha512-NLZVf+ROMxwtEj3Xa562qgv2BK5e2WNmXPiOdVIPLgs6lyTzMvBq0aWTYMI5XCP9jZMVKOcqZLw/Wc4vDkuxhA==",
    "registry": "npm",
    "packageName": "secp256k1",
    "cacheIntegrity": "sha512-NLZVf+ROMxwtEj3Xa562qgv2BK5e2WNmXPiOdVIPLgs6lyTzMvBq0aWTYMI5XCP9jZMVKOcqZLw/Wc4vDkuxhA== sha1-xFWezRuNPBgn7S0blBkNac4mcwM="
  },
  "registry": "npm",
  "hash": "34b6557fe44e331c2d123dd76b9eb6aa0bf604ae5ed963665cf88e75520f2e0b3a9724f332f06ad1a59360c2395c23fd8d931528e72a64bc3f59ce2f0e4bb184"
}