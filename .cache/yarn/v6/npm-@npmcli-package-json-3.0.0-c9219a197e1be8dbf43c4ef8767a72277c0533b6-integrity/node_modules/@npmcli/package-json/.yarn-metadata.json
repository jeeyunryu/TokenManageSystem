{
  "manifest": {
    "name": "@npmcli/package-json",
    "version": "3.0.0",
    "description": "Programmatic API to update package.json",
    "main": "lib/index.js",
    "files": [
      "bin/",
      "lib/"
    ],
    "scripts": {
      "snap": "tap",
      "test": "tap",
      "lint": "eslint \"**/*.js\"",
      "lintfix": "npm run lint -- --fix",
      "posttest": "npm run lint",
      "postsnap": "npm run lintfix --",
      "postlint": "template-oss-check",
      "template-oss-apply": "template-oss-apply --force"
    },
    "keywords": [
      "npm",
      "oss"
    ],
    "author": {
      "name": "GitHub Inc."
    },
    "license": "ISC",
    "devDependencies": {
      "@npmcli/eslint-config": "^3.0.1",
      "@npmcli/template-oss": "4.5.1",
      "tap": "^16.0.1"
    },
    "dependencies": {
      "json-parse-even-better-errors": "^3.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/package-json.git"
    },
    "engines": {
      "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.5.1"
    },
    "tap": {
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@npmcli-package-json-3.0.0-c9219a197e1be8dbf43c4ef8767a72277c0533b6-integrity/node_modules/@npmcli/package-json/package.json",
    "readmeFilename": "README.md",
    "readme": "# @npmcli/package-json\n\n[![npm version](https://img.shields.io/npm/v/@npmcli/package-json)](https://www.npmjs.com/package/@npmcli/package-json)\n[![Build Status](https://img.shields.io/github/workflow/status/npm/package-json/node-ci)](https://github.com/npm/package-json)\n\nProgrammatic API to update `package.json` files. Updates and saves files the\nsame way the **npm cli** handles them.\n\n## Install\n\n`npm install @npmcli/package-json`\n\n## Usage:\n\n```js\nconst PackageJson = require('@npmcli/package-json')\nconst pkgJson = await PackageJson.load(path)\n// $ cat package.json\n// {\n//   \"name\": \"foo\",\n//   \"version\": \"1.0.0\",\n//   \"dependencies\": {\n//     \"a\": \"^1.0.0\",\n//     \"abbrev\": \"^1.1.1\"\n//   }\n// }\n\npkgJson.update({\n  dependencies: {\n    a: '^1.0.0',\n    b: '^1.2.3',\n  },\n  workspaces: [\n    './new-workspace',\n  ],\n})\n\nawait pkgJson.save()\n// $ cat package.json\n// {\n//   \"name\": \"foo\",\n//   \"version\": \"1.0.0\",\n//   \"dependencies\": {\n//     \"a\": \"^1.0.0\",\n//     \"b\": \"^1.2.3\"\n//   },\n//   \"workspaces\": [\n//     \"./new-workspace\"\n//   ]\n// }\n```\n\n## API:\n\n### `constructor(path)`\n\nCreates a new instance of `PackageJson`.\n\n- `path`: `String` that points to the folder from where to read the\n`package.json` from\n\n---\n\n### `async PackageJson.load()`\n\nLoads the `package.json` at location determined in the `path` option of\nthe constructor.\n\n### Example:\n\nLoads contents of the `package.json` file located at `./`:\n\n```js\nconst PackageJson = require('@npmcli/package-json')\nconst pkgJson = new PackageJson('./')\nawait pkgJson.load()\n```\n\nThrows an error in case the `package.json` file is missing or has invalid\ncontents.\n\n---\n\n### **static** `async PackageJson.load(path)`\n\nConvenience static method that returns a new instance and loads the contents of\nthe `package.json` file from that location.\n\n- `path`: `String` that points to the folder from where to read the\n`package.json` from\n\n### Example:\n\nLoads contents of the `package.json` file located at `./`:\n\n```js\nconst PackageJson = require('@npmcli/package-json')\nconst pkgJson = await PackageJson.load('./')\n```\n\n---\n\n### `PackageJson.update(content)`\n\nUpdates the contents of the `package.json` with the `content` provided.\n\n- `content`: `Object` containing the properties to be updated/replaced in the\n`package.json` file.\n\nSpecial properties like `dependencies`, `devDependencies`,\n`optionalDependencies`, `peerDependencies` will have special logic to handle\nthe update of these options, such as deduplications.\n\n### Example:\n\nAdds a new script named `new-script` to your `package.json` `scripts` property:\n\n```js\nconst PackageJson = require('@npmcli/package-json')\nconst pkgJson = await PackageJson.load('./')\npkgJson.update({\n  scripts: {\n    ...pkgJson.content.scripts,\n    'new-script': 'echo \"Bom dia!\"'\n  }\n})\n```\n\n**NOTE:** When working with dependencies, it's important to provide values for\nall known dependency types as the update logic has some interdependence in\nbetween these properties.\n\n### Example:\n\nA safe way to add a `devDependency` AND remove all peer dependencies of an\nexisting `package.json`:\n\n```js\nconst PackageJson = require('@npmcli/package-json')\nconst pkgJson = await PackageJson.load('./')\npkgJson.update({\n  dependencies: pkgJson.content.dependencies,\n  devDependencies: {\n    ...pkgJson.content.devDependencies,\n    foo: '^foo@1.0.0',\n  },\n  peerDependencies: {},\n  optionalDependencies: pkgJson.content.optionalDependencies,\n})\n```\n\n---\n\n### **get** `PackageJson.content`\n\nGetter that retrieves the normalized `Object` read from the loaded\n`package.json` file.\n\n### Example:\n\n```js\nconst PackageJson = require('@npmcli/package-json')\nconst pkgJson = await PackageJson.load('./')\npkgJson.content\n// -> {\n//   name: 'foo',\n//   version: '1.0.0'\n// }\n```\n\n---\n\n### `async PackageJson.save()`\n\nSaves the current `content` to the same location used when initializing\nthis instance.\n\n<br />\n\n## Related\n\nWhen you make a living out of reading and writing `package.json` files, you end\nup with quite the amount of packages dedicated to it, the **npm cli** also\nuses:\n\n- [read-package-json-fast](https://github.com/npm/read-package-json-fast) reads\nand normalizes `package.json` files the way the **npm cli** expects it.\n- [read-package-json](https://github.com/npm/read-package-json) reads and\nnormalizes more info from your `package.json` file. Used by `npm@6` and in\n`npm@7` for publishing.\n\n## LICENSE\n\n[ISC](./LICENSE)\n\n",
    "licenseText": "ISC License\n\nCopyright GitHub Inc.\n\nPermission to use, copy, modify, and/or distribute this\nsoftware for any purpose with or without fee is hereby\ngranted, provided that the above copyright notice and this\npermission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND NPM DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO\nEVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\nUSE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@npmcli/package-json/-/package-json-3.0.0.tgz#c9219a197e1be8dbf43c4ef8767a72277c0533b6",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@npmcli/package-json/-/package-json-3.0.0.tgz",
    "hash": "c9219a197e1be8dbf43c4ef8767a72277c0533b6",
    "integrity": "sha512-NnuPuM97xfiCpbTEJYtEuKz6CFbpUHtaT0+5via5pQeI25omvQDFbp1GcGJ/c4zvL/WX0qbde6YiLgfZbWFgvg==",
    "registry": "npm",
    "packageName": "@npmcli/package-json",
    "cacheIntegrity": "sha512-NnuPuM97xfiCpbTEJYtEuKz6CFbpUHtaT0+5via5pQeI25omvQDFbp1GcGJ/c4zvL/WX0qbde6YiLgfZbWFgvg== sha1-ySGaGX4b6Nv0PE74dnpyJ3wFM7Y="
  },
  "registry": "npm",
  "hash": "c9219a197e1be8dbf43c4ef8767a72277c0533b6"
}