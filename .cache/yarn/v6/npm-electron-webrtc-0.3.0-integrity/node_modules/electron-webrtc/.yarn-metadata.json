{
  "manifest": {
    "name": "electron-webrtc",
    "version": "0.3.0",
    "description": "Use WebRTC in Node.js via a hidden Electron process",
    "main": "index.js",
    "browser": "browser.js",
    "scripts": {
      "test": "standard && tap test/*.js -t150 -Rspec --cov",
      "test-tap": "tap test/*.js -Rtap",
      "test-lcov": "mkdir -p coverage && tap test/*.js -Rsilent --coverage-report=text-lcov > coverage/lcov.info"
    },
    "engines": {
      "node": ">=4"
    },
    "keywords": [
      "webrtc",
      "electron"
    ],
    "author": {
      "name": "Matt Bell",
      "email": "mappum@gmail.com"
    },
    "license": "MIT",
    "dependencies": {
      "debug": "^2.2.0",
      "electron-eval": "^0.9.0",
      "get-browser-rtc": "^1.0.2",
      "hat": "^0.0.3"
    },
    "devDependencies": {
      "simple-peer": "^6.0.1",
      "standard": "^7.0.0",
      "string-to-stream": "^1.0.1",
      "tap": "^5.1.1"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mappum/electron-webrtc.git"
    },
    "bugs": {
      "url": "https://github.com/mappum/electron-webrtc/issues"
    },
    "homepage": "https://github.com/mappum/electron-webrtc#readme",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-electron-webrtc-0.3.0-integrity/node_modules/electron-webrtc/package.json",
    "readmeFilename": "README.md",
    "readme": "# electron-webrtc\n\n[![npm version](https://img.shields.io/npm/v/electron-webrtc.svg)](https://www.npmjs.com/package/electron-webrtc)\n[![Build Status](https://travis-ci.org/mappum/electron-webrtc.svg?branch=master)](https://travis-ci.org/mappum/electron-webrtc)\n[![Dependency Status](https://david-dm.org/mappum/electron-webrtc.svg)](https://david-dm.org/mappum/electron-webrtc)\n\nUse WebRTC in Node.js via a hidden Electron process\n\nWebRTC is a powerful web API that lets browsers make peer-to-peer connections, and has already been\ndeployed in [many popular browsers](http://caniuse.com/#feat=rtcpeerconnection). It may sometimes be\nuseful to let Node.js programs use WebRTC, e.g. in [`webtorrent-hybrid`](https://github.com/feross/webtorrent-hybrid). However, the modules for WebRTC in Node ([`node-webrtc`](https://github.com/js-platform/node-webrtc) and [`node-rtc-peer-connection`](https://github.com/nickdesaulniers/node-rtc-peer-connection)) are either hard to install, broken, or incomplete.\n\nAs a hack, this module talks to an invisible Electron instance in the background (using [`electron-eval`](https://github.com/mappum/electron-eval)) to use Chromium's built-in WebRTC implementation.\n\n## Status\n\nThis module is compatible with [`simple-peer`](https://github.com/feross/simple-peer) and passes its tests.\n\n`electron-webrtc` is intended for use with RTCDataChannels, so the MediaStream API is not supported.\n\n## Usage\n\n`npm install electron-webrtc`\n\n```js\n// call exported function to create Electron process\nvar wrtc = require('electron-webrtc')()\n\n// handle errors that may occur when trying to communicate with Electron\nwrtc.on('error', function (err) { console.log(err) })\n\n// uses the same API as the `wrtc` package\nvar pc = new wrtc.RTCPeerConnection(config)\n\n// compatible with `simple-peer`\nvar peer = new SimplePeer({\n  initiator: true,\n  wrtc: wrtc\n})\n\n// listen for errors\nwrtc.on('error', function (err, source) {\n  console.error(err)\n})\n```\n\n### Methods\n\n#### `var wrtc = require('electron-webrtc')([opts])`\n\nCalling the function exported by this module will create a new hidden Electron process. It is recommended to only create one, since Electron uses a lot of resources.\n\nAn optional `opts` object may contain specific options (including headless mode). See [`electron-eval`](https://github.com/mappum/electron-eval#var-daemon--electronevalopts)\n\nThe object returned by this function has the same API as the [`node-webrtc`](https://github.com/js-platform/node-webrtc) package.\n\nAny errors that occur when communicating with the Electron daemon will be emitted by the `wrtc` object (`wrtc.on('error', ...)`).\n\n#### `wrtc.close()`\n\nCloses the Electron process and releases its resources. You may not need to do this since the Electron process will close automatically after the Node process terminates.\n\n### Properties\n\n#### `wrtc.electronDaemon`\n\nA handle to the [`electron-eval`](https://github.com/mappum/electron-eval) daemon that this module uses to talk to the Electron process.\n\n### Events\n\n#### - `error`\nEmitted by `RTCPeerConnection` or `RTCDataChannel` when `daemon.eval()` evaluates code that throws an internal error.\n\n### Running on a headless server\n\nChromium normally won't run on a headless server since it expects a screen that it can render to. So to work around this, we can use `Xvfb`, a utility that creates a framebuffer that Chromium can use as a virtual screen.\n\nFirst, install `Xvfb`:\n```sh\napt-get install xvfb # Ubuntu/Debian\nyum install xorg-x11-server-Xvfb # CentOS\n```\n\nCreate the `HEADLESS` env variable:\n```sh\nexport HEADLESS=true\n```\n\nOr if you want to do it programmatically, initialize a new instance and pass in `headless` as a key as demonstrated:\n```js\nvar wrtc = require('electron-webrtc')({ headless: true })\n```\n\nNow you may run your WebRTC code with `electron-webrtc` :)\n\n## Related Modules\n\n- [`node-webrtc`](https://github.com/js-platform/node-webrtc)\n- [`node-rtc-peer-connection`](https://github.com/nickdesaulniers/node-rtc-peer-connection)\n- [`electron-eval`](https://github.com/mappum/electron-eval)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/electron-webrtc/-/electron-webrtc-0.3.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/electron-webrtc/-/electron-webrtc-0.3.0.tgz",
    "hash": "",
    "integrity": "sha512-p4x21lsoG2S3ErTcc1svH/OCcLsNKEwQsxK9PIsefMPRp5lB6Ux10oRVVTy3BqFPxuus3csjTSFJXXOZaGPMmQ==",
    "registry": "npm",
    "packageName": "electron-webrtc",
    "cacheIntegrity": "sha512-p4x21lsoG2S3ErTcc1svH/OCcLsNKEwQsxK9PIsefMPRp5lB6Ux10oRVVTy3BqFPxuus3csjTSFJXXOZaGPMmQ== sha1-VG0cqBpEU0jDIGLLnaXnpKasrc8="
  },
  "registry": "npm",
  "hash": "a78c76d65b281b64b712b4dc735b2f1ff38270bb0d284c10b312bd3c8b1e7cc3d1a79941e94c75d28455553cb706a14fc6ebacddcb234d21495d73996863cc99"
}