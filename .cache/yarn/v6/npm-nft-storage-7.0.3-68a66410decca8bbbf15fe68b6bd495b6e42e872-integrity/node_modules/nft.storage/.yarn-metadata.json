{
  "manifest": {
    "name": "nft.storage",
    "version": "7.0.3",
    "description": "A client library for the https://nft.storage/ service. It provides a convenient interface for working with the HTTP API from a web browser or Node.js",
    "license": "(Apache-2.0 OR MIT)",
    "type": "module",
    "types": "./dist/src/lib.d.ts",
    "module": "./src/lib.js",
    "main": "./dist/src/lib.cjs",
    "files": [
      "src",
      "dist/src",
      "dist/bundle*"
    ],
    "exports": {
      ".": {
        "browser": "./src/lib.js",
        "require": "./dist/src/lib.cjs",
        "types": "./dist/src/lib.d.ts",
        "node": "./src/lib.js"
      },
      "./src/platform.js": {
        "browser": "./src/platform.web.js",
        "require": "./dist/src/platform.cjs",
        "types": "./dist/src/platform.d.ts",
        "node": "./src/platform.js"
      },
      "./src/token.js": {
        "browser": "./src/token.js",
        "require": "./dist/src/token.cjs",
        "types": "./dist/src/token.d.ts",
        "node": "./src/token.js"
      },
      "./dist/bundle.esm.min.js": {
        "browser": "./dist/bundle.esm.min.js",
        "require": "./dist/bundle.esm.min.js",
        "node": "./dist/bundle.esm.min.js"
      }
    },
    "browser": {
      "./src/platform.js": "./src/platform.web.js"
    },
    "scripts": {
      "test": "run-s test:*",
      "test:web": "node test/test.js playwright-test test/*.spec.js --cov && nyc report",
      "test:es": "node test/test.js hundreds mocha test/*.spec.js --exit",
      "test:cjs": "npm run build:cjs && node test/test.js mocha dist/**/*.spec.cjs --exit",
      "build": "run-s build:*",
      "build:ts": "tsc --build",
      "build:cjs": "rollup --config rollup.config.js",
      "build:esm": "rollup --config rollup.esm.config.js",
      "coverage": "nyc report --reporter=text-lcov > coverage.lcov && npx codecov",
      "typedoc": "typedoc",
      "prepare": "npm run build"
    },
    "dependencies": {
      "@ipld/car": "^3.2.3",
      "@ipld/dag-cbor": "^6.0.13",
      "@web-std/blob": "^3.0.1",
      "@web-std/fetch": "^3.0.3",
      "@web-std/file": "^3.0.0",
      "@web-std/form-data": "^3.0.0",
      "carbites": "^1.0.6",
      "ipfs-car": "^0.6.2",
      "it-pipe": "^1.1.0",
      "multiformats": "^9.6.4",
      "p-retry": "^4.6.1",
      "streaming-iterables": "^6.0.0",
      "throttled-queue": "^2.1.2"
    },
    "devDependencies": {
      "@ipld/dag-json": "^8.0.4",
      "@rollup/plugin-commonjs": "^19.0.0",
      "@rollup/plugin-json": "^4.1.0",
      "@rollup/plugin-node-resolve": "^13.0.0",
      "@ssttevee/multipart-parser": "0.1.9",
      "@types/mocha": "^9.0.0",
      "hundreds": "0.0.9",
      "ipfs-unixfs-importer": "^9.0.6",
      "ipld": "0.30.2",
      "ipld-dag-pb": "0.22.3",
      "ipld-garbage": "^4.0.1",
      "ipld-in-memory": "8.0.0",
      "mocha": "^9.1.0",
      "multicodec": "^3.2.1",
      "multihashing-async": "^2.1.2",
      "npm-run-all": "^4.1.5",
      "nyc": "15.1.0",
      "playwright-test": "^7.2.1",
      "rollup": "2.50.1",
      "rollup-plugin-multi-input": "1.3.1",
      "rollup-plugin-terser": "^7.0.2",
      "typedoc": "^0.22.14",
      "typedoc-plugin-mdn-links": "^1.0.4",
      "typedoc-plugin-missing-exports": "^0.22.3",
      "uvu": "0.5.2"
    },
    "homepage": "https://github.com/nftstorage/nft.storage/tree/main/packages/client",
    "bugs": {
      "url": "https://github.com/nftstorage/nft.storage/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/nftstorage/nft.storage.git",
      "directory": "packages/client"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-nft-storage-7.0.3-68a66410decca8bbbf15fe68b6bd495b6e42e872-integrity/node_modules/nft.storage/package.json",
    "readmeFilename": "README.md",
    "readme": "# nft.storage\n\n![ci][ci.icon]\n[![package][version.icon]][package.url]\n[![styled with prettier][prettier.icon]][prettier.url]\n[![size][size.icon]][size.url]\n[![codecov][cov.icon]][cov.url]\n\nA client library for the https://nft.storage/ service. It provides a convenient interface for working with the [Raw HTTP API][] from a web browser or [Node.js][] and comes bundled with TS for out-of-the box type inference and better IntelliSense.\n\n## Install\n\nInstall the package using npm\n\n```\nnpm install nft.storage\n```\n\nOr yarn\n\n```\nyarn add nft.storage\n```\n\n## Usage\n\nFirst, obtain an API token from https://nft.storage and use it in place of `API_TOKEN` below:\n\n```js\nimport { NFTStorage, File } from 'nft.storage'\nconst client = new NFTStorage({ token: 'API_TOKEN' })\n\nasync function main() {\n  const metadata = await client.store({\n    name: 'Pinpie',\n    description: 'Pin is not delicious beef!',\n    image: new File(\n      [\n        /* data */\n      ],\n      'pinpie.jpg',\n      { type: 'image/jpg' }\n    ),\n  })\n  console.log(metadata.url)\n  // ipfs://bafyreib4pff766vhpbxbhjbqqnsh5emeznvujayjj4z2iu533cprgbz23m/metadata.json\n}\n\nmain()\n```\n\nThe client uses ESM modules. If running from Node.js, either name your script `index.mjs` or name it `index.js` _and_ use `npm init` to create a new `package.json` file in your project directory, adding `\"type\": \"module\",` to it.\n\nRun the script:\n\n```sh\nnode index.mjs # or index.js\n```\n\nFor more examples please see the [API documentation](https://nftstorage.github.io/nft.storage/client/classes/lib.NFTStorage.html) or the [examples directory in the project repository][examples directory], which contains sample projects for both [browsers][examples.browser] and [Node.js][examples.node].\n\n[raw http api]: https://nft.storage/api-docs/\n[node.js]: https://nodejs.org/\n[api documentation]: https://nftstorage.github.io/nft.storage/client/classes/lib.NFTStorage.html\n[examples directory]: https://github.com/nftstorage/nft.storage/tree/main/examples/client\n[examples.node]: https://github.com/nftstorage/nft.storage/tree/main/examples/client/node.js\n[examples.browser]: https://github.com/nftstorage/nft.storage/tree/main/examples/client/browser\n[ci.icon]: https://github.com/nftstorage/nft.storage/actions/workflows/client.yml/badge.svg\n[version.icon]: https://img.shields.io/npm/v/nft.storage.svg\n[package.url]: https://npmjs.org/package/nft.storage\n[prettier.icon]: https://img.shields.io/badge/styled_with-prettier-ff69b4.svg\n[prettier.url]: https://github.com/prettier/prettier\n[size.icon]: https://badgen.net/bundlephobia/minzip/nft.storage\n[size.url]: https://bundlephobia.com/result?p=nft.storage\n[cov.icon]: https://codecov.io/gh/nftstorage/nft.storage/branch/main/graph/badge.svg?token=dU5oWrlqHF\n[cov.url]: https://codecov.io/gh/nftstorage/nft.storage\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/nft.storage/-/nft.storage-7.0.3.tgz#68a66410decca8bbbf15fe68b6bd495b6e42e872",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/nft.storage/-/nft.storage-7.0.3.tgz",
    "hash": "68a66410decca8bbbf15fe68b6bd495b6e42e872",
    "integrity": "sha512-6VRwNKALjGOfKgUdQI/ZONeIXNf/Mviu+6u3Wb26IdvOW7Bq+KNX0XcQORfcqrG9hQcrk8F53sZNauqoPMSejw==",
    "registry": "npm",
    "packageName": "nft.storage",
    "cacheIntegrity": "sha512-6VRwNKALjGOfKgUdQI/ZONeIXNf/Mviu+6u3Wb26IdvOW7Bq+KNX0XcQORfcqrG9hQcrk8F53sZNauqoPMSejw== sha1-aKZkEN7MqLu/Ff5otr1JW25C6HI="
  },
  "registry": "npm",
  "hash": "68a66410decca8bbbf15fe68b6bd495b6e42e872"
}