{
  "manifest": {
    "name": "@ensdomains/address-encoder",
    "version": "0.1.9",
    "description": "Encodes and decodes address formats for various cryptocurrencies",
    "source": "src/index.ts",
    "main": "lib/index.js",
    "module": "lib/index.module.js",
    "types": "lib/index.d.ts",
    "scripts": {
      "build": "microbundle --external crypto",
      "format": "prettier --write \"src/**/*.ts\" \"src/**/*.js\"",
      "lint": "tslint -p tsconfig.json",
      "prepare": "npm run build",
      "prepublishOnly": "npm run test",
      "size": "browserify lib/index.js | wc -c",
      "test": "jest --config jestconfig.json"
    },
    "files": [
      "lib/**/*"
    ],
    "keywords": [
      "blockchain",
      "cryptocurrency",
      "bitcoin",
      "ethereum",
      "encoding"
    ],
    "author": {
      "name": "Nick Johnson",
      "email": "nick@ens.domains"
    },
    "license": "BSD-3-Clause",
    "devDependencies": {
      "@types/jest": "^24.0.18",
      "@types/node": "^12.7.12",
      "browserify": "^16.5.0",
      "jest": "^26.4.2",
      "microbundle": "^0.12.4",
      "prettier": "^1.18.2",
      "ts-jest": "^26.4.1",
      "tslint": "^5.20.0",
      "tslint-config-prettier": "^1.18.0",
      "typescript": "^3.8.2"
    },
    "dependencies": {
      "bech32": "^1.1.3",
      "blakejs": "^1.1.0",
      "bn.js": "^4.11.8",
      "bs58": "^4.0.1",
      "crypto-addr-codec": "^0.1.7",
      "nano-base32": "^1.0.1",
      "ripemd160": "^2.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@ensdomains-address-encoder-0.1.9-f948c485443d9ef7ed2c0c4790e931c33334d02d-integrity/node_modules/@ensdomains/address-encoder/package.json",
    "readmeFilename": "README.md",
    "readme": "# address-encoder\nThis typescript library encodes and decodes address formats for various cryptocurrencies.\n\nText-format addresses are decoded into their native binary representations, and vice-versa. In the case of Bitcoin-derived chains, this means their scriptPubKey; for Ethereum-derived chains this is their hash.\n\nThis library was written for use with [EIP 2304](https://eips.ethereum.org/EIPS/eip-2304), but may be useful for anyone looking for a general purpose cryptocurrency address codec.\n\n## Installation\n\n### Using NPM\n\n```\nnpm install --save @ensdomains/address-encoder\n```\n\n## Usage\n\n```\nimport { formatsByName, formatsByCoinType } from '@ensdomains/address-encoder';\n\nconst data = formatsByName['BTC'].decoder('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa');\nconsole.log(data.toString('hex')); // 76a91462e907b15cbf27d5425399ebf6f0fb50ebb88f1888ac\nconst addr = formatsByCoinType[0].encoder(data);\nconsole.log(addr); // 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n```\n\n## Supported cryptocurrencies\n\nThis library currently supports the following cryptocurrencies and address formats (ordered alphabetically):\n\n - ADA (bech32)\n - AIB (base58check P2PKH and P2SH)\n - ALGO (checksummed-base32)\n - ARK (base58check)\n - ATOM (bech32)\n - BCH (base58check and cashAddr; decodes to cashAddr)\n - BNB (bech32)\n - BPS (base58check P2PKH and P2SH)\n - BTC (base58check P2PKH and P2SH, and bech32 segwit)\n - CCA (base58check P2PKH and P2SH)\n - CCXX (base58check P2PKH and P2SH, and bech32 segwit)\n - CELO (checksummed-hex)\n - DASH (base58check P2PKH and P2SH)\n - DCR (base58, no check)\n - DIVI (base58check P2PKH and P2SH)\n - DOGE (base58check P2PKH and P2SH)\n - DOT (ss58)\n - EGLD (bech32)\n - ELA (base58)\n - EOS\n - ETC (checksummed-hex)\n - ETH (checksummed-hex)\n - FIL (base10 + leb128 and base32 + blake2b checksum)\n - HBAR\n - HIVE (base58+ripemd160-checksum)\n - HNS\n - ICX\n - IOTX (bech32)\n - KSM (ss58)\n - LRG (base58check P2PKH and P2SH)\n - LTC (base58check P2PHK and P2SH, and bech32 segwit)\n - MONA (base58check P2PKH and P2SH, and bech32 segwit)\n - NANO (nano-base32)\n - NEM(XEM) (base32)\n - NEO (base58check)\n - ONE (bech32)\n - ONT (base58check)\n - PPC (base58check P2PKH and P2SH)\n - QTUM (base58check)\n - RDD (base58check P2PKH and P2SH)\n - RSK (checksummed-hex)\n - SOL (base58, no check)\n - STEEM (base58+ripemd160-checksum)\n - SYS (base58check P2PKH and P2SH, and bech32 segwit)\n - TRX (base58check)\n - VET (checksummed-hex)\n - XDAI (checksummed-hex)\n - XLM (ed25519 public key)\n - XRP (base58check-ripple)\n - XTZ (base58check)\n - ZEC (transparent addresses: base58check P2PKH and P2SH, and Sapling shielded payment addresses: bech32; doesn't support Sprout shielded payment addresses)\n - ZIL (bech32)\n\nPRs to add additional chains and address types are welcome.\n",
    "licenseText": "BSD 3-Clause License\n\nCopyright (c) 2019, Ethereum Name Service\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@ensdomains/address-encoder/-/address-encoder-0.1.9.tgz#f948c485443d9ef7ed2c0c4790e931c33334d02d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@ensdomains/address-encoder/-/address-encoder-0.1.9.tgz",
    "hash": "f948c485443d9ef7ed2c0c4790e931c33334d02d",
    "integrity": "sha512-E2d2gP4uxJQnDu2Kfg1tHNspefzbLT8Tyjrm5sEuim32UkU2sm5xL4VXtgc2X33fmPEw9+jUMpGs4veMbf+PYg==",
    "registry": "npm",
    "packageName": "@ensdomains/address-encoder",
    "cacheIntegrity": "sha512-E2d2gP4uxJQnDu2Kfg1tHNspefzbLT8Tyjrm5sEuim32UkU2sm5xL4VXtgc2X33fmPEw9+jUMpGs4veMbf+PYg== sha1-+UjEhUQ9nvftLAxHkOkxwzM00C0="
  },
  "registry": "npm",
  "hash": "f948c485443d9ef7ed2c0c4790e931c33334d02d"
}