{
  "manifest": {
    "name": "progress-stream",
    "version": "1.2.0",
    "description": "Read the progress of a stream",
    "repository": {
      "type": "git",
      "url": "git@github.com:freeall/progress-stream.git"
    },
    "keywords": [
      "stream",
      "progress",
      "percentage",
      "percent",
      "download",
      "upload",
      "file",
      "streaming",
      "request",
      "http"
    ],
    "main": "index.js",
    "dependencies": {
      "through2": "~0.2.3",
      "speedometer": "~0.1.2"
    },
    "devDependencies": {
      "request": "~2.29.0",
      "single-line-log": "~1.0.0",
      "numeral": "~1.5.2"
    },
    "scripts": {
      "test": "node test/http.js && node test/request.js"
    },
    "author": {
      "name": "freeall",
      "email": "freeall@gmail.com"
    },
    "license": "BSD-2-Clause",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-progress-stream-1.2.0-2cd3cfea33ba3a89c9c121ec3347abe9ab125f77-integrity/node_modules/progress-stream/package.json",
    "readmeFilename": "README.md",
    "readme": "# progress-stream\n\nRead the progress of a stream. Supports speed and eta.\n\nGets the lengths of the stream automatically if you're using the request or http module. You can also pass the length on initiation. Progress-stream will also check to see if the stream already have a length property.\n\n\tnpm install progress-stream\n\n## Usage\n\nThis example copies a large file, and prints out the percentage, speed and remaining every 100ms.\n\n```js\nvar progress = require('progress-stream');\nvar fs = require('fs');\n\nvar stat = fs.statSync(filename);\nvar str = progress({\n\tlength: stat.size,\n\ttime: 100\n});\n\nstr.on('progress', function(progress) {\n\tconsole.log(progress);\n\n\t/*\n\t{\n\t\tpercentage: 9.05,\n\t\ttransferred: 949624,\n\t\tlength: 10485760,\n\t\tremaining: 9536136,\n\t\teta: 42,\n\t\truntime: 3,\n\t\tdelta: 295396,\n\t\tspeed: 949624\n\t}\n\t*/\n});\n\nfs.createReadStream(filename)\n\t.pipe(str)\n\t.pipe(fs.createWriteStream(output));\n```\n\n## Methods\n\n### progress([options], [onprogress])\n\nYou can instantiate in two ways:\n\n``` js\nvar str = progress({time:100});\nstr.on('progress', function(progress) { ... });\n```\n\nor inline the progress listener\n\n``` js\nvar str = progress({time:100}, function(progress) { ... });\n```\n\n## Properties\n\n### .progress\n\nYou can get the progress from the progress property.\n\n``` js\nvar str = progress({time:100});\n\nconsole.log(str.progress);\n\n/*\n{\n\tpercentage: 9.05,\n\ttransferred: 949624,\n\tlength: 10485760,\n\tremaining: 9536136,\n\teta: 10,\n\truntime: 0,\n\tdelta: 295396,\n\tspeed: 949624\n}\n*/\n```\n\n## Events\n\n### on('progress', function(progress) { ... })\n\n``` js\nvar str = progress({time:100});\nstr.on('progress', function(progress) { ... });\n```\n\n## Options\n\n### time(integer)\n\nSets how often progress events is emitted. If omitted then defaults to emit every time a chunk is received.\n\n### speed(integer)\n\nSets how long the speedometer needs to calculate the speed. Defaults to 5 sec.\n\n### length(integer)\n\nIf you already know the length of the stream, then you can set it. Defaults to 0.\n\n### drain(boolean)\n\nIn case you don't want to include a readstream after progress-stream, set to true to drain automatically. Defaults to false.\n\n### transferred(integer)\n\nIf you want to set how much data have previous been downloaded. Useful for a resumed download.\n\n## Examples\n\n### Using the request module\n\nThis example uses request to download a 100 MB file, and writes out the percentage every second.\n\nYou can also find an example in `test/request.js`.\n\n``` js\nvar progress = require('progress-stream');\nvar req = require('request');\nvar fs = require('fs');\n\nvar str = progress({\n\ttime: 1000\n});\n\nstr.on('progress', function(progress) {\n\tconsole.log(Math.round(progress.percentage)+'%');\n});\n\nreq('http://cachefly.cachefly.net/100mb.test', { headers: { 'user-agent': 'test' }})\n\t.pipe(str)\n\t.pipe(fs.createWriteStream('test.data'));\n```\n\n### Using the http module\n\nIn `test/http.js` it's shown how to do it with the http module.\n\n\n## Methods\n\n\n### `setLength(newLength)`\n\nSometimes, you don't know how big a stream is right away (e.g. multipart file uploads).  You might find out after a few chunks have already passed through the stream, seconds or even minutes later.  In this case, you can use the `setLength` method to recalculate the relevant tracked progress data.\n\n```js\nvar str = progress({});\nsomeFickleStreamInstance.pipe(str).pipe(fs.createWriteStream('test.data'));\n\nsomeFickleStreamInstance.on('conviction', function nowIKnowMyLength (actualLength) {\n  str.setLength(actualLength);\n});\n```\n",
    "licenseText": "Copyright (c) Tobias Baunb√¶k <freeall@gmail.com>\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n- Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/progress-stream/-/progress-stream-1.2.0.tgz#2cd3cfea33ba3a89c9c121ec3347abe9ab125f77",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/progress-stream/-/progress-stream-1.2.0.tgz",
    "hash": "2cd3cfea33ba3a89c9c121ec3347abe9ab125f77",
    "integrity": "sha512-MIBPjZz6oGNSw5rn2mSp+nP9FGoaVo6QsPyPVEaD4puilz5hZNa3kfnrlqRNYFsugslbU3An4mnkLLtZOaWvrA==",
    "registry": "npm",
    "packageName": "progress-stream",
    "cacheIntegrity": "sha512-MIBPjZz6oGNSw5rn2mSp+nP9FGoaVo6QsPyPVEaD4puilz5hZNa3kfnrlqRNYFsugslbU3An4mnkLLtZOaWvrA== sha1-LNPP6jO6OonJwSHsM0er6asSX3c="
  },
  "registry": "npm",
  "hash": "2cd3cfea33ba3a89c9c121ec3347abe9ab125f77"
}