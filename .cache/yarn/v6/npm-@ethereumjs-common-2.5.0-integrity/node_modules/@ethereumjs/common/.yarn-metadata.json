{
  "manifest": {
    "name": "@ethereumjs/common",
    "version": "2.5.0",
    "description": "Resources common to all Ethereum implementations",
    "license": "MIT",
    "keywords": [
      "ethereum",
      "ethereumjs",
      "constants",
      "parameters",
      "genesis",
      "networks",
      "bootstrap"
    ],
    "files": [
      "dist",
      "dist.browser",
      "src"
    ],
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "browser": "dist.browser/index.js",
    "scripts": {
      "build": "npm run build:node && npm run build:browser",
      "build:node": "../../config/cli/ts-build.sh node",
      "build:browser": "../../config/cli/ts-build.sh browser",
      "prepublishOnly": "../../config/cli/prepublish.sh",
      "clean": "../../config/cli/clean-package.sh",
      "coverage": "../../config/cli/coverage.sh",
      "format": "ethereumjs-config-format",
      "format:fix": "ethereumjs-config-format-fix",
      "tsc": "../../config/cli/ts-compile.sh",
      "lint": "../../config/cli/lint.sh",
      "lint:fix": "../../config/cli/lint-fix.sh",
      "tape": "tape -r ts-node/register",
      "test": "npm run test:node && npm run test:browser",
      "test:node": "npm run tape -- ./tests/*.spec.ts",
      "test:browser": "karma start karma.conf.js",
      "docs:build": "typedoc --options typedoc.js"
    },
    "dependencies": {
      "crc-32": "^1.2.0",
      "ethereumjs-util": "^7.1.1"
    },
    "devDependencies": {
      "@types/node": "^11.13.4",
      "@types/tape": "^4.13.2",
      "eslint": "^6.8.0",
      "karma": "^6.3.2",
      "karma-chrome-launcher": "^3.1.0",
      "karma-firefox-launcher": "^2.1.0",
      "karma-tap": "^4.2.0",
      "karma-typescript": "^5.5.1",
      "nyc": "^14.0.0",
      "prettier": "^2.0.5",
      "tape": "^5.3.1",
      "typedoc": "^0.22.4",
      "ts-node": "^10.2.1",
      "typescript": "^4.4.2"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/ethereumjs/ethereumjs-monorepo.git"
    },
    "homepage": "https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/common#readme",
    "bugs": {
      "url": "https://github.com/ethereumjs/ethereumjs-monorepo/issues?q=is%3Aissue+label%3A%22package%3A+common%22"
    },
    "maintainers": [
      {
        "name": "Holger Drewes",
        "email": "Holger.Drewes@gmail.com"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@ethereumjs-common-2.5.0-integrity/node_modules/@ethereumjs/common/package.json",
    "readmeFilename": "README.md",
    "readme": "# @ethereumjs/common\n\n[![NPM Package][common-npm-badge]][common-npm-link]\n[![GitHub Issues][common-issues-badge]][common-issues-link]\n[![Actions Status][common-actions-badge]][common-actions-link]\n[![Code Coverage][common-coverage-badge]][common-coverage-link]\n[![Discord][discord-badge]][discord-link]\n\n| Resources common to all EthereumJS implementations. |\n| --- |\n\nNote: this `README` reflects the state of the library from `v2.0.0` onwards. See `README` from the [standalone repository](https://github.com/ethereumjs/ethereumjs-common) for an introduction on the last preceding release.\n\n# INSTALL\n\n`npm install @ethereumjs/common`\n\n# USAGE\n\nAll parameters can be accessed through the `Common` class which can be required through the\nmain package and instantiated either with just the `chain` (e.g. 'mainnet') or the `chain`\ntogether with a specific `hardfork` provided.\n\nIf no hardfork is provided, the common is initialized with the default hardfork.\n\nCurrent `DEFAULT_HARDFORK`: `istanbul`\n\nHere are some simple usage examples:\n\n```typescript\nimport Common from '@ethereumjs/common'\n\n// Instantiate with the chain (and the default hardfork)\nconst c = new Common({ chain: 'ropsten' })\nc.param('gasPrices', 'ecAddGas') // 500\n\n// Chain and hardfork provided\nc = new Common({ chain: 'ropsten', hardfork: 'byzantium' })\nc.param('pow', 'minerReward') // 3000000000000000000\n\n// Instantiate with an EIP activated\nconst c = new Common({ chain: 'mainnet', eips: [2537] })\n\n// Access genesis data for Ropsten network\nc.genesis().hash // 0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d\n\n// Get bootstrap nodes for chain/network\nc.bootstrapNodes() // Array with current nodes\n```\n\nIf the initializing library only supports a certain range of `hardforks` you can use the `supportedHardforks` option to restrict hardfork access on the `Common` instance:\n\n```typescript\nconst c = new Common({\n  chain: 'ropsten',\n  supportedHardforks: ['byzantium', 'constantinople', 'petersburg'],\n})\n```\n\nThis will e.g. throw an error when a param is requested for an unsupported hardfork and\nlike this prevents unpredicted behaviour.\n\nFor an improved developer experience, there are `Chain` and `Hardfork` enums available:\n\n```typescript\nimport Common, { Chain, Hardfork } from '@ethereumjs/common'\n\n// Chain provided by Chain enum\nconst c = new Common({ chain: Chain.Mainnet })\n\n// Chain provided by Chain enum, hardfork provided by Hardfork enum\nconst c = new Common({ chain: Chain.Ropsten, hardfork: Hardfork.Byzantium })\n```\n\n# API\n\nSee the API documentation for a full list of functions for accessing specific chain and\ndepending hardfork parameters. There are also additional helper functions like\n`paramByBlock (topic, name, blockNumber)` or `hardforkIsActiveOnBlock (hardfork, blockNumber)`\nto ease `blockNumber` based access to parameters.\n\n- [API Docs](./docs/README.md)\n\n# EVENTS\n\nThe `Common` class is implemented as an `EventEmitter` and is emitting the following events\non which you can react within your code:\n\n| Event | Description |\n| - | - |\n| `hardforkChanged` | Emitted when a hardfork change occurs in the Common object |\n\n# SETUP\n\n## Chains\n\nThe `chain` can be set in the constructor like this:\n\n```typescript\nconst c = new Common({ chain: 'ropsten' })\n```\n\nOr optionally with the `Chain` enum:\n\n```typescript\nimport Common, { Chain } from '@ethereumjs/common'\n\nconst c = new Common({ chain: Chain.Ropsten })\n```\n\nSupported chains:\n\n- `mainnet` (`Chain.Mainnet`)\n- `ropsten` (`Chain.Ropsten`)\n- `rinkeby` (`Chain.Rinkeby`)\n- `kovan` (`Chain.Kovan`)\n- `goerli` (`Chain.Goerli`)\n- Private/custom chain parameters\n\nThe following chain-specific parameters are provided:\n\n- `name`\n- `chainId`\n- `networkId`\n- `consensusType` (e.g. `pow` or `poa`)\n- `consensusAlgorithm` (e.g. `ethash` or `clique`)\n- `consensusConfig` (depends on `consensusAlgorithm`, e.g. `period` and `epoch` for `clique`)\n- `genesis` block header values\n- `hardforks` block numbers\n- `bootstrapNodes` list\n- `dnsNetworks` list ([EIP-1459](https://eips.ethereum.org/EIPS/eip-1459)-compliant list of DNS networks for peer discovery)\n\nTo get an overview of the different parameters have a look at one of the chain-specifc\nfiles like `mainnet.json` in the `chains` directory, or to the `Chain` type in [./src/types.ts](./src/types.ts).\n\n### Working with private/custom chains\n\nThere are two distinct APIs available for setting up custom(ized) chains.\n\n#### Activate with a single custom Chain setup\n\nIf you want to initialize a `Common` instance with a single custom chain which is then directly activated\nyou can pass a dictionary - conforming to the parameter format described above - with your custom chain \nvalues to the constructor using the `chain` parameter or the `setChain()` method, here is some example:\n\n```typescript\nimport myCustomChain from './[PATH]/myCustomChain.json'\nconst common = new Common({ chain: myCustomChain })\n```\n\nIf you just want to change certain parameters on a chain configuration it can also be convenient to use\nthe `Common.forCustomChain()` method. With this method you can base your custom chain configuration with\na standard one (so using all the values from `baseChain` as the default values) and then just provide the\nparameters you want to override:\n\n```typescript\nconst customChainParams = { name: 'custom', chainId: 123, networkId: 678 }\nconst customChainCommon = Common.forCustomChain('mainnet', customChainParams, 'byzantium')\n```\n\n#### Initialize using customChains Array\n\nA second way for custom chain initialization is to use the `customChains` constructor option. This\noption comes with more flexibility and allows for an arbitrary number of custom chains to be initialized on\na common instance in addition to the already supported ones. It also allows for an activation-independent \ninitialization, so you can add your chains by adding to the `customChains` array and either directly \nuse the `chain` option to activate one of the custom chains passed or activate a build in chain \n(e.g. `mainnet`) and switch to other chains - including the custom ones - by using `Common.setChain()`.\n\n```typescript\nimport myCustomChain1 from './[PATH]/myCustomChain1.json'\nimport myCustomChain2 from './[PATH]/myCustomChain2.json'\n// Add two custom chains, initial mainnet activation\nconst common1 = new Common({ chain: 'mainnet', customChains: [ myCustomChain1, myCustomChain2 ] })\n// Somewhat later down the road...\ncommon1.setChain('customChain1')\n// Add two custom chains, activate customChain1\nconst common1 = new Common({ chain: 'customChain1', customChains: [ myCustomChain1, myCustomChain2 ] })\n```\n\nIt is also possible (`v2.5.0`+) to pass in a custom genesis state file (see e.g. `src/genesisStates/goerli.json` for an example on the format needed) along with the custom chain configuration:\n\n```typescript\nimport myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\nimport chain1GenesisState from '[PATH_TO_GENESIS_STATES]/chain1GenesisState.json'\nconst common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, chain1GenesisState ] ]})\n```\n\nAccessing the genesis state can be done as follows:\n\n```typescript\nconst genesisState = common.genesisState()\n```\n\nThis now also provides direct access to custom genesis states passed into `Common` as described above. The old Common-separate `genesisStateByName()` and `genesisStateById()` functions are now `deprecated` and usage should be avoided.\n\n## Hardforks\n\nThe `hardfork` can be set in constructor like this:\n\n```typescript\nconst c = new Common({ chain: 'ropsten', hardfork: 'byzantium' })\n```\n\nOr optionally with the `Hardfork` enum:\n\n```typescript\nimport Common, { Chain, Hardfork } from '@ethereumjs/common'\n\nconst c = new Common({\n  chain: Chain.Ropsten,\n  hardfork: Hardfork.Byzantium,\n})\n```\n\n### Active Hardforks\n\nThere are currently parameter changes by the following past and future hardfork by the\nlibrary supported:\n\n- `chainstart` (`Hardfork.Chainstart`)\n- `homestead` (`Hardfork.Homestead`)\n- `dao` (`Hardfork.Dao`)\n- `tangerineWhistle` (`Hardfork.TangerineWhistle`)\n- `spuriousDragon` (`Hardfork.SpuriousDragon`)\n- `byzantium` (`Hardfork.Byzantium`)\n- `constantinople` (`Hardfork.Constantinople`)\n- `petersburg` (`Hardfork.Petersburg`) (aka `constantinopleFix`, apply together with `constantinople`)\n- `istanbul` (`Hardfork.Instanbul`) (`DEFAULT_HARDFORK` (`v2.0.0` release series))\n- `muirGlacier` (`Hardfork.MuirGlacier`)\n- `berlin` (`Hardfork.Berlin`) (since `v2.2.0`)\n- `london` (`Hardfork.London`) (since `v2.4.0`)\n- `merge` (`Hardfork.Merge`) (since `v2.5.0`, `experimental`)\n\n### Future Hardforks\n\nThe next upcoming HF `shanghai` is currently not yet supported by this library.\n\n### Parameter Access\n\nFor hardfork-specific parameter access with the `param()` and `paramByBlock()` functions\nyou can use the following `topics`:\n\n- `gasConfig`\n- `gasPrices`\n- `vm`\n- `pow`\n\nSee one of the hardfork files like `byzantium.json` in the `hardforks` directory\nfor an overview. For consistency, the chain start (`chainstart`) is considered an own\nhardfork.\n\nThe hardfork-specific json files only contain the deltas from `chainstart` and\nshouldn't be accessed directly until you have a specific reason for it.\n\n## EIPs\n\nStarting with the `v2.0.0` release of the library, EIPs are now native citizens within the library\nand can be activated like this:\n\n```typescript\nconst c = new Common({ chain: Chain.Mainnet, eips: [2537] })\n```\n\nThe following EIPs are currently supported:\n\n- [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559): Fee market change for ETH 1.0 chain\n- [EIP-2315](https://eips.ethereum.org/EIPS/eip-2315): Simple subroutines for the EVM\n- [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537): BLS precompiles\n- [EIP-2565](https://eips.ethereum.org/EIPS/eip-2565): ModExp gas cost\n- [EIP-2718](https://eips.ethereum.org/EIPS/eip-2565): Transaction Types\n- [EIP-2929](https://eips.ethereum.org/EIPS/eip-2929): gas cost increases for state access opcodes\n- [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930): Optional accesss list tx type\n- [EIP-3198](https://eips.ethereum.org/EIPS/eip-3198): Base fee Opcode\n- [EIP-3529](https://eips.ethereum.org/EIPS/eip-3529): Reduction in refunds\n- [EIP-3541](https://eips.ethereum.org/EIPS/eip-3541): Reject new contracts starting with the 0xEF byte\n- [EIP-3554](https://eips.ethereum.org/EIPS/eip-3554): Difficulty Bomb Delay to December 2021 (only PoW networks)\n- [EIP-3675](https://eips.ethereum.org/EIPS/eip-3675): Upgrade consensus to Proof-of-Stake (`experimental`)\n\n## Bootstrap Nodes\n\nYou can use `common.bootstrapNodes()` function to get nodes for a specific chain/network.\n\n# EthereumJS\n\nSee our organizational [documentation](https://ethereumjs.readthedocs.io) for an introduction to `EthereumJS` as well as information on current standards and best practices.\n\nIf you want to join for work or do improvements on the libraries have a look at our [contribution guidelines](https://ethereumjs.readthedocs.io/en/latest/contributing.html).\n\n# LICENSE\n\n[MIT](https://opensource.org/licenses/MIT)\n\n[discord-badge]: https://img.shields.io/static/v1?logo=discord&label=discord&message=Join&color=blue\n[discord-link]: https://discord.gg/TNwARpR\n[common-npm-badge]: https://img.shields.io/npm/v/@ethereumjs/common.svg\n[common-npm-link]: https://www.npmjs.com/package/@ethereumjs/common\n[common-issues-badge]: https://img.shields.io/github/issues/ethereumjs/ethereumjs-monorepo/package:%20common?label=issues\n[common-issues-link]: https://github.com/ethereumjs/ethereumjs-monorepo/issues?q=is%3Aopen+is%3Aissue+label%3A\"package%3A+common\"\n[common-actions-badge]: https://github.com/ethereumjs/ethereumjs-monorepo/workflows/Common/badge.svg\n[common-actions-link]: https://github.com/ethereumjs/ethereumjs-monorepo/actions?query=workflow%3A%22Common%22\n[common-coverage-badge]: https://codecov.io/gh/ethereumjs/ethereumjs-monorepo/branch/master/graph/badge.svg?flag=common\n[common-coverage-link]: https://codecov.io/gh/ethereumjs/ethereumjs-monorepo/tree/master/packages/common\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@ethereumjs/common/-/common-2.5.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@ethereumjs/common/-/common-2.5.0.tgz",
    "hash": "",
    "integrity": "sha512-DEHjW6e38o+JmB/NO3GZBpW4lpaiBpkFgXF6jLcJ6gETBYpEyaA5nTimsWBUJR3Vmtm/didUEbNjajskugZORg==",
    "registry": "npm",
    "packageName": "@ethereumjs/common",
    "cacheIntegrity": "sha512-DEHjW6e38o+JmB/NO3GZBpW4lpaiBpkFgXF6jLcJ6gETBYpEyaA5nTimsWBUJR3Vmtm/didUEbNjajskugZORg== sha1-7GFVGzG+96adHcY02JMkaIZqQmg="
  },
  "registry": "npm",
  "hash": "0c41e35ba7b7f28f89981fcd3b71990695b89696a206990581717a8cb709ea0113058a44c9a0399d38a6b16054251dd59ad9bf76275411b3636a3b24ba064e46"
}