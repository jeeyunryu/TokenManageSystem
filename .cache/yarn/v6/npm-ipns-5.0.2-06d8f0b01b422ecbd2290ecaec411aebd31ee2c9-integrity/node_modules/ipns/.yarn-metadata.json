{
  "manifest": {
    "name": "ipns",
    "version": "5.0.2",
    "description": "ipns record definitions",
    "author": {
      "name": "Vasco Santos",
      "email": "vasco.santos@moxy.studio"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/ipfs/js-ipns#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipns.git"
    },
    "bugs": {
      "url": "https://github.com/ipfs/js-ipns/issues"
    },
    "keywords": [
      "ipfs",
      "ipns"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ],
        "src/*": [
          "*",
          "dist/*",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      },
      "./selector": {
        "types": "./dist/src/selector.d.ts",
        "import": "./dist/src/selector.js"
      },
      "./validator": {
        "types": "./dist/src/validator.d.ts",
        "import": "./dist/src/validator.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      },
      "ignorePatterns": [
        "src/pb/ipns.d.ts"
      ]
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "dep-check": "aegir dep-check -i protons",
      "build": "aegir build",
      "test": "aegir test",
      "test:node": "aegir test -t node --cov",
      "test:chrome": "aegir test -t browser --cov",
      "test:chrome-webworker": "aegir test -t webworker",
      "test:firefox": "aegir test -t browser -- --browser firefox",
      "test:firefox-webworker": "aegir test -t webworker -- --browser firefox",
      "test:electron-main": "aegir test -t electron-main",
      "release": "aegir release",
      "generate": "protons src/pb/ipns.proto",
      "docs": "aegir docs"
    },
    "dependencies": {
      "@libp2p/crypto": "^1.0.0",
      "@libp2p/interface-dht": "^2.0.0",
      "@libp2p/interface-keys": "^1.0.3",
      "@libp2p/interface-peer-id": "^2.0.0",
      "@libp2p/logger": "^2.0.0",
      "@libp2p/peer-id": "^2.0.0",
      "cborg": "^1.3.3",
      "err-code": "^3.0.1",
      "interface-datastore": "^7.0.0",
      "multiformats": "^11.0.0",
      "protons-runtime": "^4.0.1",
      "timestamp-nano": "^1.0.0",
      "uint8arraylist": "^2.4.3",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "@libp2p/peer-id-factory": "^2.0.0",
      "aegir": "^38.1.7",
      "protons": "^6.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ipns-5.0.2-06d8f0b01b422ecbd2290ecaec411aebd31ee2c9-integrity/node_modules/ipns/package.json",
    "readmeFilename": "README.md",
    "readme": "# ipns <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipns.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipns)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipns/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-ipns/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> ipns record definitions\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Lead Maintainer <!-- omit in toc -->](#lead-maintainer----omit-in-toc---)\n- [Usage](#usage)\n  - - [Create record](#create-record)\n    - [Validate record](#validate-record)\n    - [Embed public key to record](#embed-public-key-to-record)\n    - [Extract public key from record](#extract-public-key-from-record)\n    - [Datastore key](#datastore-key)\n    - [Marshal data with proto buffer](#marshal-data-with-proto-buffer)\n    - [Unmarshal data from proto buffer](#unmarshal-data-from-proto-buffer)\n    - [Validator](#validator)\n- [API](#api)\n  - - [Create record](#create-record-1)\n    - [Validate record](#validate-record-1)\n    - [Datastore key](#datastore-key-1)\n    - [Marshal data with proto buffer](#marshal-data-with-proto-buffer-1)\n    - [Unmarshal data from proto buffer](#unmarshal-data-from-proto-buffer-1)\n    - [Embed public key to record](#embed-public-key-to-record-1)\n    - [Extract public key from record](#extract-public-key-from-record-1)\n    - [Namespace](#namespace)\n- [Contribute](#contribute)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute-1)\n\n## Install\n\n```console\n$ npm i ipns\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `Ipns` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipns/dist/index.min.js\"></script>\n```\n\nThis module contains all the necessary code for creating, understanding and validating IPNS records.\n\n## Lead Maintainer <!-- omit in toc -->\n\n[Vasco Santos](https://github.com/vasco-santos).\n\n## Usage\n\n#### Create record\n\n```js\nimport * as ipns from 'ipns'\n\nconst entryData = await ipns.create(privateKey, value, sequenceNumber, lifetime)\n```\n\n#### Validate record\n\n```js\nimport * as ipns from 'ipns'\n\nawait ipns.validate(publicKey, ipnsEntry)\n// if no error thrown, the record is valid\n```\n\n#### Embed public key to record\n\n```js\nimport * as ipns from 'ipns'\n\nconst ipnsEntryWithEmbedPublicKey = await ipns.embedPublicKey(publicKey, ipnsEntry)\n```\n\n#### Extract public key from record\n\n```js\nimport * as ipns from 'ipns'\n\nconst publicKey = ipns.extractPublicKey(peerId, ipnsEntry)\n```\n\n#### Datastore key\n\n```js\nimport * as ipns from 'ipns'\n\nipns.getLocalKey(peerId)\n```\n\nReturns a key to be used for storing the ipns entry locally, that is:\n\n    /ipns/${base32(<HASH>)}\n\n#### Marshal data with proto buffer\n\n```js\nimport * as ipns from 'ipns'\n\nconst entryData = await ipns.create(privateKey, value, sequenceNumber, lifetime)\n// ...\nconst marshalledData = ipns.marshal(entryData)\n// ...\n```\n\nReturns the entry data serialized.\n\n#### Unmarshal data from proto buffer\n\n```js\nimport * as ipns from 'ipns'\n\nconst data = ipns.unmarshal(storedData)\n```\n\nReturns the entry data structure after being serialized.\n\n#### Validator\n\n```js\nimport * as ipns from 'ipns'\n\nconst validator = ipns.validator\n```\n\nContains an object with `validate (marshalledData, key)` and `select (dataA, dataB)` functions.\n\nThe `validate` async function aims to verify if an IPNS record is valid. First the record is unmarshalled, then the public key is obtained and finally the record is validated (`signatureV2` of CBOR `data` is verified).\n\nThe `select` function is responsible for deciding which ipns record is the best (newer) between two records. Both records are unmarshalled and their sequence numbers are compared. If the first record provided is the newer, the operation result will be `0`, otherwise the operation result will be `1`.\n\n## API\n\n#### Create record\n\n```js\n\nipns.create(privateKey, value, sequenceNumber, lifetime)\n```\n\nCreate an IPNS record for being stored in a protocol buffer.\n\n- `privateKey` (`PrivKey` [RSA Instance](https://github.com/libp2p/js-libp2p-crypto/blob/master/src/keys/rsa-class.js)): key to be used for cryptographic operations.\n- `value` (Uint8Array): ipfs path of the object to be published.\n- `sequenceNumber` (Number): number representing the current version of the record.\n- `lifetime` (Number): lifetime of the record (in milliseconds).\n\nReturns a `Promise` that resolves to an object with the entry's properties eg:\n\n```js\n{\n  value: Uint8Array,\n  signature: Uint8Array, // V1 (legacy, ignored)\n  validityType: 0,\n  validity: Uint8Array,\n  sequence: 2,\n  signatureV2: Uint8Array, // V2 signature of data field\n  data: Uint8Array // DAG-CBOR that was signed\n}\n```\n\n#### Validate record\n\n```js\nipns.validate(publicKey, ipnsEntry)\n```\n\nValidate an IPNS record previously stored in a protocol buffer.\n\n- `publicKey` (`PubKey` [RSA Instance](https://github.com/libp2p/js-libp2p-crypto/blob/master/src/keys/rsa-class.js)): key to be used for cryptographic operations.\n- `ipnsEntry` (Object): ipns entry record (obtained using the create function).\n\nReturns a `Promise`, which may be rejected if the validation was not successful.\n\n#### Datastore key\n\n```js\nipns.getDatastoreKey(peerId)\n```\n\nGet a key for storing the ipns entry in the datastore.\n\n- `peerId` (`Uint8Array`): peer identifier.\n\n#### Marshal data with proto buffer\n\n```js\nconst marshalledData = ipns.marshal(entryData)\n```\n\nReturns the entry data serialized.\n\n- `entryData` (Object): ipns entry record (obtained using the create function).\n\n#### Unmarshal data from proto buffer\n\n```js\nconst data = ipns.unmarshal(storedData)\n```\n\nReturns the entry data structure after being serialized.\n\n- `storedData` (Uint8Array): ipns entry record serialized.\n\n#### Embed public key to record\n\n```js\nconst recordWithPublicKey = await ipns.embedPublicKey(publicKey, ipnsEntry)\n```\n\nEmbed a public key in an IPNS entry. If it is possible to extract the public key from the `peer-id`, there is no need to embed.\n\n- `publicKey` (`PubKey` [RSA Instance](https://github.com/libp2p/js-libp2p-crypto/blob/master/src/keys/rsa-class.js)): key to be used for cryptographic operations.\n- `ipnsEntry` (Object): ipns entry record (obtained using the create function).\n\nReturns a `Promise`. If the promise resolves to null it means the public key can be extracted directly from the `peer-id`.\n\n#### Extract public key from record\n\n```js\nipns.extractPublicKey(peerId, ipnsEntry, [callback])\n```\n\nExtract a public key from an IPNS entry.\n\n- `peerId` (`PeerId` [Instance](https://github.com/libp2p/js-peer-id)): peer identifier object.\n- `ipnsEntry` (Object): ipns entry record (obtained using the create function).\n\nThe returned public key (`PubKey` [RSA Instance](https://github.com/libp2p/js-libp2p-crypto/blob/master/src/keys/rsa-class.js)): may be used for cryptographic operations.\n\n#### Namespace\n\nNamespace constants for records.\n\n```js\nipns.namespace\n\n// '/ipns/'\n```\n\n```js\nipns.namespaceLength\n\n// 6\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/js-ipns/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## API Docs\n\n- <https://ipfs.github.io/js-ipns>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipns/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ipns/-/ipns-5.0.2.tgz#06d8f0b01b422ecbd2290ecaec411aebd31ee2c9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ipns/-/ipns-5.0.2.tgz",
    "hash": "06d8f0b01b422ecbd2290ecaec411aebd31ee2c9",
    "integrity": "sha512-kvM+URcCsVW6xFnE4/s9UK1H5BWRRi2Noy9LmaqRxRVALrQH3wCCrqpMtBJH1JWksBQp0ZJDddsxs7yGmhNLrA==",
    "registry": "npm",
    "packageName": "ipns",
    "cacheIntegrity": "sha512-kvM+URcCsVW6xFnE4/s9UK1H5BWRRi2Noy9LmaqRxRVALrQH3wCCrqpMtBJH1JWksBQp0ZJDddsxs7yGmhNLrA== sha1-BtjwsBtCLsvSKQ7K7EEa69Me4sk="
  },
  "registry": "npm",
  "hash": "06d8f0b01b422ecbd2290ecaec411aebd31ee2c9"
}