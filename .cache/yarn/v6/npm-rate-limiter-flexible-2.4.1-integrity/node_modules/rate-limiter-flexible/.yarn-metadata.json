{
  "manifest": {
    "name": "rate-limiter-flexible",
    "version": "2.4.1",
    "description": "Node.js rate limiter by key and protection from DDoS and Brute-Force attacks in process Memory, Redis, MongoDb, Memcached, MySQL, PostgreSQL, Cluster or PM",
    "main": "index.js",
    "scripts": {
      "test": "istanbul -v cover -- _mocha --recursive",
      "debug-test": "mocha --inspect-brk lib/**/**.test.js",
      "coveralls": "cat ./coverage/lcov.info | coveralls",
      "eslint": "eslint --quiet lib/**/**.js test/**/**.js",
      "eslint-fix": "eslint --fix lib/**/**.js test/**/**.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/animir/node-rate-limiter-flexible.git"
    },
    "keywords": [
      "authorization",
      "security",
      "rate",
      "limit",
      "ratelimter",
      "brute",
      "force",
      "bruteforce",
      "throttle",
      "koa",
      "express",
      "hapi",
      "auth",
      "ddos",
      "queue"
    ],
    "author": {
      "name": "animir",
      "email": "animirr@gmail.com"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/animir/node-rate-limiter-flexible/issues"
    },
    "homepage": "https://github.com/animir/node-rate-limiter-flexible#readme",
    "types": "./lib/index.d.ts",
    "devDependencies": {
      "chai": "^4.1.2",
      "coveralls": "^3.0.1",
      "eslint": "^4.19.1",
      "eslint-config-airbnb-base": "^12.1.0",
      "eslint-plugin-import": "^2.7.0",
      "eslint-plugin-node": "^6.0.1",
      "eslint-plugin-security": "^1.4.0",
      "istanbul": "^0.4.5",
      "memcached-mock": "^0.1.0",
      "mocha": "^5.1.1",
      "redis-mock": "^0.48.0",
      "sinon": "^5.0.10"
    },
    "browser": {
      "cluster": false,
      "crypto": false
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-rate-limiter-flexible-2.4.1-integrity/node_modules/rate-limiter-flexible/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Coverage Status](https://coveralls.io/repos/animir/node-rate-limiter-flexible/badge.svg?branch=master)](https://coveralls.io/r/animir/node-rate-limiter-flexible?branch=master)\n[![npm version](https://badge.fury.io/js/rate-limiter-flexible.svg)](https://www.npmjs.com/package/rate-limiter-flexible)\n![npm](https://img.shields.io/npm/dm/rate-limiter-flexible.svg)\n[![node version][node-image]][node-url]\n[![deno version](https://img.shields.io/badge/deno-^1.5.3-lightgrey?logo=deno)](https://github.com/denoland/deno)\n\n[node-image]: https://img.shields.io/badge/node.js-%3E=_6.0-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n\n<img src=\"img/rlflx-logo-small.png\" width=\"50\" alt=\"Logo\"/>\n\n## node-rate-limiter-flexible\n\n**rate-limiter-flexible** counts and limits number of actions by key and protects from DDoS and brute force attacks at any scale.\n\nIt works with _Redis_, process _Memory_, _Cluster_ or _PM2_, _Memcached_, _MongoDB_, _MySQL_, _PostgreSQL_ and allows to control requests rate in single process or distributed environment.\n\nMemory limiter also works in browser.\n\n**Atomic increments.** All operations in memory or distributed environment use atomic increments against race conditions.\n\nAllow **traffic bursts** with [BurstyRateLimiter](https://github.com/animir/node-rate-limiter-flexible/wiki/BurstyRateLimiter).\n\n**Fast.** Average request takes `0.7ms` in Cluster and `2.5ms` in Distributed application. See [benchmarks](https://github.com/animir/node-rate-limiter-flexible#benchmark).\n\n**Flexible.** Combine limiters, block key for some duration, delay actions, manage failover with insurance options, configure smart key blocking in memory and many others.\n\n**Ready for growth.** It provides unified API for all limiters. Whenever your application grows, it is ready. Prepare your limiters in minutes.\n\n**Friendly.** No matter which node package you prefer: `redis` or `ioredis`, `sequelize`/`typeorm` or `knex`, `memcached`, native driver or `mongoose`. It works with all of them.\n\n**In memory blocks.** Avoid extra requests to store with [inMemoryBlockOnConsumed](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#inmemoryblockonconsumed).\n\n**Deno compatible** See [this example](https://gist.github.com/animir/d06ca92931677f330d3f2d4c6c3108e4) \n\nIt uses **fixed window** as it is much faster than rolling window. \n[See comparative benchmarks with other libraries here](https://github.com/animir/node-rate-limiter-flexible/wiki/Comparative-benchmarks)\n\n## Installation\n\n`npm i --save rate-limiter-flexible`\n\n`yarn add rate-limiter-flexible`\n\n## Basic Example\n\nPoints can be consumed by IP address, user ID, authorisation token, API route or any other string.\n\n```javascript\nconst opts = {\n  points: 6, // 6 points\n  duration: 1, // Per second\n};\n\nconst rateLimiter = new RateLimiterMemory(opts);\n\nrateLimiter.consume(remoteAddress, 2) // consume 2 points\n    .then((rateLimiterRes) => {\n      // 2 points consumed\n    })\n    .catch((rateLimiterRes) => {\n      // Not enough points to consume\n    });\n```\n\n#### RateLimiterRes object\n\nBoth Promise resolve and reject return object of `RateLimiterRes` class if there is no any error.\nObject attributes:\n```javascript\nRateLimiterRes = {\n    msBeforeNext: 250, // Number of milliseconds before next action can be done\n    remainingPoints: 0, // Number of remaining points in current duration \n    consumedPoints: 5, // Number of consumed points in current duration \n    isFirstInDuration: false, // action is first in current duration \n}\n```\n\nYou may want to set next HTTP headers to response:\n```javascript\nconst headers = {\n  \"Retry-After\": rateLimiterRes.msBeforeNext / 1000,\n  \"X-RateLimit-Limit\": opts.points,\n  \"X-RateLimit-Remaining\": rateLimiterRes.remainingPoints,\n  \"X-RateLimit-Reset\": new Date(Date.now() + rateLimiterRes.msBeforeNext)\n}\n```\n\n### Advantages:\n* no race conditions\n* no production dependencies\n* TypeScript declaration bundled\n* allow traffic burst with [BurstyRateLimiter](https://github.com/animir/node-rate-limiter-flexible/wiki/BurstyRateLimiter)\n* Block Strategy against really powerful DDoS attacks (like 100k requests per sec) [Read about it and benchmarking here](https://github.com/animir/node-rate-limiter-flexible/wiki/In-memory-Block-Strategy)\n* Insurance Strategy as emergency solution if database / store is down [Read about Insurance Strategy here](https://github.com/animir/node-rate-limiter-flexible/wiki/Insurance-Strategy)\n* works in Cluster or PM2 without additional software [See RateLimiterCluster benchmark and detailed description here](https://github.com/animir/node-rate-limiter-flexible/wiki/Cluster)\n* useful `get`, `set`, `block`, `delete`, `penalty` and `reward` methods\n\n### Middlewares,  plugins and other packages\n* [Express middleware](https://github.com/animir/node-rate-limiter-flexible/wiki/Express-Middleware)\n* [Koa middleware](https://github.com/animir/node-rate-limiter-flexible/wiki/Koa-Middleware)\n* [Hapi plugin](https://github.com/animir/node-rate-limiter-flexible/wiki/Hapi-plugin)\n* GraphQL [graphql-rate-limit-directive](https://www.npmjs.com/package/graphql-rate-limit-directive)\n* NestJS try [nestjs-rate-limiter](https://www.npmjs.com/package/nestjs-rate-limiter)\n* Fastify based NestJS app try [nestjs-fastify-rate-limiter](https://www.npmjs.com/package/nestjs-fastify-rate-limiter)\n\nSome copy/paste examples on Wiki:\n* [Minimal protection against password brute-force](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#minimal-protection-against-password-brute-force)\n* [Login endpoint protection](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection)\n* [Websocket connection prevent flooding](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#websocket-single-connection-prevent-flooding)\n* [Dynamic block duration](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#dynamic-block-duration)\n* [Authorized users specific limits](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#authorized-and-not-authorized-users)\n* [Different limits for different parts of application](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#different-limits-for-different-parts-of-application)\n* [Apply Block Strategy](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#apply-in-memory-block-strategy-to-avoid-extra-requests-to-store)\n* [Setup Insurance Strategy](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#setup-insurance-strategy-for-store-limiters)\n* [Third-party API, crawler, bot rate limiting](https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#third-party-api-crawler-bot-rate-limiting)\n\n### Migration from other packages\n* [express-brute](https://github.com/animir/node-rate-limiter-flexible/wiki/ExpressBrute-migration) Bonus: race conditions fixed, prod deps removed\n* [limiter](https://github.com/animir/node-rate-limiter-flexible/wiki/RateLimiterQueue#migration-from-limiter) Bonus: multi-server support, respects queue order, native promises\n\n### Docs and Examples\n\n* [Options](https://github.com/animir/node-rate-limiter-flexible/wiki/Options)\n* [API methods](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods)\n* [BurstyRateLimiter](https://github.com/animir/node-rate-limiter-flexible/wiki/BurstyRateLimiter) Traffic burst support\n* [RateLimiterRedis](https://github.com/animir/node-rate-limiter-flexible/wiki/Redis)\n* [RateLimiterMemcache](https://github.com/animir/node-rate-limiter-flexible/wiki/Memcache)\n* [RateLimiterMongo](https://github.com/animir/node-rate-limiter-flexible/wiki/Mongo) (with [sharding support](https://github.com/animir/node-rate-limiter-flexible/wiki/Mongo#mongodb-sharding-options))\n* [RateLimiterMySQL](https://github.com/animir/node-rate-limiter-flexible/wiki/MySQL) (support Sequelize and Knex)\n* [RateLimiterPostgres](https://github.com/animir/node-rate-limiter-flexible/wiki/PostgreSQL) (support Sequelize, TypeORM and Knex)\n* [RateLimiterCluster](https://github.com/animir/node-rate-limiter-flexible/wiki/Cluster) ([PM2 cluster docs read here](https://github.com/animir/node-rate-limiter-flexible/wiki/PM2-cluster))\n* [RateLimiterMemory](https://github.com/animir/node-rate-limiter-flexible/wiki/Memory)\n* [RateLimiterUnion](https://github.com/animir/node-rate-limiter-flexible/wiki/RateLimiterUnion) Combine 2 or more limiters to act as single\n* [RLWrapperBlackAndWhite](https://github.com/animir/node-rate-limiter-flexible/wiki/Black-and-White-lists) Black and White lists\n* [RateLimiterQueue](https://github.com/animir/node-rate-limiter-flexible/wiki/RateLimiterQueue) Rate limiter with FIFO queue\n\n### Changelog\n\nSee [releases](https://github.com/animir/node-rate-limiter-flexible/releases) for detailed changelog.\n\n## Basic Options\n\n* **points** \n    \n    `Default: 4` \n    \n    Maximum number of points can be consumed over duration\n\n* **duration** \n\n    `Default: 1` \n    \n    Number of seconds before consumed points are reset.\n    \n    Never reset points, if `duration` is set to 0.\n\n* **storeClient** \n\n    `Required for store limiters` \n\n    Have to be `redis`, `ioredis`, `memcached`, `mongodb`, `pg`, `mysql2`, `mysql` or any other related pool or connection.\n\n### Other options on Wiki:\n* [keyPrefix](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#keyprefix) Make keys unique among different limiters.\n* [blockDuration](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#blockduration) Block for N seconds, if consumed more than points.\n* [inMemoryBlockOnConsumed](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#inmemoryblockonconsumed) Avoid extra requests to store.\n* [inMemoryBlockDuration](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#inmemoryblockduration)\n* [insuranceLimiter](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#insurancelimiter) Make it more stable with less efforts.\n* [storeType](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#storetype) Have to be set to `knex`, if you use it.\n* [dbName](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#dbname) Where to store points.\n* [tableName](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#tablename) Table/collection.\n* [tableCreated](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#tablecreated) Is table already created in MySQL or PostgreSQL.\n* [clearExpiredByTimeout](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#clearexpiredbytimeout) For MySQL and PostgreSQL.\n\nSmooth out traffic picks:\n* [execEvenly](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#execevenly)\n* [execEvenlyMinDelayMs](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#execevenlymindelayms)\n\nSpecific:\n* [indexKeyPrefix](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#indexkeyprefix) Combined indexes of MongoDB.\n* [timeoutMs](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#timeoutms) For Cluster.\n* [rejectIfRedisNotReady](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#rejectifredisnotready)\n\n## API\n\nRead detailed description on Wiki.\n\n* [consume(key, points = 1)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimiterconsumekey-points--1) Consume points by key.\n* [get(key)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimitergetkey) Get `RateLimiterRes` or `null`.\n* [set(key, points, secDuration)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimitersetkey-points-secduration) Set points by key.\n* [block(key, secDuration)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimiterblockkey-secduration) Block key for `secDuration` seconds.\n* [delete(key)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimiterdeletekey) Reset consumed points.\n* [deleteInMemoryBlockedAll](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimiterdeleteinmemoryblockedall)\n* [penalty(key, points = 1)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimiterpenaltykey-points--1) Increase number of consumed points in current duration.\n* [reward(key, points = 1)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimiterrewardkey-points--1) Decrease number of consumed points in current duration.\n* [getKey(key)](https://github.com/animir/node-rate-limiter-flexible/wiki/API-methods#ratelimitergetkeykey) Get internal prefixed key.\n\n## Benchmark\n\nAverage latency during test pure NodeJS endpoint in cluster of 4 workers with everything set up on one server.\n\n1000 concurrent clients with maximum 2000 requests per sec during 30 seconds. \n\n```text\n1. Memory     0.34 ms\n2. Cluster    0.69 ms\n3. Redis      2.45 ms\n4. Memcached  3.89 ms\n5. Mongo      4.75 ms\n```\n\n500 concurrent clients with maximum 1000 req per sec during 30 seconds\n```text\n6. PostgreSQL 7.48 ms (with connection pool max 100)\n7. MySQL     14.59 ms (with connection pool 100)\n```\n\nNote, you can speed up limiters with [inMemoryBlockOnConsumed](https://github.com/animir/node-rate-limiter-flexible/wiki/Options#inmemoryblockonconsumed) option.\n\n## Contribution\n\nAppreciated, feel free!\n\nMake sure you've launched `npm run eslint` before creating PR, all errors have to be fixed.\n\nYou can try to run `npm run eslint-fix` to fix some issues.\n\nAny new limiter with storage have to be extended from `RateLimiterStoreAbstract`.\nIt has to implement 4 methods:\n* `_getRateLimiterRes` parses raw data from store to `RateLimiterRes` object.\n* `_upsert` must be atomic. it inserts or updates value by key and returns raw data. it must support `forceExpire` mode \n    to overwrite key expiration time.\n* `_get` returns raw data by key or `null` if there is no key.\n* `_delete` deletes all key related data and returns `true` on deleted, `false` if key is not found.\n\nAll other methods depends on store. See `RateLimiterRedis` or `RateLimiterPostgres` for example.\n\nNote: all changes should be covered by tests.\n",
    "licenseText": "## ISC License (ISC)\n\nCopyright 2019 Roman Voloboev\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/rate-limiter-flexible/-/rate-limiter-flexible-2.4.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/rate-limiter-flexible/-/rate-limiter-flexible-2.4.1.tgz",
    "hash": "",
    "integrity": "sha512-dgH4T44TzKVO9CLArNto62hJOwlWJMLUjVVr/ii0uUzZXEXthDNr7/yefW5z/1vvHAfycc1tnuiYyNJ8CTRB3g==",
    "registry": "npm",
    "packageName": "rate-limiter-flexible",
    "cacheIntegrity": "sha512-dgH4T44TzKVO9CLArNto62hJOwlWJMLUjVVr/ii0uUzZXEXthDNr7/yefW5z/1vvHAfycc1tnuiYyNJ8CTRB3g== sha1-x0z+Nqwsv+VvaN7Zo7Sy/eGWPEE="
  },
  "registry": "npm",
  "hash": "7601f84f8e13cca54ef422c0acdb68eb68493b095624c2d48d556bfe28b4b94cd95c45ed84336beffc9e7d6e73ff5bef1c07f271cd6d9ee898c8d27c093441de"
}