{
  "manifest": {
    "name": "abortable-iterator",
    "version": "4.0.3",
    "description": "Make any iterator or iterable abortable via an AbortSignal",
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "*",
          "*/index",
          "dist/*",
          "dist/*/index",
          "dist/src/*",
          "dist/src/*/index"
        ]
      }
    },
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "import": "./dist/src/index.js"
      },
      "./duplex": {
        "import": "./dist/src/duplex.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "chore",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Trivial Changes"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "lint": "aegir lint",
      "dep-check": "aegir dep-check dist/src/**/*.js dist/test/**/*.js",
      "build": "tsc",
      "pretest": "npm run build",
      "test": "aegir test -f ./dist/test",
      "test:chrome": "npm run test -- -t browser --cov",
      "test:chrome-webworker": "npm run test -- -t webworker",
      "test:firefox": "npm run test -- -t browser -- --browser firefox",
      "test:firefox-webworker": "npm run test -- -t webworker -- --browser firefox",
      "test:node": "npm run test -- -t node --cov",
      "test:electron-main": "npm run test -- -t electron-main",
      "release": "semantic-release"
    },
    "keywords": [
      "async",
      "iterator",
      "abort",
      "abortable",
      "cancel",
      "stop",
      "AbortController",
      "AbortSignal",
      "signal"
    ],
    "author": {
      "name": "Alan Shaw"
    },
    "license": "MIT",
    "devDependencies": {
      "aegir": "^36.1.3",
      "delay": "^5.0.0",
      "it-drain": "^2.0.1",
      "it-pipe": "^2.0.2"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alanshaw/abortable-iterator.git"
    },
    "bugs": {
      "url": "https://github.com/alanshaw/abortable-iterator/issues"
    },
    "homepage": "https://github.com/alanshaw/abortable-iterator#readme",
    "dependencies": {
      "get-iterator": "^2.0.0",
      "it-stream-types": "^1.0.3"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-abortable-iterator-4.0.3-432570d8256dbad2cef4f129312b651c5ffcdd0f-integrity/node_modules/abortable-iterator/package.json",
    "readmeFilename": "README.md",
    "readme": "# abortable-iterator\n\n[![Build Status](https://github.com/alanshaw/abortable-iterator/actions/workflows/js-test-and-release.yml/badge.svg?branch=master)](https://github.com/alanshaw/abortable-iterator/actions/workflows/js-test-and-release.yml)\n[![Dependencies Status](https://status.david-dm.org/gh/alanshaw/abortable-iterator.svg)](https://david-dm.org/alanshaw/abortable-iterator)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n> Make any iterator or iterable abortable via an AbortSignal\n\nThe [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) is used in the fetch API to abort in flight requests from, for example, a timeout or user action. The same concept is used here to halt iteration of an async iterator.\n\n## Install\n\n```sh\nnpm install abortable-iterator\n```\n\n## Usage\n\n```js\nimport { abortableSource } from 'abortable-iterator'\n\n// An example function that creates an async iterator that yields an increasing\n// number every x milliseconds and NEVER ENDS!\nconst asyncCounter = async function * (start, delay) {\n  let i = start\n  while (true) {\n    yield new Promise(resolve => setTimeout(() => resolve(i++), delay))\n  }\n}\n\n// Create a counter that'll yield numbers from 0 upwards every second\nconst everySecond = asyncCounter(0, 1000)\n\n// Make everySecond abortable!\nconst controller = new AbortController()\nconst abortableEverySecond = abortableSource(everySecond, controller.signal)\n\n// Abort after 5 seconds\nsetTimeout(() => controller.abort(), 5000)\n\ntry {\n  // Start the iteration, which will throw after 5 seconds when it is aborted\n  for await (const n of abortableEverySecond) {\n    console.log(n)\n  }\n} catch (err) {\n  if (err.code === 'ERR_ABORTED') {\n    // Expected - all ok :D\n  } else {\n    throw err\n  }\n}\n```\n\n## API\n\n```js\nimport {\n  abortableSource,\n  abortableSink,\n  abortableTransform,\n  abortableDuplex\n} from 'abortable-iterator'\n```\n\n* [`abortableSource(source, signal, [options])`](#abortablesource-signal-options)\n* [`abortableSink(sink, signal, [options])`](#abortablesinksink-signal-options)\n* [`abortableTransform(transform, signal, [options])`](#abortabletransformtransform-signal-options)\n* [`abortableDuplex(duplex, signal, [options])`](#abortableduplexduplex-signal-options)\n\n### `abortableSource(source, signal, [options])`\n**(alias for `abortable.source(source, signal, [options])`)**\n\nMake any iterator or iterable abortable via an `AbortSignal`.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| source | [`Iterable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol)\\|[`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) | The iterator or iterable object to make abortable |\n| signal | [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) | Signal obtained from `AbortController.signal` which is used to abort the iterator. |\n| options | `Object` | (optional) options |\n| options.onAbort | `Function` | An (async) function called when the iterator is being aborted, before the abort error is thrown. Default `null` |\n| options.abortMessage | `String` | The message that the error will have if the iterator is aborted. Default \"The operation was aborted\" |\n| options.abortCode | `String`\\|`Number` | The value assigned to the `code` property of the error that is thrown if the iterator is aborted. Default \"ABORT_ERR\" |\n| options.returnOnAbort | `Boolean` | Instead of throwing the abort error, just return from iterating over the source stream. |\n| options.onReturnError | `Function` | When a generator is aborted, we call `.return` on it - if this function errors the error value will be passed to the `.onReturnError` callback if passed. Default `null` |\n\n#### Returns\n\n| Type | Description |\n|------|-------------|\n| [`Iterable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) | An iterator that wraps the passed `source` parameter that makes it abortable via the passed `signal` parameter. |\n\nThe returned iterator will `throw` an `AbortError` when it is aborted that has a `type` with the value `aborted` and `code` property with the value `ABORT_ERR` by default.\n\n### `abortableSink(sink, signal, [options])`\n\nThe same as [`abortable.source`](#abortablesource-signal-options) except this makes the passed [`sink`](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#sink-it) abortable. Returns a new sink that wraps the passed `sink` and makes it abortable via the passed `signal` parameter.\n\n### `abortableTransform(transform, signal, [options])`\n\nThe same as [`abortable.source`](#abortablesource-signal-options) except this makes the passed [`transform`](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#transform-it) abortable. Returns a new transform that wraps the passed `transform` and makes it abortable via the passed `signal` parameter.\n\n### `abortableDuplex(duplex, signal, [options])`\n\nThe same as [`abortable.source`](#abortablesource-signal-options) except this makes the passed [`duplex`](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#duplex-it) abortable. Returns a new duplex that wraps the passed `duplex` and makes it abortable via the passed `signal` parameter.\n\nNote that this will abort _both_ sides of the duplex. Use `duplex.sink = abortable.sink(duplex.sink)` or `duplex.source = abortable.source(duplex.source)` to abort just the sink or the source.\n\n## Related\n\n* [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/alanshaw/abortable-iterator/issues/new) or submit PRs.\n\n## License\n\n[MIT](LICENSE) © Alan Shaw\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Alan Shaw\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/abortable-iterator/-/abortable-iterator-4.0.3.tgz#432570d8256dbad2cef4f129312b651c5ffcdd0f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/abortable-iterator/-/abortable-iterator-4.0.3.tgz",
    "hash": "432570d8256dbad2cef4f129312b651c5ffcdd0f",
    "integrity": "sha512-GJ5fyS9O0hK/TMf+weR+WMEwSEBWVuStHqHmUYWbfHPULyVf7QdUnAvh41+1cUWtHVf0Z/qtQynidxz4ZFDPOg==",
    "registry": "npm",
    "packageName": "abortable-iterator",
    "cacheIntegrity": "sha512-GJ5fyS9O0hK/TMf+weR+WMEwSEBWVuStHqHmUYWbfHPULyVf7QdUnAvh41+1cUWtHVf0Z/qtQynidxz4ZFDPOg== sha1-QyVw2CVtutLO9PEpMStlHF/83Q8="
  },
  "registry": "npm",
  "hash": "432570d8256dbad2cef4f129312b651c5ffcdd0f"
}