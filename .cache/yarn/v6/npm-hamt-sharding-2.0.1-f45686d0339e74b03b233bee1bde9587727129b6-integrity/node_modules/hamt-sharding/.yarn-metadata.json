{
  "manifest": {
    "name": "hamt-sharding",
    "version": "2.0.1",
    "description": "JavaScript implementation of sharding using hash array mapped tries",
    "leadMaintainer": "Alex Potsides <alex.potsides@protocol.ai>",
    "main": "src/index.js",
    "scripts": {
      "test": "aegir test",
      "prepare": "aegir build --no-bundle",
      "lint": "aegir ts -p check && aegir lint",
      "release": "aegir release",
      "release-minor": "aegir release --type minor",
      "release-major": "aegir release --type major",
      "coverage": "aegir coverage"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs-shipyard/js-hamt-sharding.git"
    },
    "keywords": [
      "IPFS",
      "hamt",
      "sharding"
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/ipfs-shipyard/js-hamt-sharding/issues"
    },
    "engines": {
      "node": ">=10.0.0",
      "npm": ">=6.0.0"
    },
    "homepage": "https://github.com/ipfs-shipyard/js-hamt-sharding#readme",
    "devDependencies": {
      "aegir": "^35.0.2",
      "it-length": "^1.0.3",
      "multihashing-async": "^2.1.0",
      "util": "^0.12.4"
    },
    "dependencies": {
      "sparse-array": "^1.3.1",
      "uint8arrays": "^3.0.0"
    },
    "contributors": [
      {
        "name": "achingbrain",
        "email": "alex@achingbrain.net"
      }
    ],
    "types": "dist/src/index.d.ts",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-hamt-sharding-2.0.1-f45686d0339e74b03b233bee1bde9587727129b6-integrity/node_modules/hamt-sharding/package.json",
    "readmeFilename": "README.md",
    "readme": "# hamt-sharding\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![Build Status](https://flat.badgen.net/travis/ipfs-shipyard/js-hamt-sharding)](https://travis-ci.com/ipfs-shipyard/js-hamt-sharding)\n[![Codecov](https://codecov.io/gh/ipfs-shipyard/js-hamt-sharding/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs-shipyard/js-hamt-sharding)\n[![Dependency Status](https://david-dm.org/ipfs-shipyard/js-hamt-sharding.svg?style=flat-square)](https://david-dm.org/ipfs/js-hamt-sharding)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n![](https://img.shields.io/badge/npm-%3E%3D3.0.0-orange.svg?style=flat-square)\n![](https://img.shields.io/badge/Node.js-%3E%3D10.0.0-orange.svg?style=flat-square)\n\n> JavaScript implementation of hamt for use in sharding\n\n## Lead Maintainer\n\n[Alex Potsides](https://github.com/achingbrain)\n\n## Table of Contents\n\n- [hamt-sharding](#hamt-sharding)\n  - [Lead Maintainer](#lead-maintainer)\n  - [Table of Contents](#table-of-contents)\n  - [Install](#install)\n  - [Usage](#usage)\n    - [Example](#example)\n  - [API](#api)\n    - [`bucket.put(key, value)`](#bucketputkey-value)\n    - [`bucket.get(key)`](#bucketgetkey)\n    - [`bucket.del(key)`](#bucketdelkey)\n    - [`bucket.leafCount()`](#bucketleafcount)\n    - [`bucket.childrenCount()`](#bucketchildrencount)\n    - [`bucket.onlyChild()`](#bucketonlychild)\n    - [`bucket.eachLeafSeries()`](#bucketeachleafseries)\n    - [`bucket.serialize(map, reduce)`](#bucketserializemap-reduce)\n    - [`bucket.asyncTransform(asyncMap, asyncReduce)`](#bucketasynctransformasyncmap-asyncreduce)\n    - [`bucket.toJSON()`](#buckettojson)\n    - [`bucket.prettyPrint()`](#bucketprettyprint)\n    - [`bucket.tableSize()`](#buckettablesize)\n  - [Contribute](#contribute)\n  - [License](#license)\n\n## Install\n\n```\n> npm install hamt-sharding\n```\n\n## Usage\n\n### Example\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst crypto = require('crypto-promise')\n\n// decide how to hash buffers made from keys, can return a Promise\nconst hashFn = async (buf) => {\n  return crypto\n    .createHash('sha256')\n    .update(buf)\n    .digest()\n}\n\nconst bucket = createHAMT({\n  hashFn: hashFn\n})\n\nawait bucket.put('key', 'value')\n\nconst output = await bucket.get('key')\n// output === 'value'\n```\n\n## API\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\n```\n\n### `bucket.put(key, value)`\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst bucket = createHAMT({...})\n\nawait bucket.put('key', 'value')\n```\n\n### `bucket.get(key)`\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst bucket = createHAMT({...})\n\nawait bucket.put('key', 'value')\n\nconsole.info(await bucket.get('key')) // 'value'\n```\n\n### `bucket.del(key)`\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst bucket = createHAMT({...})\n\nawait bucket.put('key', 'value')\nawait bucket.del('key', 'value')\n\nconsole.info(await bucket.get('key')) // undefined\n```\n\n### `bucket.leafCount()`\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst bucket = createHAMT({...})\n\nconsole.info(bucket.leafCount()) // 0\n\nawait bucket.put('key', 'value')\n\nconsole.info(bucket.leafCount()) // 1\n```\n\n### `bucket.childrenCount()`\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst bucket = createHAMT({...})\n\nconsole.info(bucket.childrenCount()) // 0\n\nawait bucket.put('key', 'value')\n\nconsole.info(bucket.childrenCount()) // 234 -- dependent on hashing algorithm\n```\n\n### `bucket.onlyChild()`\n### `bucket.eachLeafSeries()`\n\n```javascript\nconst { createHAMT } = require('hamt-sharding')\nconst bucket = createHAMT({...})\n\nawait bucket.put('key', 'value')\n\nfor await (const child of bucket.eachLeafSeries()) {\n  console.info(child.value) // 'value'\n}\n```\n\n### `bucket.serialize(map, reduce)`\n### `bucket.asyncTransform(asyncMap, asyncReduce)`\n### `bucket.toJSON()`\n### `bucket.prettyPrint()`\n### `bucket.tableSize()`\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs-shipyard/js-hamt-sharding/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Dias\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hamt-sharding/-/hamt-sharding-2.0.1.tgz#f45686d0339e74b03b233bee1bde9587727129b6",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hamt-sharding/-/hamt-sharding-2.0.1.tgz",
    "hash": "f45686d0339e74b03b233bee1bde9587727129b6",
    "integrity": "sha512-vnjrmdXG9dDs1m/H4iJ6z0JFI2NtgsW5keRkTcM85NGak69Mkf5PHUqBz+Xs0T4sg0ppvj9O5EGAJo40FTxmmA==",
    "registry": "npm",
    "packageName": "hamt-sharding",
    "cacheIntegrity": "sha512-vnjrmdXG9dDs1m/H4iJ6z0JFI2NtgsW5keRkTcM85NGak69Mkf5PHUqBz+Xs0T4sg0ppvj9O5EGAJo40FTxmmA== sha1-9FaG0DOedLA7IzvuG96Vh3JxKbY="
  },
  "registry": "npm",
  "hash": "f45686d0339e74b03b233bee1bde9587727129b6"
}