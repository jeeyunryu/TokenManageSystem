{
  "manifest": {
    "name": "get-folder-size",
    "version": "4.0.0",
    "description": "Get the size of a folder by iterating through its sub-files and -folders.",
    "type": "module",
    "main": "./index.js",
    "exports": "./index.js",
    "bin": {
      "get-folder-size": "bin/get-folder-size.js"
    },
    "files": [
      "index.js",
      "bin/get-folder-size.js"
    ],
    "engines": {
      "node": ">=14.13.0"
    },
    "dependencies": {
      "gar": "^1.0.4"
    },
    "devDependencies": {
      "eslint": "^8.20.0",
      "memfs": "^3.4.6",
      "tap": "^16.3.0"
    },
    "scripts": {
      "tap": "tap --no-coverage",
      "lint": "eslint \"**/*.js\" --fix",
      "lint:nofix": "eslint \"**/*.js\"",
      "test": "npm run lint:nofix && npm run tap"
    },
    "keywords": [
      "folder",
      "directory",
      "size"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/alessioalex/get-folder-size.git"
    },
    "author": {
      "name": "Alexandru Vladutu",
      "email": "alexandru.vladutu@gmail.com"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-get-folder-size-4.0.0-d73eedb4b2fa9144a3b5a115909d129e1ba8300a-integrity/node_modules/get-folder-size/package.json",
    "readmeFilename": "README.md",
    "readme": "# get-folder-size\n\nGet the size of a folder by iterating through its sub-files and -folders.\n\n| :warning: | Version 3+ of this package is pure ESM and uses a new promise-based API. If you need to use CommonJS or the old callback syntax, keep your dependency pinned to version ^2 ([v2 API reference](https://github.com/alessioalex/get-folder-size/tree/v2.0.1)). |\n|-----------|----------------------------------------------------------------------------------------|\n\n## Basic usage\n\nIf you don't care about the details and just want a quick implementation, you can use:\n\n```js\ngetFolderSize.loose('/path/to/folder');\n```\n\nExample:\n\n```js\nimport getFolderSize from 'get-folder-size';\n\nconst myFolder = '/path/to/my/folder';\n\nconst size = await getFolderSize.loose(myFolder);\nconsole.log(`The folder is ${size} bytes large`);\nconsole.log(`That is the same as ${(size / 1000 / 1000).toFixed(2)} MB`);\n```\n\n## Methods\n\nWhen reading the size of a folder, read errors can randomly occur for a number of reasons, especially if a different process is altering files in the same folder at the same time. There are three different ways to call this package, depending on how you want to handle those errors:\n\n### `getFolderSize(path, [options]): object`\nThe default method will return an object with the size of the folder and a list of encountered errors:\n\n```js\n{\n  size: 1435,\n  errors: [\n    Error{} ...\n  ]\n}\n```\n\nIf no errors were encountered, `errors` will be `null`. If errors were encountered, `size` will likely be smaller than the real folder size.\n\nThis method is great if you want to implement custom logic based on the errors that were encountered.\n\n### `getFolderSize.loose(path, [options]): number | bigint`\nThe `loose` method will return the folder size directly and ignore any errors it encounters, which means the returned folder size could be smaller than the real folder size.\n\nThis method is great if the precise size isn't too important, for example when used only to display the folder size to the user.\n\n### `getFolderSize.strict(path, [options]): number | bigint`\nThe `strict` method will return the folder size directly, but throw an error if it encounters any read errors.\n\nThis method is great if you need a very accurate number. You will have to implement some sort of error handling to use it reliably.\n\n## Options\n\nAny of the three methods can also take an `options` object:\n\n```js\ngetFolderSize(\n  '/path/to/folder', \n  {\n    bigint: true,\n    ignore: /pattern/,\n    fs: customFS,\n  }\n)\n```\n\nIf the `bigint` option is set to true, the folder size is returned as a BigInt instead of the default Number.\n\nThe `ignore` option takes a regex pattern. Any file or folder with a path that matches the pattern will not be counted in the total folder size.\n\nThe `fs` option allows you to pass a different filesystem handler, such as [memfs](https://github.com/streamich/memfs), that will be used to read the folder size. The filesystem handler must incorporate `lstat` and `readdir` promise functions.\n\n## CLI tool\n\nYou can run this module from your command line:\n\n```bash\nget-folder-size --folder=\"/my/folder\" --ignore=\"node_modules\"\n```\nThe optional `ignore` statement takes a regex pattern.\n\n## FAQ\n\n### I don't care if I have a file or folder, I just want to get the size.\n\nIf a file is passed to `get-folder-size`, it will simply return the size of the file. This means you can use it as a catch-all to get the size of any element in the filesystem.\n\nExample:\n\n```js\nimport getItemSize from 'get-folder-size';\n\nfor(const path of [\n  '/path/to/small/file.txt',\n  '/path/to/small/folder/',\n  '/path/to/large/file.js',\n  '/path/to/large/folder/',\n]){\n  console.log(await getItemSize.strict(path));\n}\n\n// Console:\n// 273\n// 402\n// 348614\n// 674362319\n\n```\n### Does it return actual size or size on disk?\n\nThis module calculates the actual folder size, and not the size on disk. [Read about the difference here.](https://web.archive.org/web/20140712235443/https://stackoverflow.com/questions/15470787/please-help-me-understand-size-vs-size-on-disk)\n\n### How do I import it from a CommonJS module?\n\nCommonJS modules do not support the `import..from` method, but they do support this method:\n```js\nconst getFolderSize = (await import(\"get-folder-size\")).default;\n```\nNote that this import only works inside an async function.\n\nIf you want to use the `require` method, consider just staying on v2. You can make v2 return a promise by importing it this way:\n```js\nconst util = require(\"util\");\nconst getFolderSize = util.promisify(require(\"get-folder-size\"));\n```\nIf none of these methods work for you, [send us a detailed explanation of your issue](https://github.com/alessioalex/get-folder-size/issues), and we will take a look at it.\n\n### How do I use it?\n\nThis is a Node module. If you are not sure what that means, please check out one of the many great tutorials online, like [nodejs.dev](https://nodejs.dev/learn/introduction-to-nodejs).\n\nWhen you have Node set up, you can install `get-folder-size` from your command line with this command:\n\n```bash\nnpm install get-folder-size\n```\n\nYou can now import it into your JavaScript files, or you can use its command line interface (CLI).\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/get-folder-size/-/get-folder-size-4.0.0.tgz#d73eedb4b2fa9144a3b5a115909d129e1ba8300a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/get-folder-size/-/get-folder-size-4.0.0.tgz",
    "hash": "d73eedb4b2fa9144a3b5a115909d129e1ba8300a",
    "integrity": "sha512-Z6sv92povPRhGTNv1j8pMOzkXCcJOYWFTSrulKzoF9qbIRHXtR2Vfjw964jsWVMrIKnwHzm/0jl8IFONbBbEKw==",
    "registry": "npm",
    "packageName": "get-folder-size",
    "cacheIntegrity": "sha512-Z6sv92povPRhGTNv1j8pMOzkXCcJOYWFTSrulKzoF9qbIRHXtR2Vfjw964jsWVMrIKnwHzm/0jl8IFONbBbEKw== sha1-1z7ttLL6kUSjtaEVkJ0SnhuoMAo="
  },
  "registry": "npm",
  "hash": "d73eedb4b2fa9144a3b5a115909d129e1ba8300a"
}