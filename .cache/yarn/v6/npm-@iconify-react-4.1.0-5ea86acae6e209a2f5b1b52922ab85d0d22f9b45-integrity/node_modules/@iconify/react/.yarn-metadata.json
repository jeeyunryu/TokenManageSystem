{
  "manifest": {
    "name": "@iconify/react",
    "description": "Iconify icon component for React.",
    "author": {
      "name": "Vjacheslav Trushkin"
    },
    "version": "4.1.0",
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/iconify/iconify/issues"
    },
    "homepage": "https://iconify.design/",
    "funding": "https://github.com/sponsors/cyberalien",
    "repository": {
      "type": "git",
      "url": "https://github.com/iconify/iconify.git",
      "directory": "components/react"
    },
    "main": "dist/iconify.js",
    "module": "dist/iconify.mjs",
    "types": "dist/iconify.d.ts",
    "exports": {
      "./*": "./*",
      ".": {
        "import": "./dist/iconify.mjs",
        "types": "./dist/iconify.d.ts",
        "default": "./dist/iconify.js"
      },
      "./offline": {
        "import": "./dist/offline.mjs",
        "types": "./dist/offline.d.ts",
        "default": "./dist/offline.js"
      },
      "./dist/offline": {
        "import": "./dist/offline.mjs",
        "types": "./dist/offline.d.ts",
        "default": "./dist/offline.js"
      }
    },
    "dependencies": {
      "@iconify/types": "^2.0.0"
    },
    "devDependencies": {
      "@babel/preset-env": "^7.20.2",
      "@babel/preset-react": "^7.18.6",
      "@microsoft/api-extractor": "^7.33.7",
      "@rollup/plugin-node-resolve": "^15.0.1",
      "@types/react": "^18.0.26",
      "babel-jest": "^29.3.1",
      "jest": "^29.3.1",
      "react": "^18.2.0",
      "react-test-renderer": "^18.2.0",
      "rimraf": "^3.0.2",
      "rollup": "^3.8.1",
      "typescript": "^4.9.4",
      "@iconify/core": "^2.0.1",
      "@iconify/utils": "^2.1.0"
    },
    "peerDependencies": {
      "react": ">=16"
    },
    "scripts": {
      "clean": "rimraf lib dist tsconfig.tsbuildinfo",
      "prebuild": "pnpm run clean",
      "build": "node build",
      "build:lib": "tsc -b",
      "build:dist": "rollup -c rollup.config.mjs",
      "prebuild:api": "api-extractor run --local --verbose --config api-extractor.offline.json",
      "build:api": "api-extractor run --local --verbose --config api-extractor.iconify.json",
      "build:cleanup": "node cleanup",
      "test": "jest --runInBand"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@iconify-react-4.1.0-5ea86acae6e209a2f5b1b52922ab85d0d22f9b45-integrity/node_modules/@iconify/react/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Iconify for React\n\nIconify for React is not yet another icon component! There are many of them already.\n\nWhat you get with other components:\n\n-   Limited set of icons.\n-   Large bundle size because all icons are bundled.\n\nIconify icon component is nothing like that. Component does not include any icon data, it is not tied to any specific icon set. Instead, all data is retrieved from public API on demand.\n\nThat means:\n\n-   One syntax for over 100,000 icons from 100+ icon sets.\n-   Renders SVG. Many components simply render icon fonts, which look ugly. Iconify renders pixel perfect SVG.\n-   Loads icons on demand. No need to bundle icons, component will automatically load icon data for icons that you use from Iconify API.\n\nFor more information about Iconify project visit [https://iconify.design/](https://iconify.design/).\n\nFor extended documentation visit [Iconify for React documentation](https://docs.iconify.design/icon-components/react/).\n\n## Installation\n\nIf you are using NPM:\n\n```bash\nnpm install --save-dev @iconify/react\n```\n\nIf you are using Yarn:\n\n```bash\nyarn add --dev @iconify/react\n```\n\n## Usage with API\n\nInstall `@iconify/react` and import `Icon` from it:\n\n```typescript\nimport { Icon } from '@iconify/react';\n```\n\nThen use `Icon` component with icon name or data as \"icon\" parameter:\n\n```jsx\n<Icon icon=\"mdi-light:home\" />\n```\n\nComponent will automatically retrieve data for \"mdi-light:home\" from Iconify API and render it. There are over 100,000 icons available on Iconify API from various free and open source icon sets, including all the most popular icon sets.\n\n## Offline Usage\n\nRetrieving icon data from Iconify API requires visitor to be online. What if you want to use component offline or on local network?\n\nIf you want to use icon component without relying on public Iconify API, there are several options:\n\n1. You can import icon data from Iconify Icons packages.\n2. You can create custom icon bundles (more efficient, but requires more coding).\n3. You can host your own Iconify API instead of relying on third party service.\n\nSee [Iconify for React offline use documentation](https://docs.iconify.design/icon-components/react/offline.html) or [Iconify API documentation](https://docs.iconify.design/sources/api/).\n\n## Icon Names\n\nIcon name is a string. Few examples:\n\n-   `@api-provider:icon-set-prefix:icon-name`\n-   `mdi-light:home` (in this example API provider is empty, so it is skipped)\n\nIt has 3 parts, separated by \":\":\n\n-   provider points to API source. Starts with \"@\", can be empty (empty value is used for public Iconify API).\n-   prefix is name of icon set.\n-   name is name of icon.\n\nSee [Iconify for React icon names documentation](https://docs.iconify.design/icon-components/react/icon-name.html) for more detailed explanation.\n\n## Using icon data\n\nInstead of icon name, you can pass icon data to component:\n\n```jsx\nimport { Icon } from '@iconify/react';\nimport home from '@iconify-icons/mdi-light/home';\n\nfunction renderHomeIcon() {\n\treturn <Icon icon={home} />;\n}\n```\n\nSee [icon packages documentation](https://docs.iconify.design/sources/npm/) for more details.\n\n### Next.js notice\n\nExample above will currently fail with Next.js. This is because Next.js uses outdated packaging software that does not support ES modules. But do not worry, there is a simple solution: switch to CommonJS icon packages.\n\nTo switch to CommonJS package, replace this line in example above:\n\n```js\nimport home from '@iconify-icons/mdi-light/home';\n```\n\nwith\n\n```js\nimport home from '@iconify/icons-mdi-light/home';\n```\n\nAll icons are available as ES modules for modern bundler and as CommonJS modules for outdated bundlers. ES modules use format `@iconify-icons/{prefix}`, CommonJS modules use `@iconify/icons-{prefix}`.\n\nFor more details, see [icon packages documentation](https://docs.iconify.design/sources/npm/).\n\n## Inline icon\n\nIcons have 2 modes: inline and block. Difference between modes is `vertical-align` that is added to inline icons.\n\nInline icons are aligned slightly below baseline, so they look centred compared to text, like glyph fonts.\n\nBlock icons do not have alignment, like images, which aligns them to baseline by default.\n\nAlignment option was added to make icons look like continuation of text, behaving like glyph fonts. This should make migration from glyph fonts easier.\n\n```jsx\nimport React from 'react';\nimport { Icon, InlineIcon } from '@iconify/react';\n\nexport function inlineDemo() {\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tBlock:\n\t\t\t\t<Icon icon=\"line-md:image-twotone\" />\n\t\t\t\t<Icon icon=\"mdi:account-box-outline\" />\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tInline:\n\t\t\t\t<InlineIcon icon=\"line-md:image-twotone\" />\n\t\t\t\t<InlineIcon icon=\"mdi:account-box-outline\" />\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n```\n\nTo toggle between block and inline modes, you can either use `InlineIcon` or use boolean `inline` property:\n\n```jsx\nimport React from 'react';\nimport { Icon } from '@iconify/react';\n\nexport function inlineDemo() {\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tBlock:\n\t\t\t\t<Icon icon=\"line-md:image-twotone\" />\n\t\t\t\t<Icon icon=\"mdi:account-box-outline\" />\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tInline:\n\t\t\t\t<Icon icon=\"line-md:image-twotone\" inline={true} />\n\t\t\t\t<Icon icon=\"mdi:account-box-outline\" inline={true} />\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n```\n\nVisual example to show the difference between inline and block modes:\n\n![Inline icon](https://iconify.design/assets/images/inline.png)\n\n## Icon component properties\n\n`icon` property is mandatory. It tells component what icon to render. The value can be a string containing the icon name or an object containing the icon data.\n\nThe icon component has the following optional properties:\n\n-   `inline`. Changes icon behaviour to match icon fonts. See \"Inline icon\" section above.\n-   `width` and `height`. Icon dimensions. The default values are \"1em\" for both. See \"Dimensions\" section below.\n-   `color`. Icon colour. This is the same as setting colour in style. See \"Icon colour\" section below.\n-   `flip`, `hFlip`, `vFlip`. Flip icon horizontally and/or vertically. See \"Transformations\" section below.\n-   `rotate`. Rotate icon by 90, 180 or 270 degrees. See \"Transformations\" section below.\n-   `align`, `vAlign`, `hAlign`, `slice`. Icon alignment. See \"Alignment\" section below.\n-   `onLoad`. Callback function that is called when icon data has been loaded. See \"onLoad\" section below.\n\n### Other properties and events\n\nIn addition to the properties mentioned above, the icon component accepts any other properties and events. All other properties and events will be passed to generated `SVG` element, so you can do stuff like assigning `onClick` event, setting the inline style, add title and so on.\n\n### Dimensions\n\nBy default, icon height is \"1em\". With is dynamic, calculated using the icon's width to height ratio. This makes it easy to change icon size by changing `font-size` in the stylesheet, just like icon fonts.\n\nThere are several ways to change icon dimensions:\n\n-   Setting `font-size` in style (or `fontSize` if you are using inline style).\n-   Setting `width` and/or `height` property.\n\nValues for `width` and `height` can be numbers or strings.\n\nIf you set only one dimension, another dimension will be calculated using the icon's width to height ratio. For example, if the icon size is 16 x 24, you set the height to 48, the width will be set to 32. Calculations work not only with numbers, but also with string values.\n\n#### Dimensions as numbers\n\nYou can use numbers for `width` and `height`.\n\n```jsx\n<Icon icon={homeIcon} height={24} />\n```\n\n```jsx\n<Icon icon=\"mdi-light:home\" width={16} height={16} />\n```\n\nNumber values are treated as pixels. That means in examples above, values are identical to \"24px\" and \"16px\".\n\n#### Dimensions as strings without units\n\nIf you use strings without units, they are treated the same as numbers in an example above.\n\n```jsx\n<Icon icon={homeIcon} height=\"24\" />\n```\n\n```jsx\n<Icon icon=\"mdi-light:home\" width=\"16\" height={'16'} />\n```\n\n#### Dimensions as strings with units\n\nYou can use units in width and height values:\n\n```jsx\n<Icon icon=\"mdi-light:home\" height=\"2em\" />\n```\n\nBe careful when using `calc`, view port based units or percentages. In SVG element they might not behave the way you expect them to behave and when using such units, you should consider settings both width and height.\n\n#### Dimensions as 'auto'\n\nKeyword \"auto\" sets dimensions to the icon's `viewBox` dimensions. For example, for 24 x 24 icon using `height=\"auto\"` sets height to 24 pixels.\n\n```jsx\n<Icon icon=\"mdi-light:home\" height=\"auto\" />\n```\n\n### Icon colour\n\nThere are two types of icons: icons that do not have a palette and icons that do have a palette.\n\nIcons that do have a palette, such as emojis, cannot be customised. Setting colour to such icons will not change anything.\n\nIcons that do not have a palette can be customised. By default, colour is set to \"currentColor\", which means the icon's colour matches text colour. To change the colour you can:\n\n-   Set `color` style or use stylesheet to target icon. If you are using the stylesheet, target `svg` element.\n-   Add `color` property.\n\nExamples:\n\nUsing `color` property:\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" color=\"red\" />\n<Icon icon=\"eva:alert-triangle-fill\" color=\"#f00\" />\n```\n\nUsing inline style:\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" style={{color: 'red'}} />\n<Icon icon=\"eva:alert-triangle-fill\" style={{color: '#f00'}} />\n```\n\nUsing stylesheet:\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" className=\"red-icon\" />\n```\n\n```css\n.red-icon {\n\tcolor: red;\n}\n```\n\n### Transformations\n\nYou can rotate and flip the icon.\n\nThis might seem redundant because icon can also be rotated and flipped using CSS transformations. So why do transformation properties exist? Because it is a different type of transformation.\n\n-   CSS transformations transform the entire icon.\n-   Icon transformations transform the contents of the icon.\n\nIf you have a square icon, this makes no difference. However, if you have an icon that has different width and height values, it makes a huge difference.\n\nRotating 16x24 icon by 90 degrees results in:\n\n-   CSS transformation keeps 16x24 bounding box, which might cause the icon to overlap text around it.\n-   Icon transformation changes bounding box to 24x16, rotating content inside an icon.\n\nSee [icon transformations documentation](https://docs.iconify.design/icon-components/react/transform.html) for more details.\n\n#### Flipping an icon\n\nThere are several properties available to flip an icon:\n\n-   `hFlip`: boolean property, flips icon horizontally.\n-   `vFlip`: boolean property, flips icon vertically.\n-   `flip`: shorthand string property, can flip icon horizontally and/or vertically.\n\nExamples:\n\nFlip an icon horizontally:\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" hFlip={true} />\n<Icon icon=\"eva:alert-triangle-fill\" flip=\"horizontal\" />\n```\n\nFlip an icon vertically:\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" vFlip={true} />\n<Icon icon=\"eva:alert-triangle-fill\" flip=\"vertical\" />\n```\n\nFlip an icon horizontally and vertically (the same as 180 degrees rotation):\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" hFlip={true} vFlip={true} />\n<Icon icon=\"eva:alert-triangle-fill\" flip=\"horizontal,vertical\" />\n```\n\n#### Rotating an icon\n\nAn icon can be rotated by 90, 180 and 270 degrees. Only contents of the icon are rotated.\n\nTo rotate an icon, use `rotate` property. Value can be a string (degrees or percentages) or a number.\n\nNumber values are 1 for 90 degrees, 2 for 180 degrees, 3 for 270 degrees.\n\nExamples of 90 degrees rotation:\n\n```jsx\n<Icon icon=\"eva:alert-triangle-fill\" rotate={1} />\n<Icon icon=\"eva:alert-triangle-fill\" rotate=\"90deg\" />\n<Icon icon=\"eva:alert-triangle-fill\" rotate=\"25%\" />\n```\n\n### onLoad\n\n`onLoad` property is an optional callback function. It is called when icon data has been loaded.\n\nIt is not an event, such as `onClick` event for links, it is a simple callback function.\n\nWhen `onLoad` is called:\n\n-   If value of icon property is an object, `onLoad` is not called.\n-   If value of icon property is a string and icon data is available, `onLoad` is called on first render.\n-   If value of icon property is a string and icon data is not available, `onLoad` is called on first re-render after icon data is retrieved from API.\n\nWhat is the purpose of `onLoad`? To let you know when Icon component renders an icon and when it does not render anything. This allows you to do things like adding class name for parent element, such as \"container--with-icon\" that modify layout if icon is being displayed.\n\n## Full documentation\n\nFor extended documentation visit [Iconify for React documentation](https://docs.iconify.design/icon-components/react/).\n\n## License\n\nReact component is released with MIT license.\n\n© 2019 - 2022 Vjacheslav Trushkin / Iconify OÜ\n\nSee [Iconify icon sets page](https://icon-sets.iconify.design/) for list of collections and their licenses.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 - 2022 Vjacheslav Trushkin / Iconify OÜ\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@iconify/react/-/react-4.1.0.tgz#5ea86acae6e209a2f5b1b52922ab85d0d22f9b45",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@iconify/react/-/react-4.1.0.tgz",
    "hash": "5ea86acae6e209a2f5b1b52922ab85d0d22f9b45",
    "integrity": "sha512-Mf72i3TNNKpKCKxmo7kzqyrUdCgaoljpqtWmtqpqwyxoV4ukhnDsSRNLhf2yBnqGr3cVZsdj/i0FMpXIY0Qk0g==",
    "registry": "npm",
    "packageName": "@iconify/react",
    "cacheIntegrity": "sha512-Mf72i3TNNKpKCKxmo7kzqyrUdCgaoljpqtWmtqpqwyxoV4ukhnDsSRNLhf2yBnqGr3cVZsdj/i0FMpXIY0Qk0g== sha1-XqhqyubiCaL1sbUpIquF0NIvm0U="
  },
  "registry": "npm",
  "hash": "5ea86acae6e209a2f5b1b52922ab85d0d22f9b45"
}