{
  "manifest": {
    "name": "level-supports",
    "version": "4.0.1",
    "description": "Create a manifest describing the abilities of an abstract-level database",
    "license": "MIT",
    "scripts": {
      "test": "standard && ts-standard *.ts && hallmark && (nyc -s node test/self.js | faucet) && nyc report",
      "test-browsers-local": "airtap --coverage test/self.js && nyc report",
      "coverage": "nyc report -r lcovonly",
      "hallmark": "hallmark --fix"
    },
    "types": "./index.d.ts",
    "files": [
      "test",
      "CHANGELOG.md",
      "index.js",
      "index.d.ts"
    ],
    "devDependencies": {
      "@types/node": "^17.0.6",
      "@voxpelli/tsconfig": "^3.1.0",
      "airtap": "^4.0.4",
      "airtap-playwright": "^1.0.1",
      "faucet": "^0.0.1",
      "hallmark": "^4.0.0",
      "nyc": "^15.1.0",
      "standard": "^16.0.3",
      "tape": "^5.4.0",
      "ts-standard": "^11.0.0",
      "typescript": "^4.5.4"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Level/supports.git"
    },
    "homepage": "https://github.com/Level/supports",
    "keywords": [
      "abstract-leveldown",
      "database",
      "db",
      "level",
      "levelup",
      "manifest"
    ],
    "engines": {
      "node": ">=12"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-level-supports-4.0.1-431546f9d81f10ff0fea0e74533a0e875c08c66a-integrity/node_modules/level-supports/package.json",
    "readmeFilename": "README.md",
    "readme": "# level-supports\n\n**Create a manifest describing the abilities of an [`abstract-level`](https://github.com/Level/abstract-level) database.** No longer compatible with [`levelup`](https://github.com/Level/levelup) or [`abstract-leveldown`](https://github.com/Level/abstract-leveldown) since version 3.0.0.\n\n[![level badge][level-badge]](https://github.com/Level/awesome)\n[![npm](https://img.shields.io/npm/v/level-supports.svg)](https://www.npmjs.com/package/level-supports)\n[![Node version](https://img.shields.io/node/v/level-supports.svg)](https://www.npmjs.com/package/level-supports)\n[![Test](https://img.shields.io/github/workflow/status/Level/supports/Test?label=test)](https://github.com/Level/supports/actions/workflows/test.yml)\n[![Coverage](https://img.shields.io/codecov/c/github/Level/supports?label=\\&logo=codecov\\&logoColor=fff)](https://codecov.io/gh/Level/supports)\n[![Standard](https://img.shields.io/badge/standard-informational?logo=javascript\\&logoColor=fff)](https://standardjs.com)\n[![Common Changelog](https://common-changelog.org/badge.svg)](https://common-changelog.org)\n[![Donate](https://img.shields.io/badge/donate-orange?logo=open-collective\\&logoColor=fff)](https://opencollective.com/level)\n\n## Usage\n\n```js\nconst { supports } = require('level-supports')\n\ndb.supports = supports({\n  permanence: false,\n  encodings: {\n    utf8: true\n  }\n})\n```\n\nReceivers of the db can then use it like so:\n\n```js\nif (!db.supports.permanence) {\n  throw new Error('Persistent storage is required')\n}\n```\n\n## API\n\n### `manifest = supports([manifest, ..])`\n\nGiven zero or more manifest objects, returns a merged and enriched manifest object that has truthy properties for each of the features listed below.\n\nFor future extensibility, the properties are truthy rather than strictly typed booleans. Falsy or absent properties are converted to `false`, other values are allowed:\n\n```js\nsupports().snapshots // false\nsupports({ snapshots: true }).snapshots // true\nsupports({ snapshots: {} }).snapshots // {}\nsupports({ snapshots: 1 }, { snapshots: 2 }).snapshots // 2\n```\n\nFor consumers of the manifest this means they should check support like so:\n\n```js\nif (db.supports.snapshots)\n```\n\nRather than:\n\n```js\nif (db.supports.snapshots === true)\n```\n\n**Note:** the manifest describes high-level features that typically encompass multiple methods of a db. It is currently not a goal to describe a full API, or versions of it.\n\n## Features\n\n### `snapshots` (boolean)\n\nDoes the database have snapshot guarantees? Meaning that reads are unaffected by simultaneous writes. For example, an iterator should read from a snapshot of the database, created at the time `db.iterator()` was called. This means the iterator will not see the data of simultaneous write operations.\n\nMust be `false` if any of the following is true:\n\n- Reads don't operate on a snapshot\n- Snapshots are created asynchronously.\n\n<details>\n<summary>Support matrix</summary>\n\n| Module               | Snapshot guarantee          |\n| :------------------- | :-------------------------- |\n| `classic-level`      | ✅                           |\n| `memory-level`       | ✅                           |\n| `browser-level`      | ❌                           |\n| `rocks-level`        | ✅                           |\n| `leveldown`          | ✅                           |\n| `rocksdb`            | ✅                           |\n| `memdown`            | ✅                           |\n| `level-js`           | ✅ (by buffering)            |\n| `encoding-down`      | ✅                           |\n| `deferred-leveldown` | ✅                           |\n| `levelup`            | ✅                           |\n| `level-packager`     | ✅                           |\n| `level`              | ✅                           |\n| `level-mem`          | ✅                           |\n| `level-rocksdb`      | ✅                           |\n| `subleveldown`       | ✅                           |\n| `multileveldown`     | ✅ (unless `retry` is true)  |\n| `level-party`        | ❌ (unless `retry` is false) |\n\n</details>\n\n### `permanence` (boolean)\n\nDoes data survive after process (or environment) exit? Typically true. False for [`memory-level`](https://github.com/Level/memory-level) and [`memdown`](https://github.com/Level/memdown).\n\n### `seek` (boolean)\n\nDo iterators support [`seek(..)`](https://github.com/Level/abstract-level/#iteratorseektarget-options)?\n\n<details>\n<summary>Support matrix</summary>\n\n| Module               | Support |\n| :------------------- | :------ |\n| `abstract-level`     | ✅ 1.0.0 |\n| `classic-level`      | ✅ 1.0.0 |\n| `memory-level`       | ✅ 1.0.0 |\n| `browser-level`      | ✅ 1.0.0 |\n| `rocks-level`        | ✅ 1.0.0 |\n| `abstract-leveldown` | ✅ 6.0.0 |\n| `leveldown`          | ✅ 1.2.0 |\n| `rocksdb`            | ✅ 1.0.0 |\n| `memdown`            | ✅ 4.1.0 |\n| `level-js`           | ❌       |\n| `encoding-down`      | ✅ 6.1.0 |\n| `deferred-leveldown` | ✅ 5.1.0 |\n| `levelup`            | ✅ n/a   |\n| `level-packager`     | ✅ n/a   |\n| `level`              | ✅ 8.0.0 |\n| `level-mem`          | ✅ 4.0.0 |\n| `level-rocksdb`      | ✅ 1.0.0 |\n| `subleveldown`       | ✅ 4.1.0 |\n| `multileveldown`     | ❌       |\n| `level-party`        | ❌       |\n\n</details>\n\n#### `clear` (boolean)\n\nDoes the database support `db.clear()`? Always true since `abstract-level@1`.\n\n<details>\n<summary>Support matrix</summary>\n\nSee also [Level/community#79](https://github.com/Level/community/issues/79).\n\n| Module                          | Support | Optimized |\n| :------------------------------ | :------ | :-------- |\n| `abstract-level` and dependents | ✅ 1.0.0 | ✅ 1.0.0   |\n| `abstract-leveldown`            | ✅ 6.1.0 | n/a       |\n| `leveldown`                     | ✅ 5.2.0 | ✅ 6.0.3   |\n| `rocksdb`                       | ✅ 4.1.0 | ✅ 5.2.0   |\n| `memdown`                       | ✅ 5.0.0 | ✅ 6.1.1   |\n| `level-js`                      | ✅ 5.0.0 | ✅ 5.0.0   |\n| `encoding-down`                 | ✅ 6.2.0 | n/a       |\n| `deferred-leveldown`            | ✅ 5.2.0 | n/a       |\n| `levelup`                       | ✅ 4.2.0 | n/a       |\n| `level-packager`                | ✅ 5.0.3 | n/a       |\n| `level`                         | ✅ 6.0.0 | ✅ 7.0.1   |\n| `level-mem`                     | ✅ 5.0.1 | ✅ 6.0.1   |\n| `level-rocksdb`                 | ✅ 5.0.0 | ✅ 5.0.0   |\n| `subleveldown`                  | ✅ 4.2.1 | ✅ 4.2.1   |\n| `multileveldown`                | ✅ 5.0.0 | ✅ 5.0.0   |\n| `level-party`                   | ✅ 5.1.0 | ✅ 5.1.0   |\n\n</details>\n\n### `status` (boolean)\n\nDoes the database have a [`status`](https://github.com/Level/abstract-level/#dbstatus) property? Always true since `abstract-level@1`.\n\n### `deferredOpen` (boolean)\n\nCan operations like `db.put()` be called without explicitly opening the db? Like so:\n\n```js\nconst db = new Level()\nawait db.put('key', 'value')\n```\n\nAlways true since `abstract-level@1`.\n\n### `createIfMissing`, `errorIfExists` (boolean)\n\nDoes `db.open()` support these options?\n\n<details>\n<summary>Support matrix</summary>\n\n| Module          | Support |\n| :-------------- | :------ |\n| `classic-level` | ✅       |\n| `rocks-level`   | ✅       |\n| `memory-level`  | ❌       |\n| `browser-level` | ❌       |\n| `leveldown`     | ✅       |\n| `rocksdb`       | ✅       |\n| `memdown`       | ❌       |\n| `level-js`      | ❌       |\n\n</details>\n\n### `promises` (boolean)\n\nDo all database methods (that don't otherwise have a return value) support promises, in addition to callbacks? Such that, when a callback argument is omitted, a promise is returned:\n\n```js\ndb.put('key', 'value', callback)\nawait db.put('key', 'value')\n```\n\nAlways true since `abstract-level@1`.\n\n<details>\n<summary>Support matrix</summary>\n\n| Module                              | Support              |\n| :---------------------------------- | :------------------- |\n| `abstract-level` and dependents     | ✅                    |\n| `abstract-leveldown` and dependents | ❌ (except iterators) |\n| `levelup`                           | ✅                    |\n| `level-packager`                    | ✅                    |\n| `level`                             | ✅                    |\n| `level-mem`                         | ✅                    |\n| `level-rocksdb`                     | ✅                    |\n| `subleveldown`                      | ✅                    |\n| `multileveldown`                    | ✅                    |\n| `level-party`                       | ✅                    |\n\n</details>\n\n### `events` (object)\n\nWhich events does the database emit, as indicated by nested properties? For example:\n\n```js\nif (db.supports.events.put) {\n  db.on('put', listener)\n}\n```\n\n### `streams` (boolean)\n\nDoes database have the methods `createReadStream`, `createKeyStream` and `createValueStream`, following the API documented in `levelup`? For `abstract-level` databases, a standalone module called [`level-read-stream`](https://github.com/Level/read-stream) is available.\n\n<details>\n<summary>Support matrix</summary>\n\n| Module                              | Support |\n| :---------------------------------- | :------ |\n| `abstract-level` and dependents     | ❌       |\n| `abstract-leveldown` and dependents | ❌       |\n| `levelup`                           | ✅       |\n| `level-packager`                    | ✅       |\n| `level`                             | ✅       |\n| `level-mem`                         | ✅       |\n| `level-rocksdb`                     | ✅       |\n| `subleveldown`                      | ✅       |\n| `multileveldown`                    | ✅       |\n| `level-party`                       | ✅       |\n\n</details>\n\n### `encodings` (object)\n\nWhich encodings (by name) does the database support, as indicated by nested properties? For example:\n\n```js\n{ utf8: true, json: true }\n```\n\nAs the `encodings` property cannot be false (anymore, since `level-supports` v3.0.0) it implies that the database supports `keyEncoding` and `valueEncoding` options on all relevant methods, uses a default encoding of utf8 and that hence all of its read operations return strings rather than buffers by default.\n\n<details>\n<summary>Support matrix (general support)</summary>\n\n_This matrix just indicates general support of encodings as a feature, not that the listed modules support the `encodings` property exactly as described above, which only works on `abstract-level` databases._\n\n| Module                                 | Support |\n| :------------------------------------- | :------ |\n| `abstract-level` (and dependents)      | ✅       |\n| `abstract-leveldown`  (and dependents) | ❌       |\n| `encoding-down`                        | ✅       |\n| `levelup`                              | ✅       |\n| `level-packager`                       | ✅       |\n| `level`                                | ✅       |\n| `level-mem`                            | ✅       |\n| `level-rocksdb`                        | ✅       |\n| `subleveldown`                         | ✅       |\n| `multileveldown`                       | ✅       |\n| `level-party`                          | ✅       |\n\n</details>\n\n<details>\n<summary>Support matrix (specific encodings)</summary>\n\n_This matrix lists which encodings are supported as indicated by e.g. `db.supports.encodings.utf8`. Encodings that encode to another (like how `'json'` encodes to `'utf8'`) are excluded here, though they are present in `db.supports.encodings`._\n\n| Module          | `'utf8'`      | `'buffer'`    | `'view'`      |\n| :-------------- | :------------ | :------------ | :------------ |\n| `classic-level` | ✅             | ✅             | ✅ <sup>1<sup> |\n| `memory-level`  | ✅ <sup>2<sup> | ✅ <sup>2<sup> | ✅ <sup>2<sup> |\n| `browser-level` | ✅ <sup>1<sup> | ✅ <sup>1<sup> | ✅             |\n| `rocks-level`   | ✅             | ✅             | ✅ <sup>1<sup> |\n| `level@8`       | ✅ <sup>3<sup> | ✅ <sup>3<sup> | ✅ <sup>3<sup> |\n\n<small>\n\n1. Transcoded (which may have a performance impact).\n2. Can be controlled via `storeEncoding` option.\n3. Whether it's transcoded depends on environment (Node.js or browser).\n\n</small>\n\n</details>\n\n### `getMany` (boolean)\n\nDoes the database support `db.getMany()`? Always true since `abstract-level@1`.\n\n<details>\n<summary>Support matrix</summary>\n\n| Module                          | Support |\n| :------------------------------ | :------ |\n| `abstract-level` and dependents | ✅ 1.0.0 |\n| `abstract-leveldown`            | ✅ 7.2.0 |\n| `leveldown`                     | ✅ 6.1.0 |\n| `rocksdb`                       | ✅ 5.2.0 |\n| `memdown`                       | ✅       |\n| `level-js`                      | ✅ 6.1.0 |\n| `encoding-down`                 | ✅ 7.1.0 |\n| `deferred-leveldown`            | ✅ 7.0.0 |\n| `levelup`                       | ✅ 5.1.0 |\n| `level`                         | ✅ 7.0.1 |\n| `level-mem`                     | ✅ 6.0.1 |\n| `level-rocksdb`                 | ✅ 5.0.0 |\n| `subleveldown`                  | ✅ 6.0.0 |\n| `multileveldown`                | ✅ 5.0.0 |\n| `level-party`                   | ✅ 5.1.0 |\n\n</details>\n\n### `keyIterator` (boolean)\n\nDoes the database have a `keys([options])` method that returns a key iterator? Always true since `abstract-level@1`.\n\n### `valueIterator` (boolean)\n\nDoes the database have a `values([options])` method that returns a key iterator? Always true since `abstract-level@1`.\n\n### `iteratorNextv` (boolean)\n\nDo iterators have a `nextv(size[, options][, callback])` method? Always true since `abstract-level@1`.\n\n### `iteratorAll` (boolean)\n\nDo iterators have a `all([options][, callback])` method? Always true since `abstract-level@1`.\n\n### `additionalMethods` (object)\n\nDeclares support of additional methods, that are not part of the `abstract-level` interface. In the form of:\n\n```js\n{\n  foo: true,\n  bar: true\n}\n```\n\nWhich says the db has two methods, `foo` and `bar`. It might be used like so:\n\n```js\nif (db.supports.additionalMethods.foo) {\n  db.foo()\n}\n```\n\nFor future extensibility, the properties of `additionalMethods` should be taken as truthy rather than strictly typed booleans. We may add additional metadata (see [#1](https://github.com/Level/supports/issues/1)).\n\n## Install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install level-supports\n```\n\n## Contributing\n\n[`Level/supports`](https://github.com/Level/supports) is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [Contribution Guide](https://github.com/Level/community/blob/master/CONTRIBUTING.md) for more details.\n\n## Donate\n\nSupport us with a monthly donation on [Open Collective](https://opencollective.com/level) and help us continue our work.\n\n## License\n\n[MIT](LICENSE)\n\n[level-badge]: https://leveljs.org/img/badge.svg\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 The contributors to level-supports.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/level-supports/-/level-supports-4.0.1.tgz#431546f9d81f10ff0fea0e74533a0e875c08c66a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/level-supports/-/level-supports-4.0.1.tgz",
    "hash": "431546f9d81f10ff0fea0e74533a0e875c08c66a",
    "integrity": "sha512-PbXpve8rKeNcZ9C1mUicC9auIYFyGpkV9/i6g76tLgANwWhtG2v7I4xNBUlkn3lE2/dZF3Pi0ygYGtLc4RXXdA==",
    "registry": "npm",
    "packageName": "level-supports",
    "cacheIntegrity": "sha512-PbXpve8rKeNcZ9C1mUicC9auIYFyGpkV9/i6g76tLgANwWhtG2v7I4xNBUlkn3lE2/dZF3Pi0ygYGtLc4RXXdA== sha1-QxVG+dgfEP8P6g50UzoOh1wIxmo="
  },
  "registry": "npm",
  "hash": "431546f9d81f10ff0fea0e74533a0e875c08c66a"
}