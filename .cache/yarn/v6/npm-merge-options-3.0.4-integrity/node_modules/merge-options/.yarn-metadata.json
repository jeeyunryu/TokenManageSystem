{
  "manifest": {
    "name": "merge-options",
    "version": "3.0.4",
    "description": "Merge Option Objects",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/schnittstabil/merge-options.git"
    },
    "author": {
      "name": "Michael Mayer",
      "email": "michael@schnittstabil.de"
    },
    "engines": {
      "node": ">=10"
    },
    "scripts": {
      "test": "xo && tsd && nyc ava",
      "lint": "xo",
      "unit": "ava",
      "typecheck": "tsd",
      "clean": "rimraf .nyc_output/ coverage/",
      "coverage-html": "nyc ava && nyc report --reporter=html"
    },
    "main": "./index.js",
    "exports": {
      "require": "./index.js",
      "import": "./index.mjs"
    },
    "files": [
      "index.d.ts",
      "index.js",
      "index.mjs"
    ],
    "keywords": [
      "merge",
      "options",
      "deep",
      "plain",
      "object",
      "extend",
      "clone"
    ],
    "devDependencies": {
      "ava": "^3.11.1",
      "coveralls": "^3.1.0",
      "nyc": "^15.1.0",
      "rimraf": "^3.0.2",
      "tsd": "^0.13.1",
      "xo": "^0.33.0"
    },
    "dependencies": {
      "is-plain-obj": "^2.1.0"
    },
    "xo": {
      "rules": {
        "import/extensions": "off",
        "import/no-useless-path-segments": "off",
        "unicorn/import-index": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-merge-options-3.0.4-integrity/node_modules/merge-options/package.json",
    "readmeFilename": "readme.md",
    "readme": "# merge-options [![Build Status](https://travis-ci.org/schnittstabil/merge-options.svg?branch=master)](https://travis-ci.org/schnittstabil/merge-options) [![Coverage Status](https://coveralls.io/repos/schnittstabil/merge-options/badge.svg?branch=master&service=github)](https://coveralls.io/github/schnittstabil/merge-options?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\n\n> Merge Option Objects\n\n`merge-options` considers [plain objects](https://github.com/sindresorhus/is-plain-obj) as *Option Objects*, everything else as *Option Values*.\n\n## Install\n\n```\n$ npm install --save merge-options\n```\n\n## Usage\n\n```js\nconst mergeOptions = require('merge-options');\n\nmergeOptions({foo: 0}, {bar: 1}, {baz: 2}, {bar: 3})\n//=> {foo: 0, bar: 3, baz: 2}\n\nmergeOptions({nested: {unicorns: 'none'}}, {nested: {unicorns: 'many'}})\n//=> {nested: {unicorns: 'many'}}\n\nmergeOptions({[Symbol.for('key')]: 0}, {[Symbol.for('key')]: 42})\n//=> {Symbol(key): 42}\n```\n\n### Usage with custom config\n\n```js\nconst mergeOptions = require('merge-options').bind({ignoreUndefined: true});\n\nmergeOptions({foo: 'bar'}, {foo: undefined})\n//=> {foo: 'bar'}\n```\n\n## API\n\n### mergeOptions(option1, ...options)<br/>mergeOptions.call(config, option1, ...options)<br/>mergeOptions.apply(config, [option1, ...options])\n\n`mergeOptions` recursively merges one or more *Option Objects* into a new one and returns that. The `options` are merged in order, thus *Option Values* of additional `options` take precedence over previous ones.\n\nThe merging does not alter the passed `option` arguments, taking roughly the following steps:\n* recursively cloning<sup><a href=\"#note1\">[1]</a></sup> *Option Objects* and [arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) until reaching *Option Values*\n* copying<sup><a href=\"#note1\">[1]</a></sup> references to *Option Values* to the result object\n\n\n```js\nconst defaultOpts = {\n\tfn:      () => false,                  // functions are Option Values\n\tpromise: Promise.reject(new Error()),  // all non-plain objects are Option Values\n\tarray:   ['foo'],                      // arrays are Option Values\n\tnested:  {unicorns: 'none'}            // {…} is plain, therefore an Option Object\n};\n\nconst opts = {\n\tfn:      () => true,                   // [1]\n\tpromise: Promise.resolve('bar'),       // [2]\n\tarray:   ['baz'],                      // [3]\n\tnested:  {unicorns: 'many'}            // [4]\n};\n\nmergeOptions(defaultOpts, opts)\n//=>\n{\n\tfn:      [Function],                   // === [1]\n\tpromise: Promise { 'bar' },            // === [2]\n\tarray:   ['baz'],                      // !== [3] (arrays are cloned)\n\tnested:  {unicorns: 'many'}            // !== [4] (Option Objects are cloned)\n}\n```\n\n#### config\n\nType: `object`\n\n##### config.concatArrays\n\nType: `boolean`<br/>Default: `false`\n\nConcatenate arrays:\n\n```js\nmergeOptions({src: ['src/**']}, {src: ['test/**']})\n//=> {src: ['test/**']}\n\n// Via call\nmergeOptions.call({concatArrays: true}, {src: ['src/**']}, {src: ['test/**']})\n//=> {src: ['src/**', 'test/**']}\n\n// Via apply\nmergeOptions.apply({concatArrays: true}, [{src: ['src/**']}, {src: ['test/**']}])\n//=> {src: ['src/**', 'test/**']}\n```\n\n##### config.ignoreUndefined\n\nType: `boolean`<br/>Default: `false`\n\nIgnore undefined values:\n\n```js\nmergeOptions({foo: 'bar'}, {foo: undefined})\n//=> {foo: undefined}\n\n// Via call\nmergeOptions.call({ignoreUndefined: true}, {foo: 'bar'}, {foo: undefined})\n//=> {foo: 'bar'}\n\n// Via apply\nmergeOptions.apply({ignoreUndefined: true}, [{foo: 'bar'}, {foo: undefined}])\n//=> {foo: 'bar'}\n```\n\n\n## Related\n\n* See [object-assign](https://github.com/sindresorhus/object-assign) if you need a ES2015 Object.assign() ponyfill\n* See [deep-assign](https://github.com/sindresorhus/deep-assign) if you need to do Object.assign() recursively\n\n## Notes\n\n<ol>\n\t<li id=\"note1\">copying and cloning take only enumerable own properties into account</li>\n</ol>\n\n## License\n\nMIT © [Michael Mayer](http://schnittstabil.de)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Michael Mayer <michael@schnittstabil.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/merge-options/-/merge-options-3.0.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/merge-options/-/merge-options-3.0.4.tgz",
    "hash": "",
    "integrity": "sha512-2Sug1+knBjkaMsMgf1ctR1Ujx+Ayku4EdJN4Z+C2+JzoeF7A3OZ9KM2GY0CpQS51NR61LTurMJrRKPhSs3ZRTQ==",
    "registry": "npm",
    "packageName": "merge-options",
    "cacheIntegrity": "sha512-2Sug1+knBjkaMsMgf1ctR1Ujx+Ayku4EdJN4Z+C2+JzoeF7A3OZ9KM2GY0CpQS51NR61LTurMJrRKPhSs3ZRTQ== sha1-hHCcKqKkskwZgfZsF5/lVlzG27c="
  },
  "registry": "npm",
  "hash": "d92ba0d7e92706391a32c3207f572d475523c7e03292ee0474937867e0b6f89ce8785ec0dce67d28cd866340a9412e75351eb52d3bab309ad128f852b376514d"
}