{
  "manifest": {
    "name": "hapi-pino",
    "version": "8.5.0",
    "description": "Hapi plugin for the Pino logger ",
    "main": "index.js",
    "scripts": {
      "coverage": "lab test.js -c",
      "coverage:lcov": "lab test.js -r lcov -o coverage/lcov.info",
      "coveralls": "lab test.js -r lcov | coveralls",
      "test": "standard && lab --timeout 100000 test.js"
    },
    "keywords": [
      "hapi",
      "pino",
      "logger",
      "fast",
      "slow",
      "json"
    ],
    "license": "MIT",
    "devDependencies": {
      "@hapi/code": "^8.0.0",
      "@hapi/hapi": "^20.0.0",
      "@hapi/lab": "^23.0.0",
      "coveralls": "^3.0.11",
      "flush-write-stream": "^2.0.0",
      "make-promises-safe": "^5.1.0",
      "pre-commit": "^1.2.2",
      "split2": "^3.1.1",
      "standard": "^14.3.3"
    },
    "dependencies": {
      "@hapi/hoek": "^9.0.0",
      "abstract-logging": "^2.0.0",
      "pino": "^6.0.0",
      "pino-pretty": "^4.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pinojs/hapi-pino.git"
    },
    "author": {
      "name": "David Mark Clements"
    },
    "bugs": {
      "url": "https://github.com/pinojs/hapi-pino/issues"
    },
    "homepage": "https://github.com/pinojs/hapi-pino#readme",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-hapi-pino-8.5.0-ab36dfeb0059479e66fa6363e8f3ec2dc6a575d2-integrity/node_modules/hapi-pino/package.json",
    "readmeFilename": "README.md",
    "readme": "# hapi-pino&nbsp;&nbsp;![Tests Status](https://github.com/pinojs/hapi-pino/actions/workflows/test.yml/badge.svg) [![Coverage Status](https://coveralls.io/repos/github/pinojs/hapi-pino/badge.svg?branch=master)](https://coveralls.io/github/pinojs/hapi-pino?branch=master)\n\n\n[Hapi](http://hapijs.com) plugin for the [Pino](https://github.com/pinojs/pino) logger. It logs in JSON for easy\npost-processing.\n\n## Supported Hapi versions\n\n- hapi-pino v7.x and v8.x supports Hapi v18 and v19.\n- hapi-pino v6.x supports Hapi v17, v18 and v19\n- hapi-pino v5.x supports Hapi v17 and v18\n- hapi-pino v3.x\nsupports Hapi v17 only. The maximum version that can be used with Hapi v16 is Pino v4.\n- [hapi-pino v2.x](https://github.com/pinojs/hapi-pino/tree/v2.x.x) is the LTS line for Hapi v16.\n\n## Install\n\n```\nnpm install hapi-pino\n```\n\n## Usage\n\n```js\n'use strict'\n\nconst Hapi = require('@hapi/hapi')\n\nasync function start () {\n  // Create a server with a host and port\n  const server = Hapi.server({\n    host: 'localhost',\n    port: 3000,\n    debug: false, // disable Hapi debug console logging\n  })\n\n  // Add the route\n  server.route({\n    method: 'GET',\n    path: '/',\n    handler: async function (request, h) {\n      // request.log is HAPI standard way of logging\n      request.log(['a', 'b'], 'Request into hello world')\n\n      // you can also use a pino instance, which will be faster\n      request.logger.info('In handler %s', request.path)\n\n      return 'hello world'\n    }\n  })\n\n  await server.register({\n    plugin: require('hapi-pino'),\n    options: {\n      prettyPrint: process.env.NODE_ENV !== 'production',\n      // Redact Authorization headers, see https://getpino.io/#/docs/redaction\n      redact: ['req.headers.authorization']\n    }\n  })\n\n  // also as a decorated API\n  server.logger.info('another way for accessing it')\n\n  // and through Hapi standard logging system\n  server.log(['subsystem'], 'third way for accessing it')\n\n  await server.start()\n\n  return server\n}\n\nstart().catch((err) => {\n  console.log(err)\n  process.exit(1)\n})\n```\n\n## API\n\n- [Options](#options)\n- [Server decorations](#serverdecorations)\n- [Request decorations](#requestdecorations)\n- [Hapi Events](#hapievents)\n\n**hapi-pino** goal is to enable Hapi applications to log via [pino][pino]. To enable this, it decorates both the [server](#serverdecorations) and the [request](#requestadditions). Moreover, **hapi-pino**\n binds to the Hapi events system as described in the [\"Hapi\nevents\"](#hapievents) section.\n\n### Options\n### `options.logPayload: boolean`\n\n  **Default**: `false`\n\n  When enabled, add the request payload as `payload` to the `response` event log.\n\n### `options.logQueryParams: boolean`\n\n  **Default**: `false`\n\n  When enabled, add the request query as `queryParams` to the `response` event log.\n\n### `options.logRouteTags: boolean`\n\n  **Default**: `false`\n\n  When enabled, add the request route tags (as configured in hapi `route.options.tags`) `tags` to the `response` event log.\n\n### `options.logRequestStart: boolean | (Request) => boolean`\n\n  **Default**: false\n\n  Whether hapi-pino should add a `log.info()` at the beginning of Hapi requests for the given Request.\n\n  For convenience, you can pass in `true` to always log `request start` events, or `false` to disable logging `request start` events\n\n  Note: when `logRequestStart` is enabled and `getChildBindings` is configured to omit the `req` field, then the `req` field will be\n  omitted from the `request completed` log event. This behavior is useful if you want to separate requests from responses and link the\n  two via requestId (frequently done via `headers['x-request-id']`) , where \"request start\" only logs the request and a requestId,\n  and `request completed` only logs the response and the requestId.\n\n### `options.logRequestComplete: boolean | (Request) => Boolean`\n\n  **Default**: true\n\n  Whether hapi-pino should add a `log.info()` at the completion of Hapi requests for the given Request.\n\n  For convenience, you can pass in `true` to always log `request complete` events, or `false` to disable logging `request complete` events\n\n### `options.stream` Pino.DestinationStream\n\n  **Default**: `process.stdout`\n\n  the binary stream to write stuff to\n\n### `options.prettyPrint: boolean`\n\n  **Default**: `false`\n\n  Pretty print the logs (same as `node server | pino`), disabled in production.  Enable in development by passing `true`\n\n### `options.tags: ({ [key in pino.Level]?: string })`\n\n  **Default**: exposed via `hapi-pino.levelTags`\n\n  A map to specify pairs of Hapi log tags and levels.  The tags `trace`, `debug`, `info`, `warn`, and `error` map to their corresponding level.\n  Any mappings you supply take precedence over the default mappings.\n\n### `options.allTags: pino.Level`\n\n  **Default**: `'info'`\n\n The logging level to apply to all tags not matched by `tags`\n\n### `options.serializers: { [key: string]: pino.SerializerFn }`\n\n An object to overwrite the default serializers. You can but don't have to overwrite all of them.\n\n **Example**:  \n To redact the authorization header in the logs:\n  ```\n  {\n    req: require('pino-noir')(['req.headers.authorization']).req\n    res: ...\n    err: ...\n  }\n  ```\n\n### `options.instance: Pino`\n\n  Uses a previously created Pino instance as the logger.\n  The instance's `stream` and `serializers` take precedence.\n\n### `options.logEvents: string[] | false | null`\n\n  **Default**: `['onPostStart', 'onPostStop', 'response', 'request-error']` (all events)\n\n  Takes an array of strings with the events to log.\n\n  Set to `false/null` to disable all events. Even though there is no `request-error` [Hapi Event](#hapievents), the options enables the logging of failed requests.\n\n### `options.mergeHapiLogData: boolean`\n\n  **Default**: `false`\n\n  When enabled, Hapi-pino will merge the data received\n  from Hapi's logging interface (`server.log(tags, data)` or `request.log(tags, data)`)\n  into Pino's logged attributes at root level. If data is a string, it will be used as the value for the `msg` key.\n  When disabled, Hapi-pino will keep data under a `data` key.\n\n  **Example**:  \n  ```js\n  server.log(['info'], {hello: 'world'})\n\n  // with mergeHapiLogData: true\n  { level: 30, hello: 'world', ...}\n\n  // with mergeHapiLogData: false (Default)\n  { level: 30, data: { hello: 'world' }}\n  ```\n\n### `options.getChildBindings: (request) => { [key]: any }`\n\n  **Default**: `() => { req: Request }`, which automatically adds the request to every pino log call\n\n  Takes a function with the request as an input, and returns the object that will be passed into pinoLogger.child().\n\n### `options.ignorePaths: string[]`\n  Takes an array of string routes and disables logging for each.  Useful for health checks or any route that does not need logging.\n\n  **Example**:  \n  Do not log for /health route\n  ```js\n  ignorePaths: ['/health']\n  ```\n\n### `options.ignoreTags: string[]`\n  Takes an array of string tags and disables logging for each.  Useful for health checks or any route that does not need logging.\n\n  **Example**:  \n  Do not log for route with `healthcheck` tag\n  ```js\n  ignoreTags: ['healthcheck']\n  ```\n\n### `options.ignoreFunc: (options, request) => boolean`\n  Takes a function that receives the plugin options and the request as parameters, and returns a boolean. Logging will be disabled if the return value is `true`. Useful for scenarios where the `ignorePaths` or `ignoreTags` options can't achieve what is intended.\n\n  **Example**:\n  Do not log routes relative to static content\n  ```js\n  ignoreFunc: (options, request) => request.path.startsWith('/static')\n  ```\n\n  **Note**: if `ignoreFunc` is used, the other two options that can be used to ignore / disable logging (`ignorePaths` and `ignoreTags`) are effectively discarded. So `ignoreFunc` can be seen a more advanced option. For instance, you can easily re-implement the `ignorePaths` functionality as follows:\n\n  ```js\n  ignoreFunc: (options, request) => myIgnorePaths.include(request.path)\n  ```\n\n  (where `myIgnorePaths` would be an array with paths to be ignored).\n\n\n### `options.ignoredEventTags: object[]`\n  Takes an array of object tags and disables logging for each.  Useful for debug logs or any other tags that does not need logging.\n\n  **Default**: `{ log: '*', request: '*' }`, Logs all the events emitted by server.log and request.log without filtering event tags\n\n  **Example**: \n  Do not log the events for DEBUG and TEST tag\n  ```js\n  ignoredEventTags: { log: ['DEBUG', 'TEST'], request: ['DEBUG', 'TEST'] }\n  server.log(['DEBUG'], 'DEBUG')\n  ```\n\n\n### `options.level: Pino.Level`\n  **Default**: `'info'`\n\n  Set the minumum level that Pino should log out. See [Level](https://github.com/pinojs/pino/blob/master/docs/api.md#level).\n\n  **Example**:  \n  Configure Pino to output all `debug` or higher events:\n  ```js\n  level: 'debug'\n  ```\n\n### `options.redact: string[] | pino.redactOptions`\n\n  Path to be redacted in the log lines. See the [log redaction](https://getpino.io/#/docs/redaction) docs for more details.\n\n<a name=\"serverdecorations\"></a>\n### Server Decorations\n\n**hapi-pino** decorates the Hapi server with `server.logger`, which is an instance of\n  [pino][pino]. See its doc for the way to actual log.\n\n<a name=\"requestdecorations\"></a>\n### Request Decorations\n\n**hapi-pino** decorates the Hapi request with:\n\n* `request.logger`, which is an instance of [pino][pino] bound to the current request, so you can trace all the logs of a given request. See [pino][pino] doc for the way to actual log.\n\n<a name=\"hapievents\"></a>\n### Hapi Events\n\n**hapi-pino** listens to some Hapi events:\n\n* `'onRequest'`, to create a request-specific child logger\n* `'response'`, to log at `'info'` level when a request is completed\n* `'request'`, to support logging via the Hapi `request.log()` method and to log at `'warn'` level when a request errors or when request received contains an invalid `accept-encoding` header, see `tags` and `allTags` options.\n* `'log'`, to support logging via the Hapi `server.log()` method and to log in case of an internal server event, see `tags` and `allTags` options.\n* `'onPostStart'`, to log when the server is started\n* `'onPostStop'`, to log when the server is stopped\n\n## Acknowledgements\n\nThis project was kindly sponsored by [nearForm](http://nearform.com).\n\n## License\n\nMIT\n\n[pino]: https://github.com/pinojs/pino\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Matteo Collina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hapi-pino/-/hapi-pino-8.5.0.tgz#ab36dfeb0059479e66fa6363e8f3ec2dc6a575d2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hapi-pino/-/hapi-pino-8.5.0.tgz",
    "hash": "ab36dfeb0059479e66fa6363e8f3ec2dc6a575d2",
    "integrity": "sha512-p0phuePalD8965r6mboCBLIMWRO2vQAx+VSnXhTKxnF/4Sf+dk8Uze7109w9QfhlvGMqvBTEF6SxGStObBB/Lw==",
    "registry": "npm",
    "packageName": "hapi-pino",
    "cacheIntegrity": "sha512-p0phuePalD8965r6mboCBLIMWRO2vQAx+VSnXhTKxnF/4Sf+dk8Uze7109w9QfhlvGMqvBTEF6SxGStObBB/Lw== sha1-qzbf6wBZR55m+mNj6PPsLcalddI="
  },
  "registry": "npm",
  "hash": "ab36dfeb0059479e66fa6363e8f3ec2dc6a575d2"
}