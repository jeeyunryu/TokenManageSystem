{
  "manifest": {
    "name": "pupa",
    "version": "3.1.0",
    "description": "Simple micro templating",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/pupa.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "type": "module",
    "exports": "./index.js",
    "engines": {
      "node": ">=12.20"
    },
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "string",
      "formatting",
      "template",
      "object",
      "format",
      "interpolate",
      "interpolation",
      "templating",
      "expand",
      "simple",
      "replace",
      "placeholders",
      "values",
      "transform",
      "micro"
    ],
    "dependencies": {
      "escape-goat": "^4.0.0"
    },
    "devDependencies": {
      "ava": "^3.15.0",
      "tsd": "^0.17.0",
      "typescript": "^4.3.5",
      "xo": "^0.41.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-pupa-3.1.0-f15610274376bbcc70c9a3aa8b505ea23f41c579-integrity/node_modules/pupa/package.json",
    "readmeFilename": "readme.md",
    "readme": "# pupa\n\n> Simple micro templating\n\nUseful when all you need is to fill in some placeholders.\n\n## Install\n\n```\n$ npm install pupa\n```\n\n## Usage\n\n```js\nimport pupa from 'pupa';\n\npupa('The mobile number of {name} is {phone.mobile}', {\n\tname: 'Sindre',\n\tphone: {\n\t\tmobile: '609 24 363'\n\t}\n});\n//=> 'The mobile number of Sindre is 609 24 363'\n\npupa('I like {0} and {1}', ['ü¶Ñ', 'üêÆ']);\n//=> 'I like ü¶Ñ and üêÆ'\n\n// Double braces encodes the HTML entities to avoid code injection.\npupa('I like {{0}} and {{1}}', ['<br>ü¶Ñ</br>', '<i>üêÆ</i>']);\n//=> 'I like &lt;br&gt;ü¶Ñ&lt;/br&gt; and &lt;i&gt;üêÆ&lt;/i&gt;'\n```\n\n## API\n\n### pupa(template, data, options?)\n\n#### template\n\nType: `string`\n\nText with placeholders for `data` properties.\n\n#### data\n\nType: `object | unknown[]`\n\nData to interpolate into `template`.\n\n#### options\n\nType: `object`\n\n##### ignoreMissing\n\nType: `boolean`\\\nDefault: `false`\n\nBy default, Pupa throws a `MissingValueError` when a placeholder resolves to `undefined`. With this option set to `true`, it simply ignores it and leaves the placeholder as is.\n\n##### transform\n\nType: `((data: {value: unknown; key: string}) => unknown) | undefined` (default: `({value}) => value`)\n\nPerforms arbitrary operation for each interpolation. If the returned value was `undefined`, it behaves differently depending on the `ignoreMissing` option. Otherwise, the returned value will be interpolated into a string (and escaped when double-braced) and embedded into the template.\n\n### MissingValueError\n\nExposed for instance checking.\n\n## FAQ\n\n### What about template literals?\n\nTemplate literals expand on creation. This module expands the template on execution, which can be useful if either or both template and data are lazily created or user-supplied.\n\n## Related\n\n- [pupa-cli](https://github.com/sindresorhus/pupa-cli) - CLI for this module\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pupa/-/pupa-3.1.0.tgz#f15610274376bbcc70c9a3aa8b505ea23f41c579",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pupa/-/pupa-3.1.0.tgz",
    "hash": "f15610274376bbcc70c9a3aa8b505ea23f41c579",
    "integrity": "sha512-FLpr4flz5xZTSJxSeaheeMKN/EDzMdK7b8PTOC6a5PYFKTucWbdqjgqaEyH0shFiSJrVB1+Qqi4Tk19ccU6Aug==",
    "registry": "npm",
    "packageName": "pupa",
    "cacheIntegrity": "sha512-FLpr4flz5xZTSJxSeaheeMKN/EDzMdK7b8PTOC6a5PYFKTucWbdqjgqaEyH0shFiSJrVB1+Qqi4Tk19ccU6Aug== sha1-8VYQJ0N2u8xwyaOqi1Beoj9BxXk="
  },
  "registry": "npm",
  "hash": "f15610274376bbcc70c9a3aa8b505ea23f41c579"
}