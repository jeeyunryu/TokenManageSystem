{
  "manifest": {
    "name": "run-parallel-limit",
    "description": "Run an array of functions in parallel, but limit the number of tasks executing at the same time",
    "version": "1.1.0",
    "author": {
      "name": "Feross Aboukhadijeh",
      "email": "feross@feross.org",
      "url": "https://feross.org"
    },
    "bugs": {
      "url": "https://github.com/feross/run-parallel-limit/issues"
    },
    "dependencies": {
      "queue-microtask": "^1.2.2"
    },
    "devDependencies": {
      "airtap": "^3.0.0",
      "standard": "*",
      "tape": "^5.1.1"
    },
    "homepage": "https://github.com/feross/run-parallel-limit",
    "keywords": [
      "parallel",
      "async",
      "function",
      "callback",
      "asynchronous",
      "run",
      "array",
      "run parallel",
      "limit",
      "max",
      "queue",
      "run parallel limit",
      "max tasks",
      "tasks"
    ],
    "license": "MIT",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/feross/run-parallel-limit.git"
    },
    "scripts": {
      "test": "standard && npm run test-node && npm run test-browser",
      "test-browser": "airtap -- test/*.js",
      "test-browser-local": "airtap --local -- test/*.js",
      "test-node": "tape test/*.js"
    },
    "funding": [
      {
        "type": "github",
        "url": "https://github.com/sponsors/feross"
      },
      {
        "type": "patreon",
        "url": "https://www.patreon.com/feross"
      },
      {
        "type": "consulting",
        "url": "https://feross.org/support"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-run-parallel-limit-1.1.0-be80e936f5768623a38a963262d6bef8ff11e7ba-integrity/node_modules/run-parallel-limit/package.json",
    "readmeFilename": "README.md",
    "readme": "# run-parallel-limit [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/run-parallel-limit/master.svg\n[travis-url]: https://travis-ci.org/feross/run-parallel-limit\n[npm-image]: https://img.shields.io/npm/v/run-parallel-limit.svg\n[npm-url]: https://npmjs.org/package/run-parallel-limit\n[downloads-image]: https://img.shields.io/npm/dm/run-parallel-limit.svg\n[downloads-url]: https://npmjs.org/package/run-parallel-limit\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n### Run an array of functions in parallel, but limit the number of tasks executing at the same time\n\n![run-parallel-limit](img.png) [![Sauce Test Status](https://saucelabs.com/browser-matrix/run-parallel-limit.svg)](https://saucelabs.com/u/run-parallel-limit)\n\n### install\n\n```\nnpm install run-parallel-limit\n```\n\n### usage\n\n#### parallelLimit(tasks, limit, [callback])\n\nRun the `tasks` array of functions in parallel, with a maximum of `limit` tasks executing\nat the same time. If any of the functions pass an error to its callback, the main\n`callback` is immediately called with the value of the error. Once the `tasks` have\ncompleted, the results are passed to the final `callback` as an array.\n\nNote that the `tasks` are not executed in batches, so there is no guarantee that the first\n`limit` tasks will complete before any others are started.\n\nIt is also possible to use an object instead of an array. Each property will be run as a\nfunction and the results will be passed to the final `callback` as an object instead of\nan array. This can be a more readable way of handling the results.\n\n##### arguments\n\n- `tasks` - An array or object containing functions to run. Each function is passed a\n`callback(err, result)` which it must call on completion with an error `err` (which can\nbe `null`) and an optional `result` value.\n- `limit` - The maximum number of `tasks` to run at any time.\n- `callback(err, results)` - An optional callback to run once all the functions have\ncompleted. This function gets a results array (or object) containing all the result\narguments passed to the task callbacks.\n\n##### example\n\n```js\nvar parallelLimit = require('run-parallel-limit')\n\nvar tasks = [\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'one')\n    }, 200)\n  },\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'two')\n    }, 100)\n  },\n  ... hundreds more tasks ...\n]\n\nparallelLimit(tasks, 5, function (err, results) {\n  // optional callback\n  // the results array will equal ['one', 'two', ...] even though\n  // the second function had a shorter timeout.\n})\n```\n\nThe above code runs with a concurrency `limit` of 5, so at most 5 tasks will be running at\nany given time.\n\nThis module is basically equavalent to\n[`async.parallelLimit`](https://github.com/caolan/async#parallellimittasks-limit-callback),\nbut it's handy to just have the one function you need instead of the kitchen sink.\nModularity! Especially handy if you're serving to the browser and need to reduce your\njavascript bundle size.\n\nWorks great in the browser with [browserify](http://browserify.org/)!\n\n### see also\n\n- [run-auto](https://github.com/feross/run-auto)\n- [run-parallel](https://github.com/feross/run-parallel)\n- [run-series](https://github.com/feross/run-series)\n- [run-waterfall](https://github.com/feross/run-waterfall)\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Feross Aboukhadijeh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/run-parallel-limit/-/run-parallel-limit-1.1.0.tgz#be80e936f5768623a38a963262d6bef8ff11e7ba",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/run-parallel-limit/-/run-parallel-limit-1.1.0.tgz",
    "hash": "be80e936f5768623a38a963262d6bef8ff11e7ba",
    "integrity": "sha512-jJA7irRNM91jaKc3Hcl1npHsFLOXOoTkPCUL1JEa1R82O2miplXXRaGdjW/KM/98YQWDhJLiSs793CnXfblJUw==",
    "registry": "npm",
    "packageName": "run-parallel-limit",
    "cacheIntegrity": "sha512-jJA7irRNM91jaKc3Hcl1npHsFLOXOoTkPCUL1JEa1R82O2miplXXRaGdjW/KM/98YQWDhJLiSs793CnXfblJUw== sha1-voDpNvV2hiOjipYyYta++P8R57o="
  },
  "registry": "npm",
  "hash": "be80e936f5768623a38a963262d6bef8ff11e7ba"
}