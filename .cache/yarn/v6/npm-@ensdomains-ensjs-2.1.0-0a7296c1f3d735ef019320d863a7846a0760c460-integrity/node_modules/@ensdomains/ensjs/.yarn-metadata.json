{
  "manifest": {
    "name": "@ensdomains/ensjs",
    "version": "2.1.0",
    "description": "ens.js v2",
    "main": "dist/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/ensdomains/ensjs.git"
    },
    "files": [
      "dist"
    ],
    "scripts": {
      "test": "jest --verbose",
      "build": "babel src -d dist --ignore src/**/*.test.js,**/__tests__/**,src/testing-utils",
      "pub": "yarn build && yarn publish --access public"
    },
    "author": {},
    "license": "ISC",
    "devDependencies": {
      "@babel/cli": "^7.4.4",
      "@babel/core": "^7.4.4",
      "@babel/plugin-transform-async-to-generator": "^7.4.4",
      "@babel/plugin-transform-regenerator": "^7.4.4",
      "@babel/plugin-transform-runtime": "^7.4.4",
      "@babel/plugin-transform-spread": "^7.2.2",
      "@babel/polyfill": "^7.4.4",
      "@babel/preset-env": "^7.4.4",
      "@ensdomains/mock": "^2.0.37",
      "babel-eslint": "^9.0.0",
      "babel-jest": "^23.6.0",
      "babel-jest-assertions": "^0.1.0",
      "babel-plugin-add-module-exports": "^1.0.0",
      "babel-polyfill": "^6.26.0",
      "babel-preset-env": "^1.7.0",
      "coveralls": "^3.0.2",
      "eslint": "^5.6.1",
      "eslint-config-airbnb-base": "^12.1.0",
      "eslint-plugin-import": "^2.7.0",
      "eslint-plugin-node": "^5.1.1",
      "eslint-plugin-promise": "^3.5.0",
      "eslint-plugin-react": "^7.1.0",
      "eslint-plugin-standard": "^3.0.1",
      "esm": "^3.2.22",
      "ganache-cli": "^6.4.3",
      "ganache-core": "^2.11.3",
      "jest": "^26.4.2",
      "web3": "^1.7.0"
    },
    "dependencies": {
      "@babel/runtime": "^7.4.4",
      "@ensdomains/address-encoder": "^0.1.7",
      "@ensdomains/ens": "0.4.5",
      "@ensdomains/resolver": "0.2.4",
      "content-hash": "^2.5.2",
      "eth-ens-namehash": "^2.0.8",
      "ethers": "^5.0.13",
      "js-sha3": "^0.8.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@ensdomains-ensjs-2.1.0-0a7296c1f3d735ef019320d863a7846a0760c460-integrity/node_modules/@ensdomains/ensjs/package.json",
    "readmeFilename": "README.md",
    "readme": "# ENS.js V2\n\nThis is the rewrite of `ensjs`. If you are looking for the previous version, look for [ethereum-ens](https://www.npmjs.com/package/ethereum-ens)\n\n## Overview of the API\n\n### Setup\n\n```\nimport ENS, { getEnsAddress } from '@ensdomains/ensjs'\n\n\n\nconst ens = new ENS({ provider, ensAddress: getEnsAddress('1') })\n\nens.name('resolver.eth').getAddress() // 0x123\n```\n\n### exports\n\n```\ndefault - ENS\ngetEnsAddress\ngetResolverContract\ngetENSContract\nnamehash\nlabelhash\n```\n\n### ENS Interface\n\n```\nname(name: String) => Name\n```\n\nReturns a Name Object, that allows you to make record queries.\n\n```\nresolver(address: EthereumAddress) => Resolver\n```\n\nReturns a Resolver Object, allowing you to query names from this specific resolver. Most useful when querying a different resolver that is different than is currently recorded on the registry. E.g. migrating to a new resolver\n\n```\nasync getName(address: EthereumAddress) => Promise<Name>\n```\n\nReturns the reverse record for a particular Ethereum address.\n\n```\nasync setReverseRecord(name: Name) => Promise<EthersTxObject>\n```\n\nSets the reverse record for the current Ethereum address\n\n### Name Interface\n\n```ts\nasync getOwner() => Promise<EthereumAddress>\n```\n\nReturns the owner/controller for the current ENS name.\n\n```ts\nasync setOwner(address: EthereumAddress) => Promise<Ethers>\n```\n\nSets the owner/controller for the current ENS name.\n\n```ts\nasync getResolver() => Promise<EthereumAddress>\n```\n\nReturns the resolver for the current ENS name.\n\n```ts\nasync setResolver(address: EthereumAddress) => Promise<EthereumAddress>\n```\n\nSets the resolver for the current ENS name.\n\n```ts\nasync getTTL() => Promise<Number>\n```\n\nReturns the TTL for the current ENS name.\n\n```ts\nasync getAddress(coinId: String) => Promise<EthereumAddress>\n```\n\nReturns the address for the current ENS name for the coinId provided.\n\n```ts\nasync setAddress(coinId: String, address: EthereumAddress) => Promise<EthersTxObject>\n```\n\nSets the address for the current ENS name for the coinId provided.\n\n```ts\nasync getContent() => Promise<ContentHash>\n```\n\nReturns the contentHash for the current ENS name.\n\n```ts\nasync setContenthash(content: ContentHash) => Promise<EthersTxObject>\n```\n\nSets the contentHash for the current ENS name.\n\n```ts\nasync getText(key: String) => Promise<String>\n```\n\nReturns the text record for a given key for the current ENS name.\n\n```ts\nasync setText(key: String, recordValue: String) => Promise<EthersTxObject>\n```\n\nSets the text record for a given key for the current ENS name.\n\n```ts\nasync setSubnodeOwner(label: String, newOwner: EthereumAddress) => Promise<EthersTxObject>\n```\n\nSets the subnode owner for a subdomain of the current ENS name.\n\n```ts\nasync setSubnodeRecord(label: String, newOwner: EthereumAddress, resolver: EthereumAddress, ttl: ?Number) => Promise<EthersTxObject>\n```\n\nSets the subnode owner, resolver, ttl for a subdomain of the current ENS name in one transaction.\n\n```ts\n async createSubdomain(label: String) => Promise<EthersTxObject>\n```\n\nCreates a subdomain for the current ENS name. Automatically sets the owner to the signing account.\n\n```ts\nasync deleteSubdomain(label: String) => Promise<EthersTxObject>\n```\n\nDeletes a subdomain for the current ENS name. Automatically sets the owner to \"0x0...\"\n\n## Resolver Interface\n\n```ts\naddress\n```\n\nStatic property that returns current resolver address\n\n```ts\nname(name) => Name\n```\n\nReturns a Name Object that hardcodes the resolver\n\n## NOTE\n\nThe previous version of `ensjs` can be found at https://github.com/ensdomains/ensjs/tree/v1"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@ensdomains/ensjs/-/ensjs-2.1.0.tgz#0a7296c1f3d735ef019320d863a7846a0760c460",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@ensdomains/ensjs/-/ensjs-2.1.0.tgz",
    "hash": "0a7296c1f3d735ef019320d863a7846a0760c460",
    "integrity": "sha512-GRbGPT8Z/OJMDuxs75U/jUNEC0tbL0aj7/L/QQznGYKm/tiasp+ndLOaoULy9kKJFC0TBByqfFliEHDgoLhyog==",
    "registry": "npm",
    "packageName": "@ensdomains/ensjs",
    "cacheIntegrity": "sha512-GRbGPT8Z/OJMDuxs75U/jUNEC0tbL0aj7/L/QQznGYKm/tiasp+ndLOaoULy9kKJFC0TBByqfFliEHDgoLhyog== sha1-CnKWwfPXNe8BkyDYY6eEagdgxGA="
  },
  "registry": "npm",
  "hash": "0a7296c1f3d735ef019320d863a7846a0760c460"
}