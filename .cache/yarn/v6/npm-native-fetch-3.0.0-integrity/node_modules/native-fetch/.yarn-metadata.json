{
  "manifest": {
    "name": "native-fetch",
    "version": "3.0.0",
    "description": "Returns native fetch if available or the node-fetch module if not",
    "main": "src/index.js",
    "types": "dist/src/index.d.ts",
    "files": [
      "src",
      "dist"
    ],
    "scripts": {
      "test": "aegir test -t node -t browser -t webworker -t electron-main -t electron-renderer",
      "lint": "aegir lint && aegir ts -p check",
      "prepare": "aegir build --no-bundle",
      "release": "aegir release --docs false",
      "release-minor": "aegir release --type minor --docs false",
      "release-major": "aegir release --type major --docs false"
    },
    "author": {
      "name": "Alex Potsides",
      "email": "alex@achingbrain.net"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/achingbrain/native-fetch.git"
    },
    "peerDependencies": {
      "node-fetch": "*"
    },
    "devDependencies": {
      "@types/node-fetch": "^2.5.8",
      "aegir": "^30.3.0",
      "node-fetch": "^2.6.0"
    },
    "contributors": [
      {
        "name": "achingbrain",
        "email": "alex@achingbrain.net"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-native-fetch-3.0.0-integrity/node_modules/native-fetch/package.json",
    "readmeFilename": "README.md",
    "readme": "# native-fetch\n\n> Returns native fetch/Request/Headers if available or the node-fetch module if not\n\nAn (almost) drop-in replacement for the `node-fetch` module that returns the native fetch if available or the polyfill if not.\n\n### Why?\n\nSome environments such as the Electron Renderer process straddle the node/browser divide with features from both APIs available.  In these cases the webpack approach of always using the `browser` field in your `package.json` to override requires is too heavy-handed as sometimes you want to use the node version of an API.\n\nInstead we can check for the availability of a given API and return it, rather than the node-polyfill for that API.\n\n## Install\n\nYou must install a version of `node-fetch` [alongside this module](https://docs.npmjs.com/files/package.json#peerdependencies) to be used if a native implementation is not available.\n\n```console\n$ npm install --save native-fetch node-fetch\n```\n\n## Usage\n\n```javascript\nconst { default: fetch } = require('native-fetch')\n\nfetch('https://github.com/')\n    .then(res => res.text())\n    .then(body => console.log(body))\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/native-fetch/-/native-fetch-3.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/native-fetch/-/native-fetch-3.0.0.tgz",
    "hash": "",
    "integrity": "sha512-G3Z7vx0IFb/FQ4JxvtqGABsOTIqRWvgQz6e+erkB+JJD6LrszQtMozEHI4EkmgZQvnGHrpLVzUWk7t4sJCIkVw==",
    "registry": "npm",
    "packageName": "native-fetch",
    "cacheIntegrity": "sha512-G3Z7vx0IFb/FQ4JxvtqGABsOTIqRWvgQz6e+erkB+JJD6LrszQtMozEHI4EkmgZQvnGHrpLVzUWk7t4sJCIkVw== sha1-BszdcOeeFxw2XHUReVnPT+FKCbs="
  },
  "registry": "npm",
  "hash": "1b767bbf1d0815bfc5438271beda86001b0e4c8a915af810cfa7be7ab901f89243e8baeccd0b4ca331072381249a0650be7187ae92d5cd45a4eede2c24222457"
}