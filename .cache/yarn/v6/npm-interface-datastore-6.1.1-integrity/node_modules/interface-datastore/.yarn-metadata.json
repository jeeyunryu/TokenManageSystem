{
  "manifest": {
    "name": "interface-datastore",
    "version": "6.1.1",
    "description": "datastore interface",
    "leadMaintainer": "Alex Potsides <alex.potsides@protocol.ai>",
    "types": "types/src/index.d.ts",
    "typesVersions": {
      "*": {
        "*": [
          "types/src/*"
        ],
        "types/*": [
          "types/src/*"
        ],
        "types/src/*": [
          "types/src/*"
        ]
      }
    },
    "exports": {
      ".": {
        "browser": "./esm/src/index.js",
        "require": "./cjs/src/index.js",
        "import": "./esm/src/index.js"
      },
      "./key": {
        "browser": "./esm/src/key.js",
        "require": "./cjs/src/key.js",
        "import": "./esm/src/key.js"
      }
    },
    "files": [
      "*",
      "!**/*.tsbuildinfo"
    ],
    "scripts": {
      "build": "aegir build",
      "lint": "aegir ts -p check && aegir lint",
      "coverage": "aegir test --cov",
      "dep-check": "aegir dep-check -i rimraf",
      "clean": "rimraf dist types",
      "test": "aegir test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipfs-interfaces.git"
    },
    "keywords": [
      "interface",
      "key-value",
      "ipfs",
      "datastore"
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/ipfs/js-ipfs-interfaces/issues"
    },
    "homepage": "https://github.com/ipfs/js-ipfs-interfaces/tree/master/packages/interface-datastore#readme",
    "devDependencies": {
      "aegir": "^36.1.3",
      "rimraf": "^3.0.2",
      "util": "^0.12.4"
    },
    "dependencies": {
      "interface-store": "^2.0.2",
      "nanoid": "^3.0.2",
      "uint8arrays": "^3.0.0"
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "contributors": [
      {
        "name": "achingbrain",
        "email": "alex@achingbrain.net"
      },
      {
        "name": "David Dias",
        "email": "daviddias.p@gmail.com"
      },
      {
        "name": "Friedel Ziegelmayer",
        "email": "dignifiedquire@gmail.com"
      },
      {
        "name": "Juan Batiz-Benet",
        "email": "juan@benet.ai"
      },
      {
        "name": "Pedro Teixeira",
        "email": "i@pgte.me"
      },
      {
        "name": "Jacob Heun",
        "email": "jacobheun@gmail.com"
      },
      {
        "name": "Hugo Dias",
        "email": "hugomrdias@gmail.com"
      },
      {
        "name": "Vasco Santos",
        "email": "vasco.santos@moxy.studio"
      },
      {
        "name": "Hector Sanjuan",
        "email": "code@hector.link"
      },
      {
        "name": "Richard Schneider",
        "email": "makaretu@gmail.com"
      },
      {
        "name": "ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ",
        "email": "victorbjelkholm@gmail.com"
      },
      {
        "name": "Alan Shaw",
        "email": "alan.shaw@protocol.ai"
      },
      {
        "name": "Carson Farmer",
        "email": "carson.farmer@gmail.com"
      },
      {
        "name": "Erin Dachtler",
        "email": "download333@gmail.com"
      },
      {
        "name": "tcme",
        "email": "hi@this-connect.me"
      },
      {
        "name": "Adam Uhlir",
        "email": "adam@uhlir.dev"
      }
    ],
    "publishConfig": {
      "directory": "dist"
    },
    "main": "./cjs/index.js",
    "browser": {
      ".": "./cjs/src/index.js",
      "./key": "./cjs/src/key.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-interface-datastore-6.1.1-integrity/node_modules/interface-datastore/package.json",
    "readmeFilename": "README.md",
    "readme": "# interface-datastore <!-- omit in toc -->\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/interface-datastore.svg?style=flat-square)](https://codecov.io/gh/ipfs/interface-datastore)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/ipfs/interface-datastore/ci?label=ci&style=flat-square)](https://github.com/ipfs/interface-datastore/actions?query=branch%3Amaster+workflow%3Aci+)\n\n> Implementation of the [datastore](https://github.com/ipfs/go-datastore) interface in JavaScript\n\n## Lead Maintainer <!-- omit in toc -->\n\n[Alex Potsides](https://github.com/achingbrain)\n\n## Table of Contents <!-- omit in toc -->\n\n- [Implementations](#implementations)\n- [Install](#install)\n  - [Test suite](#test-suite)\n  - [Aborting requests](#aborting-requests)\n  - [Concurrency](#concurrency)\n  - [Keys](#keys)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Implementations\n\n- Backed Implementations\n  - Memory: [`datastore-core/memory`](https://github.com/ipfs/js-datastore-core/tree/master/src/memory.js)\n  - level: [`datastore-level`](https://github.com/ipfs/js-datastore-level) (supports any levelup compatible backend)\n  - File System: [`datstore-fs`](https://github.com/ipfs/js-datastore-fs)\n  - S3: [`datstore-s3`](https://github.com/ipfs/js-datastore-s3)\n- Wrapper Implementations\n  - Mount: [`datastore-core/src/mount`](https://github.com/ipfs/js-datastore-core/tree/master/src/mount.js)\n  - Keytransform: [`datstore-core/src/keytransform`](https://github.com/ipfs/js-datastore-core/tree/master/src/keytransform.js)\n  - Sharding: [`datastore-core/src/sharding`](https://github.com/ipfs/js-datastore-core/tree/master/src/sharding.js)\n  - Tiered: [`datstore-core/src/tiered`](https://github.com/ipfs/js-datastore-core/blob/master/src/tiered.js)\n  - Namespace: [`datastore-core/src/namespace`](https://github.com/ipfs/js-datastore-core/tree/master/src/namespace.js)\n\nIf you want the same functionality as [go-ds-flatfs](https://github.com/ipfs/go-ds-flatfs), use sharding with fs.\n\n```js\nimport FsStore from 'datastore-fs'\nimport { ShardingDataStore, shard } from 'datastore-core'\n\nconst fs = new FsStore('path/to/store')\n\n// flatfs now works like go-flatfs\nconst flatfs = await ShardingStore.createOrOpen(fs, new shard.NextToLast(2))\n```\n\n## Install\n\n```sh\n$ npm install interface-datastore\n```\n\n### Test suite\n\nAvailable via the [`interface-datastore-tests`](https://npmjs.com/package/interface-datastore-tests) module\n\n```js\nimport { interfaceDatastoreTests } from 'interface-datastore-tests'\n\ndescribe('mystore', () => {\n  interfaceDatastoreTests({\n    async setup () {\n      return instanceOfMyStore\n    },\n    async teardown () {\n      // cleanup resources\n    }\n  })\n})\n```\n\n### Aborting requests\n\nMost API methods accept an [AbortSignal][] as part of an options object.  Implementations may listen for an `abort` event emitted by this object, or test the `signal.aborted` property. When received implementations should tear down any long-lived requests or resources created.\n\n### Concurrency\n\nThe streaming `(put|get|delete)Many` methods are intended to be used with modules such as [it-parallel-batch](https://www.npmjs.com/package/it-parallel-batch) to allow calling code to control levels of parallelisation.  The batching method ensures results are returned in the correct order, but interface implementations should be thread safe.\n\n```js\nimport batch from 'it-parallel-batch'\nconst source = [{\n  key: ..,\n  value: ..\n}]\n\n// put values into the datastore concurrently, max 10 at a time\nfor await (const { key, data } of batch(store.putMany(source), 10)) {\n  console.info(`Put ${key}`)\n}\n```\n\n### Keys\n\nTo allow a better abstraction on how to address values, there is a `Key` class which is used as identifier. It's easy to create a key from a `Uint8Array` or a `string`.\n\n```js\nconst a = new Key('a')\nconst b = new Key(new Uint8Array([0, 1, 2, 3]))\n```\n\nThe key scheme is inspired by file systems and Google App Engine key model. Keys are meant to be unique across a system. They are typically hierarchical, incorporating more and more specific namespaces. Thus keys can be deemed 'children' or 'ancestors' of other keys:\n\n- `new Key('/Comedy')`\n- `new Key('/Comedy/MontyPython')`\n\nAlso, every namespace can be parameterized to embed relevant object information. For example, the Key `name` (most specific namespace) could include the object type:\n\n- `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n- `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n- `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n\n## API\nhttps://ipfs.github.io/interface-datastore/\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT 2017 © IPFS\n\n\n[Key]: #Keys\n[Object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n[Uint8Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[AbortSignal]: https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n[AsyncIterator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\n[AsyncIterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n[String]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[Function]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n[Number]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n[Boolean]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/interface-datastore/-/interface-datastore-6.1.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/interface-datastore/-/interface-datastore-6.1.1.tgz",
    "hash": "",
    "integrity": "sha512-AmCS+9CT34pp2u0QQVXjKztkuq3y5T+BIciuiHDDtDZucZD8VudosnSdUyXJV6IsRkN5jc4RFDhCk1O6Q3Gxjg==",
    "registry": "npm",
    "packageName": "interface-datastore",
    "cacheIntegrity": "sha512-AmCS+9CT34pp2u0QQVXjKztkuq3y5T+BIciuiHDDtDZucZD8VudosnSdUyXJV6IsRkN5jc4RFDhCk1O6Q3Gxjg== sha1-UVCgDeLnUT6q26WLyv0FnLUABME="
  },
  "registry": "npm",
  "hash": "026092fbd093df8a69daed104155e32b3b64baadf2e53f8121c8ae8870c3b4366e7190fc56e768b2749d5325c957a22c4643798dce111438429353ba4371b18e"
}