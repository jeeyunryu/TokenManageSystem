{
  "manifest": {
    "name": "proper-lockfile",
    "version": "4.1.2",
    "description": "A inter-process and inter-machine lockfile utility that works on a local or network file system",
    "keywords": [
      "lock",
      "locking",
      "file",
      "lockfile",
      "fs",
      "cross-process"
    ],
    "author": {
      "name": "AndrÃ© Cruz",
      "email": "andre@moxy.studio"
    },
    "homepage": "https://github.com/moxystudio/node-proper-lockfile",
    "repository": {
      "type": "git",
      "url": "git@github.com:moxystudio/node-proper-lockfile.git"
    },
    "license": "MIT",
    "main": "index.js",
    "files": [
      "lib"
    ],
    "scripts": {
      "lint": "eslint .",
      "test": "jest --env node --coverage --runInBand",
      "prerelease": "npm t && npm run lint",
      "release": "standard-version",
      "postrelease": "git push --follow-tags origin HEAD && npm publish"
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.js": [
        "eslint --fix",
        "git add"
      ]
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "dependencies": {
      "graceful-fs": "^4.2.4",
      "retry": "^0.12.0",
      "signal-exit": "^3.0.2"
    },
    "devDependencies": {
      "@commitlint/cli": "^7.0.0",
      "@commitlint/config-conventional": "^7.0.1",
      "@segment/clear-timeouts": "^2.0.0",
      "delay": "^4.1.0",
      "eslint": "^5.3.0",
      "eslint-config-moxy": "^7.1.0",
      "execa": "^1.0.0",
      "husky": "^1.1.4",
      "jest": "^24.5.0",
      "lint-staged": "^8.0.4",
      "mkdirp": "^0.5.1",
      "p-defer": "^2.1.0",
      "rimraf": "^2.6.2",
      "stable": "^0.1.8",
      "standard-version": "^5.0.0",
      "thread-sleep": "^2.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-proper-lockfile-4.1.2-integrity/node_modules/proper-lockfile/package.json",
    "readmeFilename": "README.md",
    "readme": "# proper-lockfile\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][codecov-image]][codecov-url] [![Dependency status][david-dm-image]][david-dm-url] [![Dev Dependency status][david-dm-dev-image]][david-dm-dev-url]\n\n[npm-url]:https://npmjs.org/package/proper-lockfile\n[downloads-image]:https://img.shields.io/npm/dm/proper-lockfile.svg\n[npm-image]:https://img.shields.io/npm/v/proper-lockfile.svg\n[travis-url]:https://travis-ci.org/moxystudio/node-proper-lockfile\n[travis-image]:https://img.shields.io/travis/moxystudio/node-proper-lockfile/master.svg\n[codecov-url]:https://codecov.io/gh/moxystudio/node-proper-lockfile\n[codecov-image]:https://img.shields.io/codecov/c/github/moxystudio/node-proper-lockfile/master.svg\n[david-dm-url]:https://david-dm.org/moxystudio/node-proper-lockfile\n[david-dm-image]:https://img.shields.io/david/moxystudio/node-proper-lockfile.svg\n[david-dm-dev-url]:https://david-dm.org/moxystudio/node-proper-lockfile?type=dev\n[david-dm-dev-image]:https://img.shields.io/david/dev/moxystudio/node-proper-lockfile.svg\n\nAn inter-process and inter-machine lockfile utility that works on a local or network file system.\n\n\n## Installation\n\n`$ npm install proper-lockfile`\n\n\n## Design\n\nThere are various ways to achieve [file locking](http://en.wikipedia.org/wiki/File_locking).\n\nThis library utilizes the `mkdir` strategy which works atomically on any kind of file system, even network based ones.\nThe lockfile path is based on the file path you are trying to lock by suffixing it with `.lock`.\n\nWhen a lock is successfully acquired, the lockfile's `mtime` (modified time) is periodically updated to prevent staleness. This allows to effectively check if a lock is stale by checking its `mtime` against a stale threshold. If the update of the mtime fails several times, the lock might be compromised. The `mtime` is [supported](http://en.wikipedia.org/wiki/Comparison_of_file_systems) in almost every `filesystem`.\n\n\n### Comparison\n\nThis library is similar to [lockfile](https://github.com/isaacs/lockfile) but the latter has some drawbacks:\n\n- It relies on `open` with `O_EXCL` flag which has problems in network file systems. `proper-lockfile` uses `mkdir` which doesn't have this issue.\n\n> O_EXCL is broken on NFS file systems; programs which rely on it for performing locking tasks will contain a race condition.\n\n- The lockfile staleness check is done via `ctime` (creation time) which is unsuitable for long running processes. `proper-lockfile` constantly updates lockfiles `mtime` to do proper staleness check.\n\n- It does not check if the lockfile was compromised which can lead to undesirable situations. `proper-lockfile` checks the lockfile when updating the `mtime`.\n\n- It has a default value of `0` for the stale option which isn't good because any crash or process kill that the package can't handle gracefully will leave the lock active forever.\n\n\n### Compromised\n\n`proper-lockfile` does not detect cases in which:\n\n- A `lockfile` is manually removed and someone else acquires the lock right after\n- Different `stale`/`update` values are being used for the same file, possibly causing two locks to be acquired on the same file\n\n`proper-lockfile` detects cases in which:\n\n- Updates to the `lockfile` fail\n- Updates take longer than expected, possibly causing the lock to become stale for a certain amount of time\n\n\nAs you see, the first two are a consequence of bad usage. Technically, it was possible to detect the first two but it would introduce complexity and eventual race conditions.\n\n\n## Usage\n\n### .lock(file, [options])\n\nTries to acquire a lock on `file` or rejects the promise on error.\n\nIf the lock succeeds, a `release` function is provided that should be called when you want to release the lock. The `release` function also rejects the promise on error (e.g. when the lock was already compromised).\n\nAvailable options:\n\n- `stale`: Duration in milliseconds in which the lock is considered stale, defaults to `10000` (minimum value is `5000`)\n- `update`: The interval in milliseconds in which the lockfile's `mtime` will be updated, defaults to `stale/2` (minimum value is `1000`, maximum value is `stale/2`)\n- `retries`: The number of retries or a [retry](https://www.npmjs.org/package/retry) options object, defaults to `0`\n- `realpath`: Resolve symlinks using realpath, defaults to `true` (note that if `true`, the `file` must exist previously)\n- `fs`: A custom fs to use, defaults to `graceful-fs`\n- `onCompromised`: Called if the lock gets compromised, defaults to a function that simply throws the error which will probably cause the process to die\n- `lockfilePath`: Custom lockfile path. e.g.: If you want to lock a directory and create the lock file inside it, you can pass `file` as `<dir path>` and `options.lockfilePath` as `<dir path>/dir.lock`\n\n\n```js\nconst lockfile = require('proper-lockfile');\n\nlockfile.lock('some/file')\n.then((release) => {\n    // Do something while the file is locked\n\n    // Call the provided release function when you're done,\n    // which will also return a promise\n    return release();\n})\n.catch((e) => {\n    // either lock could not be acquired\n    // or releasing it failed\n    console.error(e)\n});\n\n// Alternatively, you may use lockfile('some/file') directly.\n```\n\n\n### .unlock(file, [options])\n\nReleases a previously acquired lock on `file` or rejects the promise on error.\n\nWhenever possible you should use the `release` function instead (as exemplified above). Still there are cases in which it's hard to keep a reference to it around code. In those cases `unlock()` might be handy.\n\nAvailable options:\n\n- `realpath`: Resolve symlinks using realpath, defaults to `true` (note that if `true`, the `file` must exist previously)\n- `fs`: A custom fs to use, defaults to `graceful-fs`\n- `lockfilePath`: Custom lockfile path. e.g.: If you want to lock a directory and create the lock file inside it, you can pass `file` as `<dir path>` and `options.lockfilePath` as `<dir path>/dir.lock`\n\n\n```js\nconst lockfile = require('proper-lockfile');\n\nlockfile.lock('some/file')\n.then(() => {\n    // Do something while the file is locked\n\n    // Later..\n    return lockfile.unlock('some/file');\n});\n```\n\n### .check(file, [options])\n\nCheck if the file is locked and its lockfile is not stale, rejects the promise on error.\n\nAvailable options:\n\n- `stale`: Duration in milliseconds in which the lock is considered stale, defaults to `10000` (minimum value is `5000`)\n- `realpath`: Resolve symlinks using realpath, defaults to `true` (note that if `true`, the `file` must exist previously)\n- `fs`: A custom fs to use, defaults to `graceful-fs`\n- `lockfilePath`: Custom lockfile path. e.g.: If you want to lock a directory and create the lock file inside it, you can pass `file` as `<dir path>` and `options.lockfilePath` as `<dir path>/dir.lock`\n\n\n```js\nconst lockfile = require('proper-lockfile');\n\nlockfile.check('some/file')\n.then((isLocked) => {\n    // isLocked will be true if 'some/file' is locked, false otherwise\n});\n```\n\n### .lockSync(file, [options])\n\nSync version of `.lock()`.   \nReturns the `release` function or throws on error.\n\n### .unlockSync(file, [options])\n\nSync version of `.unlock()`.   \nThrows on error.\n\n### .checkSync(file, [options])\n\nSync version of `.check()`.\nReturns a boolean or throws on error.\n\n\n## Graceful exit\n\n`proper-lockfile` automatically removes locks if the process exits, except if the process is killed with SIGKILL or it crashes due to a VM fatal error (e.g.: out of memory).\n\n\n## Tests\n\n`$ npm test`   \n`$ npm test -- --watch` during development\n\nThe test suite is very extensive. There's even a stress test to guarantee exclusiveness of locks.\n\n\n## License\n\nReleased under the [MIT License](https://www.opensource.org/licenses/mit-license.php).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Made With MOXY Lda <hello@moxy.studio>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/proper-lockfile/-/proper-lockfile-4.1.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/proper-lockfile/-/proper-lockfile-4.1.2.tgz",
    "hash": "",
    "integrity": "sha512-TjNPblN4BwAWMXU8s9AEz4JmQxnD1NNL7bNOY/AKUzyamc379FWASUhc/K1pL2noVb+XmZKLL68cjzLsiOAMaA==",
    "registry": "npm",
    "packageName": "proper-lockfile",
    "cacheIntegrity": "sha512-TjNPblN4BwAWMXU8s9AEz4JmQxnD1NNL7bNOY/AKUzyamc379FWASUhc/K1pL2noVb+XmZKLL68cjzLsiOAMaA== sha1-yLneKvay8WAQZ/mOAaxmuqIjFB8="
  },
  "registry": "npm",
  "hash": "4e334f6e537807001631753cb3d004cf82664319c3d4d34bedb34e63f00a533c9a99cdfbf4558049485cfcad692f69e855bf9799928b2faf1c8f32ec88e00c68"
}