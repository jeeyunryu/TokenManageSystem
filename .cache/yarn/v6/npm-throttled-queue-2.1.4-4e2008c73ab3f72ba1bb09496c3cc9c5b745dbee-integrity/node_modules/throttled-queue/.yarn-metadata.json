{
  "manifest": {
    "name": "throttled-queue",
    "version": "2.1.4",
    "description": "Throttles arbitrary code to execute a maximum number of times per interval. Best for making throttled API requests.",
    "main": "dist/throttledQueue.js",
    "types": "dist/throttledQueue.d.ts",
    "files": [
      "dist/*",
      "src/*"
    ],
    "scripts": {
      "prepublishOnly": "tsc",
      "test": "mocha"
    },
    "mocha": {
      "spec": "test/throttledQueue.test.ts",
      "extension": [
        "ts"
      ],
      "require": [
        "ts-node/register"
      ],
      "timeout": 200000
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/shaunpersad/throttled-queue.git"
    },
    "keywords": [
      "node",
      "rate limit",
      "queue",
      "throttle",
      "throttled",
      "request"
    ],
    "author": {
      "name": "Shaun Persad",
      "email": "shaunpersad@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/shaunpersad/throttled-queue/issues"
    },
    "devDependencies": {
      "@types/mocha": "^9.0.0",
      "@types/node": "^17.0.8",
      "@typescript-eslint/eslint-plugin": "^5.9.0",
      "@typescript-eslint/parser": "^5.9.0",
      "eslint": "^8.6.0",
      "eslint-config-airbnb-typescript": "^16.1.0",
      "eslint-plugin-import": "^2.25.4",
      "mocha": "^9.1.3",
      "ts-node": "^10.4.0",
      "typescript": "^4.5.4"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-throttled-queue-2.1.4-4e2008c73ab3f72ba1bb09496c3cc9c5b745dbee-integrity/node_modules/throttled-queue/package.json",
    "readmeFilename": "README.md",
    "readme": "# throttled-queue\n\nThrottles arbitrary code to execute a maximum number of times per interval. Best for making throttled API requests.\n\nFor example, making network calls to popular APIs such as Twitter is subject to rate limits.  By wrapping all of your API calls in a throttle, it will automatically adjust your requests to be within the acceptable rate limits.\n\nUnlike the `throttle` functions of popular libraries like lodash and underscore, `throttled-queue` will not prevent any executions. Instead, every execution is placed into a queue, which will be drained at the desired rate limit.\n\n## Installation\n```shell\nnpm install throttled-queue\n```\n\nIt can be used in a Node.js environment, or directly in the browser.\n\n## Usage\n1) `require` or `import` the factory function:\n```javascript\nconst throttledQueue = require('throttled-queue');\n```\n\n```javascript\nimport throttledQueue from 'throttled-queue';\n```\n\n2) Create an instance of a throttled queue by specifying the maximum number of requests as the first parameter,\nand the interval in milliseconds as the second:\n```javascript\nconst throttle = throttledQueue(5, 1000); // at most 5 requests per second.\n```\n\n3) Use the `throttle` instance as a function to enqueue actions:\n```javascript\nthrottle(() => {\n    // perform some type of activity in here.\n});\n```\n\nThe `throttle` function will also return a promise with the result of your operation:\n```javascript\nconst result = await throttle(() => {\n    return Promise.resolve('hello!');\n});\n// result now equals \"hello\"\n```\n\n## Quick Examples\n### Basic\nRapidly assigning network calls to be run, but they will be limited to 1 request per second.\n```javascript\nconst throttledQueue = require('throttled-queue');\nconst throttle = throttledQueue(1, 1000); // at most make 1 request every second.\n\nfor (let x = 0; x < 100; x++) {\n    throttle(() => {\n        // make a network request.\n        return fetch('https://api.github.com/search/users?q=shaunpersad');\n    });\n}\n```\n### Reusable\nWherever the `throttle` instance is used, your action will be placed into the same queue, \nand be subject to the same rate limits.\n```javascript\nconst throttledQueue = require('throttled-queue');\nconst throttle = throttledQueue(1, 60 * 1000); // at most make 1 request every minute.\n\nfor (let x = 0; x < 50; x++) {\n    throttle(() => {\n        // make a network request.\n        return fetch('https://api.github.com/search/users?q=shaunpersad');\n    });\n}\nfor (let y = 0; y < 50; y++) {\n    throttle(() => {\n        // make another type of network request.\n        return fetch('https://api.github.com/search/repositories?q=throttled-queue+user:shaunpersad');\n    });\n}\n```\n### Bursts\nBy specifying a number higher than 1 as the first parameter, you can dequeue multiple actions within the given interval:\n```javascript\nconst throttledQueue = require('throttled-queue');\nconst throttle = throttledQueue(10, 1000); // at most make 10 requests every second.\n\nfor (let x = 0; x < 100; x++) {\n    throttle(() => {\n        // This will fire at most 10 a second, as rapidly as possible.\n        return fetch('https://api.github.com/search/users?q=shaunpersad');\n    });\n}\n```\n### Evenly spaced\nYou can space out your actions by specifying `true` as the third (optional) parameter:\n```javascript\nconst throttledQueue = require('throttled-queue');\nconst throttle = throttledQueue(10, 1000, true); // at most make 10 requests every second, but evenly spaced.\n\nfor (var x = 0; x < 100; x++) {\n    throttle(() => {\n        // This will fire at most 10 requests a second, spacing them out instead of in a burst.\n        return fetch('https://api.github.com/search/users?q=shaunpersad');\n    });\n}\n```\n### Promises\nStarting in version `2.0.0`, you can wait for the results of your operation:\n```javascript\nconst throttledQueue = require('throttled-queue');\nconst throttle = throttledQueue(10, 1000, true); // at most make 10 requests every second, but evenly spaced.\n\nconst usernames = ['shaunpersad', 'forward-motion'];\nconst profiles = await Promise.all(\n    usernames.map((username) => throttle(() => {\n        return fetch(`https://api.github.com/search/users?q=${username}`);\n    }))\n);\n\nconst justMe = await throttle(() => fetch('https://api.github.com/search/users?q=shaunpersad'));\n```\n\n## Typescript support\nThe package is written in Typescript and includes types by default. The `throttle` function is a generic,\nand in most cases will automatically infer the right type for the result of the promise from the input.\n\nHowever, you may also specify the return type of the promise when needed:\n```typescript\nimport throttledQueue from 'throttled-queue';\nconst throttle = throttledQueue(1, 1000);\nconst result1 = await throttle<string>(() => '1');\nconst result2 = await throttle<boolean>(() => Promise.resolve(true));\n```\n\n\n\n",
    "licenseText": "MIT License\n\nCopyright (c) 2022 Shaun Persad\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/throttled-queue/-/throttled-queue-2.1.4.tgz#4e2008c73ab3f72ba1bb09496c3cc9c5b745dbee",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/throttled-queue/-/throttled-queue-2.1.4.tgz",
    "hash": "4e2008c73ab3f72ba1bb09496c3cc9c5b745dbee",
    "integrity": "sha512-YGdk8sdmr4ge3g+doFj/7RLF5kLM+Mi7DEciu9PHxnMJZMeVuZeTj31g4VE7ekUffx/IdbvrtOCiz62afg0mkg==",
    "registry": "npm",
    "packageName": "throttled-queue",
    "cacheIntegrity": "sha512-YGdk8sdmr4ge3g+doFj/7RLF5kLM+Mi7DEciu9PHxnMJZMeVuZeTj31g4VE7ekUffx/IdbvrtOCiz62afg0mkg== sha1-TiAIxzqz9yuhuwlJbDzJxbdF2+4="
  },
  "registry": "npm",
  "hash": "4e2008c73ab3f72ba1bb09496c3cc9c5b745dbee"
}