{
  "manifest": {
    "name": "dns-over-http-resolver",
    "version": "2.1.1",
    "description": "DNS over HTTP resolver",
    "author": {
      "name": "Vasco Santos"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/vasco-santos/dns-over-http-resolver#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/vasco-santos/dns-over-http-resolver.git"
    },
    "bugs": {
      "url": "https://github.com/vasco-santos/dns-over-http-resolver/issues"
    },
    "keywords": [
      "dns",
      "doh",
      "http"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "main"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "chore",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "test": "aegir test",
      "test:browser": "aegir test -t browser",
      "test:node": "aegir test -t node",
      "test:electron-main": "aegir test -t electron-main",
      "lint": "aegir lint",
      "release": "aegir release",
      "build": "aegir build",
      "dep-check": "aegir dep-check"
    },
    "dependencies": {
      "debug": "^4.3.1",
      "native-fetch": "^4.0.2",
      "receptacle": "^1.3.2",
      "undici": "^5.12.0"
    },
    "devDependencies": {
      "@types/debug": "^4.1.7",
      "aegir": "^37.4.4",
      "sinon": "^14.0.0",
      "ts-sinon": "^2.0.2",
      "util": "^0.12.3"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-dns-over-http-resolver-2.1.1-integrity/node_modules/dns-over-http-resolver/package.json",
    "readmeFilename": "README.md",
    "readme": "# dns-over-http-resolver <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/vasco-santos/dns-over-http-resolver.svg?style=flat-square)](https://codecov.io/gh/vasco-santos/dns-over-http-resolver)\n[![CI](https://img.shields.io/github/workflow/status/libp2p/js-libp2p-interfaces/test%20&%20maybe%20release/main?style=flat-square)](https://github.com/vasco-santos/dns-over-http-resolver/actions/workflows/js-test-and-release.yml)\n\n> DNS over HTTP resolver\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n  - [options](#options)\n- [API](#api)\n  - [resolve(hostname, rrType)](#resolvehostname-rrtype)\n    - [Parameters](#parameters)\n    - [Returns](#returns)\n    - [Example](#example)\n  - [resolve4(hostname)](#resolve4hostname)\n    - [Parameters](#parameters-1)\n    - [Returns](#returns-1)\n    - [Example](#example-1)\n  - [resolve6(hostname)](#resolve6hostname)\n    - [Parameters](#parameters-2)\n    - [Returns](#returns-2)\n    - [Example](#example-2)\n  - [resolveTxt(hostname)](#resolvetxthostname)\n    - [Parameters](#parameters-3)\n    - [Returns](#returns-3)\n    - [Example](#example-3)\n  - [getServers()](#getservers)\n    - [Returns](#returns-4)\n    - [Example](#example-4)\n  - [setServers(servers)](#setserversservers)\n    - [Parameters](#parameters-4)\n    - [Example](#example-5)\n- [Contribute](#contribute)\n- [License](#license)\n- [Contribution](#contribution)\n\n## Install\n\n```console\n$ npm i dns-over-http-resolver\n```\n\nIsomorphic DNS over HTTP resolver using fetch.\n\nAPI based on [Node.js' dns promises API](https://nodejs.org/dist/latest-v14.x/docs/api/dns.html#dns_dns_promises_api), allowing the native `dns` module to be used if available when relying on this API.\n\n## Usage\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\n\nconst dohResolver = new DnsOverHttpResolver(options)\n```\n\n[Cloudflare](https://cloudflare-dns.com/dns-query) and [Google](https://dns.google/resolve) DNS servers are used by default. They can be replaced via the API.\n\nYou can also use `require('dns').promises` in Node.js in lieu of this module.\n\n### options\n\nYou can provide the following options for the DnsOverHttpResolver:\n\n| Name     | Type     | Description                          | Default |\n| -------- | -------- | ------------------------------------ | ------- |\n| maxCache | `number` | maximum number of cached dns records | 100     |\n\n## API\n\n### resolve(hostname, rrType)\n\nUses the DNS protocol to resolve the given host name into a DNS record.\n\n#### Parameters\n\n| Name      | Type     | Description                         |\n| --------- | -------- | ----------------------------------- |\n| hostname  | `string` | host name to resolve                |\n| \\[rrType] | `string` | resource record type (default: 'A') |\n\n#### Returns\n\n| Type                     | Description                                                    |\n| ------------------------ | -------------------------------------------------------------- |\n| `Promise<Array<string>>` | returns a Promise resolving a DNS record according to its type |\n\n#### Example\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\nconst resolver = new DnsOverHttpResolver()\n\nconst hostname = 'google.com'\nconst recordType = 'TXT'\n\nconst dnsRecord = await resolver.resolve(hostname, recordType)\n```\n\n### resolve4(hostname)\n\nUses the DNS protocol to resolve the given host name into IPv4 addresses.\n\n#### Parameters\n\n| Name     | Type     | Description          |\n| -------- | -------- | -------------------- |\n| hostname | `string` | host name to resolve |\n\n#### Returns\n\n| Type                     | Description                                |\n| ------------------------ | ------------------------------------------ |\n| `Promise<Array<string>>` | returns a Promise resolving IPv4 addresses |\n\n#### Example\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\nconst resolver = new DnsOverHttpResolver()\n\nconst hostname = 'google.com'\n\nconst address = await resolver.resolve4(hostname) // ['216.58.212.142']\n```\n\n### resolve6(hostname)\n\nUses the DNS protocol to resolve the given host name into IPv6 addresses.\n\n#### Parameters\n\n| Name     | Type     | Description          |\n| -------- | -------- | -------------------- |\n| hostname | `string` | host name to resolve |\n\n#### Returns\n\n| Type                     | Description                                |\n| ------------------------ | ------------------------------------------ |\n| `Promise<Array<string>>` | returns a Promise resolving IPv6 addresses |\n\n#### Example\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\nconst resolver = new DnsOverHttpResolver()\n\nconst hostname = 'google.com'\n\nconst address = await resolver.resolve6(hostname) // ['2a00:1450:4001:801::200e']\n```\n\n### resolveTxt(hostname)\n\nUses the DNS protocol to resolve the given host name into a Text Record.\n\n#### Parameters\n\n| Name     | Type     | Description          |\n| -------- | -------- | -------------------- |\n| hostname | `string` | host name to resolve |\n\n#### Returns\n\n| Type                            | Description                               |\n| ------------------------------- | ----------------------------------------- |\n| `Promise<Array<Array<string>>>` | returns a Promise resolving a Text Record |\n\n#### Example\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\nconst resolver = new DnsOverHttpResolver()\n\nconst hostname = 'google.com'\n\nconst address = await resolver.resolveTxt(hostname) // [['v=spf1 -all']]\n```\n\n### getServers()\n\nGet an array of the IP addresses currently configured for DNS resolution.\nThese addresses are formatted according to RFC 5952. It can include a custom port.\n\n#### Returns\n\n| Type            | Description                       |\n| --------------- | --------------------------------- |\n| `Array<string>` | returns array of DNS servers used |\n\n#### Example\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\n\nconst resolver = new DnsOverHttpResolver()\nconst servers = resolver.getServers()\n```\n\n### setServers(servers)\n\nSets the IP address and port of servers to be used when performing DNS resolution.\nNote that the servers order will be randomized on each request for load distribution.\n\n#### Parameters\n\n| Name    | Type            | Description                            |\n| ------- | --------------- | -------------------------------------- |\n| servers | `Array<string>` | Array of RFC 5952 formatted addresses. |\n\n#### Example\n\n```js\nconst DnsOverHttpResolver = require('dns-over-http-resolver')\n\nconst resolver = new DnsOverHttpResolver()\nresolver.setServers(['https://cloudflare-dns.com/dns-query'])\n```\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/vasco-santos/dns-over-http-resolver/issues/new) or submit PRs.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/dns-over-http-resolver/-/dns-over-http-resolver-2.1.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/dns-over-http-resolver/-/dns-over-http-resolver-2.1.1.tgz",
    "hash": "",
    "integrity": "sha512-Lm/eXB7yAQLJ5WxlBGwYfBY7utduXPZykcSmcG6K7ozM0wrZFvxZavhT6PqI0kd/5CUTfev/RrEFQqyU4CGPew==",
    "registry": "npm",
    "packageName": "dns-over-http-resolver",
    "cacheIntegrity": "sha512-Lm/eXB7yAQLJ5WxlBGwYfBY7utduXPZykcSmcG6K7ozM0wrZFvxZavhT6PqI0kd/5CUTfev/RrEFQqyU4CGPew== sha1-o/8/12FM6npLcllOrxL7PIUIBFY="
  },
  "registry": "npm",
  "hash": "2e6fde5c1ef20102c9e56c65046c187c163bbad76e5cf67291c4a6706e8aee8cccd30ad916fc596af853e8fa88d2477fe425137debff46b10542ac94e0218f7b"
}