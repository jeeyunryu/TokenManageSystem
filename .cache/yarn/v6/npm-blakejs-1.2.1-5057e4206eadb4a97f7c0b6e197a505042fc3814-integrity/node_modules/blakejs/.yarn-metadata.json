{
  "manifest": {
    "name": "blakejs",
    "version": "1.2.1",
    "description": "Pure Javascript implementation of the BLAKE2b and BLAKE2s hash functions",
    "main": "index.js",
    "scripts": {
      "test": "standard && node test_blake2b.js && node test_blake2s.js"
    },
    "devDependencies": {
      "standard": "*",
      "tape": "*"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dcposch/blakejs.git"
    },
    "author": {},
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dcposch/blakejs/issues"
    },
    "homepage": "https://github.com/dcposch/blakejs#readme",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-blakejs-1.2.1-5057e4206eadb4a97f7c0b6e197a505042fc3814-integrity/node_modules/blakejs/package.json",
    "readmeFilename": "README.md",
    "readme": "blakejs\n====\n\n[![travis ci](https://travis-ci.org/dcposch/blakejs.svg?branch=master)](https://travis-ci.org/dcposch/blakejs)\n[![npm version](https://badge.fury.io/js/blakejs.svg)](https://badge.fury.io/js/blakejs)\n\n**blakejs is a pure Javascript implementation of the BLAKE2b and BLAKE2s hash functions.**\n\n![blake1](https://cloud.githubusercontent.com/assets/169280/25921238/9bf1877a-3589-11e7-8a93-74b69c3874bb.jpg)\n\n---\n\n[RFC 7693: The BLAKE Cryptographic Hash and MAC](https://tools.ietf.org/html/rfc7693)\n\nBLAKE is the default family of hash functions in the venerable NaCl crypto library. Like SHA2 and SHA3 but unlike MD5 and SHA1, BLAKE offers solid security. With an optimized assembly implementation, BLAKE can be faster than all of those other hash functions.\n\nOf course, this implementation is in Javascript, so it won't be winning any speed records. More under Performance below. It's short and sweet, less than 500 LOC.\n\n**As far as I know, this package is the easiest way to compute Blake2 in the browser.**\n\nOther options to consider:\n- [@nazar-pc](https://github.com/nazar-pc) has WebAssembly implementation for higher performance where supported: [blake2.wasm](https://github.com/nazar-pc/blake2.wasm)\n- [@emilbayes](https://github.com/emilbayes) has a Blake2b-only implementation with salt support; WASM with automatic JS fallback: [blake2b](https://github.com/emilbayes/blake2b)\n- On node, you probably want the native wrapper [node-blake2](https://github.com/ludios/node-blake2)\n\nQuick Start\n---\n```\n$ npm install --save blakejs\n```\n\n```js\nvar blake = require('blakejs')\nconsole.log(blake.blake2bHex('abc'))\n// prints ba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d17d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923\nconsole.log(blake.blake2sHex('abc'))\n// prints 508c5e8c327c14e2e1a72ba34eeb452f37458b209ed63a294d999b4c86675982\n```\n\nAPI\n---\n\n### 1. Use `blake2b` to compute a BLAKE2b hash\n\nPass it a string, `Buffer`, or `Uint8Array` containing bytes to hash, and it will return a `Uint8Array` containing the hash.\n\n```js\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n//           Strings are converted to UTF8 bytes\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2b(input, key, outlen) {\n    [...]\n}\n```\n\nFor convenience, `blake2bHex` takes the same arguments and works the same way, but returns a hex string.\n\n### 2. Use `blake2b[Init,Update,Final]` to compute a streaming hash\n\n```js\nvar KEY = null // optional key\nvar OUTPUT_LENGTH = 64 // bytes\nvar context = blake2bInit(OUTPUT_LENGTH, KEY)\n...\n// each time you get a byte array from the stream:\nblake2bUpdate(context, bytes)\n...\n// finally, once the stream has been exhausted\nvar hash = blake2bFinal(context)\n// returns a 64-byte hash, as a Uint8Array\n```\n\n### 3. All `blake2b*` functions have `blake2s*` equivalents\n\nBLAKE2b: `blake2b`, `blake2bHex`, `blake2bInit`, `blake2bUpdate`, and `blake2bFinal`\n\nBLAKE2s: `blake2s`, `blake2sHex`, `blake2sInit`, `blake2sUpdate`, and `blake2sFinal`\n\nThe inputs are identical except that maximum key size and maximum output size are 32 bytes instead of 64.\n\nLimitations\n---\n* Can only handle up to 2**53 bytes of input\n\n  If your webapp is hashing more than 8 petabytes, you may have other problems :)\n\nTesting\n---\n* Examples from the RFC\n* BLAKE2s self-test from the RFC\n* Examples from http://pythonhosted.org/pyblake2/examples.html\n* A longer set of test vectors generated by https://github.com/jedisct1/crypto-test-vectors/tree/master/crypto/hash/blake2/blake2b/nosalt-nopersonalization/generators/libsodium\n\nPerformance\n---\n```\nBLAKE2b: 15.2 MB / second on a 2.2GHz i7-4770HQ\nBLAKE2s: 20.4 MB / second\n\n¯\\_(ツ)_/¯\n```\n\nIf you're using BLAKE2b in server side node.js code, you probably want the [native wrapper](https://www.npmjs.com/package/blake2) which should be able to do several hundred MB / second on the same processor.\n\nIf you're using BLAKE2b in a web app, 15 MB/sec might be fine.\n\nJavascript doesn't have 64-bit integers, and BLAKE2b is a 64-bit integer algorithm. Writing it with`Uint32Array` is not that fast. BLAKE2s is a 32-bit algorithm, so it's a bit faster.\n\nIf we want better machine code at the expense of gross-looking Javascript, we could use asm.js\n\n\nLicense\n---\nCreative Commons CC0. Ported from the reference C implementation in\n[RFC 7693](https://tools.ietf.org/html/rfc7693).\n",
    "licenseText": "Copyright (c) 2022 Blakejs contributors\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/blakejs/-/blakejs-1.2.1.tgz#5057e4206eadb4a97f7c0b6e197a505042fc3814",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/blakejs/-/blakejs-1.2.1.tgz",
    "hash": "5057e4206eadb4a97f7c0b6e197a505042fc3814",
    "integrity": "sha512-QXUSXI3QVc/gJME0dBpXrag1kbzOqCjCX8/b54ntNyW6sjtoqxqRk3LTmXzaJoh71zMsDCjM+47jS7XiwN/+fQ==",
    "registry": "npm",
    "packageName": "blakejs",
    "cacheIntegrity": "sha512-QXUSXI3QVc/gJME0dBpXrag1kbzOqCjCX8/b54ntNyW6sjtoqxqRk3LTmXzaJoh71zMsDCjM+47jS7XiwN/+fQ== sha1-UFfkIG6ttKl/fAtuGXpQUEL8OBQ="
  },
  "registry": "npm",
  "hash": "5057e4206eadb4a97f7c0b6e197a505042fc3814"
}