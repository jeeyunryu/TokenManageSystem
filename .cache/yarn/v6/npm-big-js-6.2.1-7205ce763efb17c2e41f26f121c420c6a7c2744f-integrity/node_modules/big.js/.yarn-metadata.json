{
  "manifest": {
    "name": "big.js",
    "description": "A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic",
    "version": "6.2.1",
    "keywords": [
      "arbitrary",
      "precision",
      "arithmetic",
      "big",
      "number",
      "decimal",
      "float",
      "biginteger",
      "bigdecimal",
      "bignumber",
      "bigint",
      "bignum"
    ],
    "exports": {
      ".": {
        "import": "./big.mjs",
        "require": "./big.js"
      },
      "./big.mjs": "./big.mjs",
      "./big.js": "./big.js",
      "./package.json": "./package.json"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/MikeMcl/big.js.git"
    },
    "main": "big",
    "browser": "big.js",
    "module": "big.mjs",
    "author": {
      "name": "Michael Mclaughlin",
      "email": "M8ch88l@gmail.com"
    },
    "bugs": {
      "url": "https://github.com/MikeMcl/big.js/issues"
    },
    "engines": {
      "node": "*"
    },
    "license": "MIT",
    "scripts": {
      "test": "node ./test/runner.js"
    },
    "files": [
      "big.js",
      "big.mjs"
    ],
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/bigjs"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-big-js-6.2.1-7205ce763efb17c2e41f26f121c420c6a7c2744f-integrity/node_modules/big.js/package.json",
    "readmeFilename": "README.md",
    "readme": "# big.js\n\n**A small, fast JavaScript library for arbitrary-precision decimal arithmetic.**\n\n[![npm version](https://img.shields.io/npm/v/big.js.svg)](https://www.npmjs.com/package/big.js)\n[![npm downloads](https://img.shields.io/npm/dw/big.js)](https://www.npmjs.com/package/big.js)\n\n## Features\n\n- Simple API\n- Faster, smaller and easier-to-use than JavaScript versions of Java's BigDecimal\n- Only 6 KB minified\n- Replicates the `toExponential`, `toFixed` and `toPrecision` methods of JavaScript Numbers\n- Stores values in an accessible decimal floating point format\n- Comprehensive [documentation](http://mikemcl.github.io/big.js/) and test set\n- No dependencies\n- Uses ECMAScript 3 only, so works in all browsers\n\nThe little sister to [bignumber.js](https://github.com/MikeMcl/bignumber.js/) and [decimal.js](https://github.com/MikeMcl/decimal.js/). See [here](https://github.com/MikeMcl/big.js/wiki) for some notes on the difference between them.\n\n## Install\n\nThe library is the single JavaScript file *big.js* or the ES module *big.mjs*.\n\n### Browsers\n\nAdd Big to global scope:\n\n```html\n<script src='path/to/big.js'></script>\n```\n\nES module:\n\n```html\n<script type='module'>\nimport Big from './path/to/big.mjs';\n```\n\nGet a minified version from a CDN:\n\n```html\n<script src='https://cdn.jsdelivr.net/npm/big.js@6.2.1/big.min.js'></script>\n```\n\n### [Node.js](http://nodejs.org)\n\n```bash\n$ npm install big.js\n```\n\nCommonJS:\n\n```javascript\nconst Big = require('big.js');\n```\n\nES module:\n\n```javascript\nimport Big from 'big.js';\n```\n\n### [Deno](https://deno.land/)\n\n```javascript\nimport Big from 'https://raw.githubusercontent.com/mikemcl/big.js/v6.2.1/big.mjs';\nimport Big from 'https://unpkg.com/big.js@6.2.1/big.mjs';\n```\n\n## Use\n\n*In the code examples below, semicolons and `toString` calls are not shown.*\n\nThe library exports a single constructor function, `Big`.\n\nA Big number is created from a primitive number, string, or other Big number.\n\n```javascript\nx = new Big(123.4567)\ny = Big('123456.7e-3')                 // 'new' is optional\nz = new Big(x)\nx.eq(y) && x.eq(z) && y.eq(z)          // true\n```\n\nIn Big strict mode, creating a Big number from a primitive number is disallowed.\n\n```javascript\nBig.strict = true\nx = new Big(1)                         // TypeError: [big.js] Invalid number\ny = new Big('1.0000000000000001')\ny.toNumber()                           // Error: [big.js] Imprecise conversion\n```\n\nA Big number is immutable in the sense that it is not changed by its methods.\n\n```javascript\n0.3 - 0.1                              // 0.19999999999999998\nx = new Big(0.3)\nx.minus(0.1)                           // \"0.2\"\nx                                      // \"0.3\"\n```\n\nThe methods that return a Big number can be chained.\n\n```javascript\nx.div(y).plus(z).times(9).minus('1.234567801234567e+8').plus(976.54321).div('2598.11772')\nx.sqrt().div(y).pow(3).gt(y.mod(z))    // true\n```\n\nLike JavaScript's Number type, there are `toExponential`, `toFixed` and `toPrecision` methods.\n\n```javascript\nx = new Big(255.5)\nx.toExponential(5)                     // \"2.55500e+2\"\nx.toFixed(5)                           // \"255.50000\"\nx.toPrecision(5)                       // \"255.50\"\n```\n\nThe arithmetic methods always return the exact result except `div`, `sqrt` and `pow`\n(with negative exponent), as these methods involve division.\n\nThe maximum number of decimal places and the rounding mode used to round the results of these methods is determined by the value of the `DP` and `RM` properties of the `Big` number constructor.\n\n```javascript\nBig.DP = 10\nBig.RM = Big.roundHalfUp\n\nx = new Big(2);\ny = new Big(3);\nz = x.div(y)                           // \"0.6666666667\"\nz.sqrt()                               // \"0.8164965809\"\nz.pow(-3)                              // \"3.3749999995\"\nz.times(z)                             // \"0.44444444448888888889\"\nz.times(z).round(10)                   // \"0.4444444445\"\n```\n\nThe value of a Big number is stored in a decimal floating point format in terms of a coefficient, exponent and sign.\n\n```javascript\nx = new Big(-123.456);\nx.c                                    // [1,2,3,4,5,6]    coefficient (i.e. significand)\nx.e                                    // 2                exponent\nx.s                                    // -1               sign\n```\n\nFor advanced usage, multiple Big number constructors can be created, each with an independent configuration.\n\nFor further information see the [API](http://mikemcl.github.io/big.js/) reference documentation.\n\n## Minify\n\nTo minify using, for example, npm and [terser](https://github.com/terser/terser)\n\n```bash\n$ npm install -g terser\n```\n\n```bash\n$ terser big.js -c -m -o big.min.js\n```\n\n## Test\n\nThe *test* directory contains the test scripts for each Big number method.\n\nThe tests can be run with Node.js or a browser.\n\nRun all the tests:\n\n```bash\n$ npm test\n```\n\nTest a single method:\n\n```bash\n$ node test/toFixed\n```\n\nFor the browser, see *runner.html* and *test.html* in the *test/browser* directory.\n\n*big-vs-number.html* is a old application that enables some of the methods of big.js to be compared with those of JavaScript's Number type.\n\n## TypeScript\n\nThe [DefinitelyTyped](https://github.com/borisyankov/DefinitelyTyped) project has a Typescript type definitions file for big.js.\n\n```bash\n$ npm install --save-dev @types/big.js\n```\n\nAny questions about the TypeScript type definitions file should be addressed to the DefinitelyTyped project.\n\n## Licence\n\n[MIT](LICENCE.md)\n\n## Contributors\n\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/bigjs/contributors.svg?width=890&button=false\" /></a>\n\n## Financial supporters\n\nThank you to all who have supported this project via [Open Collective](https://opencollective.com/bigjs), particularly [Coinbase](https://www.coinbase.com/).\n\n<img src=\"https://opencollective.com/bigjs/sponsor/0/avatar.svg\">\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/big.js/-/big.js-6.2.1.tgz#7205ce763efb17c2e41f26f121c420c6a7c2744f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/big.js/-/big.js-6.2.1.tgz",
    "hash": "7205ce763efb17c2e41f26f121c420c6a7c2744f",
    "integrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ==",
    "registry": "npm",
    "packageName": "big.js",
    "cacheIntegrity": "sha512-bCtHMwL9LeDIozFn+oNhhFoq+yQ3BNdnsLSASUxLciOb1vgvpHsIO1dsENiGMgbb4SkP5TrzWzRiLddn8ahVOQ== sha1-cgXOdj77F8LkHybxIcQgxqfCdE8="
  },
  "registry": "npm",
  "hash": "7205ce763efb17c2e41f26f121c420c6a7c2744f"
}