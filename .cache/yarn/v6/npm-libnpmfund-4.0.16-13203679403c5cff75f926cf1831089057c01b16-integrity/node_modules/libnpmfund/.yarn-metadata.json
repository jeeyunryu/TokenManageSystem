{
  "manifest": {
    "name": "libnpmfund",
    "version": "4.0.16",
    "main": "lib/index.js",
    "files": [
      "bin/",
      "lib/"
    ],
    "description": "Programmatic API for npm fund",
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/cli.git",
      "directory": "workspaces/libnpmfund"
    },
    "keywords": [
      "npm",
      "npmcli",
      "libnpm",
      "cli",
      "git",
      "fund",
      "gitfund"
    ],
    "author": {
      "name": "GitHub Inc."
    },
    "contributors": [
      {
        "name": "Ruy Adorno",
        "url": "https://ruyadorno.com"
      }
    ],
    "license": "ISC",
    "scripts": {
      "lint": "eslint \"**/*.js\"",
      "lintfix": "node ../.. run lint -- --fix",
      "posttest": "node ../.. run lint",
      "test": "tap",
      "snap": "tap",
      "postlint": "template-oss-check",
      "template-oss-apply": "template-oss-apply --force"
    },
    "devDependencies": {
      "@npmcli/eslint-config": "^4.0.0",
      "@npmcli/template-oss": "4.12.1",
      "tap": "^16.3.4"
    },
    "dependencies": {
      "@npmcli/arborist": "^6.2.8"
    },
    "engines": {
      "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
    },
    "templateOSS": {
      "//@npmcli/template-oss": "This file is partially managed by @npmcli/template-oss. Edits may be overwritten.",
      "version": "4.12.1",
      "content": "../../scripts/template-oss/index.js"
    },
    "tap": {
      "nyc-arg": [
        "--exclude",
        "tap-snapshots/**"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-libnpmfund-4.0.16-13203679403c5cff75f926cf1831089057c01b16-integrity/node_modules/libnpmfund/package.json",
    "readmeFilename": "README.md",
    "readme": "# libnpmfund\n\n[![npm version](https://img.shields.io/npm/v/libnpmfund.svg)](https://npm.im/libnpmfund)\n[![license](https://img.shields.io/npm/l/libnpmfund.svg)](https://npm.im/libnpmfund)\n[![CI - libnpmfund](https://github.com/npm/cli/actions/workflows/ci-libnpmfund.yml/badge.svg)](https://github.com/npm/cli/actions/workflows/ci-libnpmfund.yml)\n\n[`libnpmfund`](https://github.com/npm/libnpmfund) is a Node.js library for\nretrieving **funding** information for packages installed using\n[`arborist`](https://github.com/npm/arborist).\n\n## Table of Contents\n\n* [Example](#example)\n* [Install](#install)\n* [Contributing](#contributing)\n* [API](#api)\n* [LICENSE](#license)\n\n## Example\n\n```js\nconst { read } = require('libnpmfund')\n\nconst fundingInfo = await read()\nconsole.log(\n  JSON.stringify(fundingInfo, null, 2)\n)\n// => {\n  length: 2,\n  name: 'foo',\n  version: '1.0.0',\n  funding: { url: 'https://example.com' },\n  dependencies: {\n    bar: {\n      version: '1.0.0',\n      funding: { url: 'http://collective.example.com' }\n    }\n  }\n}\n```\n\n## Install\n\n`$ npm install libnpmfund`\n\n### Contributing\n\nThe npm team enthusiastically welcomes contributions and project participation!\nThere's a bunch of things you can do if you want to contribute! The\n[Contributor Guide](https://github.com/npm/cli/blob/latest/CONTRIBUTING.md)\noutlines the process for community interaction and contribution. Please don't\nhesitate to jump in if you'd like to, or even ask us questions if something\nisn't clear.\n\nAll participants and maintainers in this project are expected to follow the\n[npm Code of Conduct](https://www.npmjs.com/policies/conduct), and just\ngenerally be excellent to each other.\n\nPlease refer to the [Changelog](CHANGELOG.md) for project history details, too.\n\nHappy hacking!\n\n### API\n\n##### <a name=\"fund.read\"></a> `> fund.read([opts]) -> Promise<Object>`\n\nReads **funding** info from a npm install and returns a promise for a\ntree object that only contains packages in which funding info is defined.\n\nOptions:\n\n- `countOnly`: Uses the tree-traversal logic from **npm fund** but skips over\nany obj definition and just returns an obj containing `{ length }` - useful for\nthings such as printing a `6 packages are looking for funding` msg.\n- `workspaces`: `Array<String>` List of workspaces names to filter for,\nthe result will only include a subset of the resulting tree that includes\nonly the nodes that are children of the listed workspaces names.\n- `path`, `registry` and more [Arborist](https://github.com/npm/arborist/) options.\n\n##### <a name=\"fund.readTree\"></a> `> fund.readTree(tree, [opts]) -> Promise<Object>`\n\nReads **funding** info from a given install tree and returns a tree object\nthat only contains packages in which funding info is defined.\n\n- `tree`: An [`arborist`](https://github.com/npm/arborist) tree to be used, e.g:\n\n```js\nconst Arborist = require('@npmcli/arborist')\nconst { readTree } = require('libnpmfund')\n\nconst arb = new Arborist({ path: process.cwd() })\nconst tree = await arb.loadActual()\n\nreturn readTree(tree, { countOnly: false })\n```\n\nOptions:\n\n- `countOnly`: Uses the tree-traversal logic from **npm fund** but skips over\nany obj definition and just returns an obj containing `{ length }` - useful for\nthings such as printing a `6 packages are looking for funding` msg.\n\n##### <a name=\"fund.normalizeFunding\"></a> `> fund.normalizeFunding(funding) -> Object`\n\nFrom a `funding` `<object|string|array>`, retrieves normalized funding objects\ncontaining a `url` property.\n\ne.g:\n\n```js\nnormalizeFunding('http://example.com')\n// => {\n  url: 'http://example.com'\n}\n```\n\n##### <a name=\"fund.isValidFunding\"></a> `> fund.isValidFunding(funding) -> Boolean`\n\nReturns `<true>` if `funding` is a valid funding object, e.g:\n\n```js\nisValidFunding({ foo: 'not a valid funding obj' })\n// => false\n\nisValidFunding('http://example.com')\n// => true\n```\n\n## LICENSE\n\n[ISC](./LICENSE)\n",
    "licenseText": "The ISC License\n\nCopyright (c) npm Inc.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/libnpmfund/-/libnpmfund-4.0.16.tgz#13203679403c5cff75f926cf1831089057c01b16",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/libnpmfund/-/libnpmfund-4.0.16.tgz",
    "hash": "13203679403c5cff75f926cf1831089057c01b16",
    "integrity": "sha512-IYRsfuK1WRgpdvmaXyKzpBQZGIxkvclKiYC4RYE56BiZWf3gwwcSdZU4a+ZuanF3Ovy6aOfNGa9jxLfYc8fMpg==",
    "registry": "npm",
    "packageName": "libnpmfund",
    "cacheIntegrity": "sha512-IYRsfuK1WRgpdvmaXyKzpBQZGIxkvclKiYC4RYE56BiZWf3gwwcSdZU4a+ZuanF3Ovy6aOfNGa9jxLfYc8fMpg== sha1-EyA2eUA8XP91+SbPGDEIkFfAGxY="
  },
  "registry": "npm",
  "hash": "13203679403c5cff75f926cf1831089057c01b16"
}