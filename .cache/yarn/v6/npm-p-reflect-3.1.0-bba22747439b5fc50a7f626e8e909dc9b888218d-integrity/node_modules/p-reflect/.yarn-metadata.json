{
  "manifest": {
    "name": "p-reflect",
    "version": "3.1.0",
    "description": "Make a promise always fulfill with its actual fulfillment value or rejection reason",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/p-reflect.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "type": "module",
    "exports": "./index.js",
    "engines": {
      "node": ">=12"
    },
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "promise",
      "reflect",
      "inspect",
      "debug",
      "fulfill",
      "reject",
      "fulfilled",
      "rejected",
      "error",
      "async",
      "await",
      "promises",
      "bluebird"
    ],
    "devDependencies": {
      "ava": "^3.15.0",
      "tsd": "^0.14.0",
      "xo": "^0.38.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-p-reflect-3.1.0-bba22747439b5fc50a7f626e8e909dc9b888218d-integrity/node_modules/p-reflect/package.json",
    "readmeFilename": "readme.md",
    "readme": "# p-reflect\n\n> Make a promise always fulfill with its actual fulfillment value or rejection reason\n\nUseful when you want a promise to fulfill no matter what and would rather handle the actual state afterwards.\n\n## Install\n\n```\n$ npm install p-reflect\n```\n\n## Usage\n\nHere, `Promise.all` would normally fail early because one of the promises rejects, but by using `p-reflect`, we can ignore the rejection and handle it later on.\n\n```js\nimport pReflect from 'p-reflect';\n\nconst promises = [\n\tgetPromise(),\n\tgetPromiseThatRejects(),\n\tgetPromise()\n];\n\nconst results = await Promise.all(promises.map(pReflect));\n\nconsole.log(results);\n/*\n[\n\t{\n\t\tstatus: 'fulfilled',\n\t\tvalue: 'ü¶Ñ'\n\t\tisFulfilled: true,\n\t\tisRejected: false\n\t},\n\t{\n\t\tstatus: 'rejected',\n\t\treason: [Error: üëπ]\n\t\tisFulfilled: false,\n\t\tisRejected: true\n\t},\n\t{\n\t\tstatus: 'fulfilled',\n\t\tvalue: 'üê¥'\n\t\tisFulfilled: true,\n\t\tisRejected: false\n\t}\n]\n*/\n\nconst resolvedString = results\n\t.filter(result => result.isFulfilled)\n\t.map(result => result.value)\n\t.join('');\n\nconsole.log(resolvedString);\n//=> 'ü¶Ñüê¥'\n```\n\nThe above is just an example. Use [`p-settle`](https://github.com/sindresorhus/p-settle) if you need exactly that.\n\n## API\n\n### pReflect(promise)\n\nReturns a `Promise<Object>`.\n\nThe object has the following properties:\n\n- `status` *(`'fulfilled'` or `'rejected'`, depending on how the promise resolved)*\n- `value` or `reason` *(Depending on whether the promise fulfilled or rejected)*\n- `isFulfilled`\n- `isRejected`\n\n#### promise\n\nType: `Promise`\n\nA promise to reflect upon.\n\n### isFulfilled(object)\n\nThis is a type guard for TypeScript users.\n\nReturns `true` if the object has the property `value`, `false` otherwise.\n\nThis is useful since `await pReflect(promise)` always returns a `PromiseResult`. This function can be used to determine whether `PromiseResult` is `PromiseFulfilledResult` or `PromiseRejectedResult`.\n\nThis is a workaround for [microsoft/TypeScript#32399](https://github.com/microsoft/TypeScript/issues/32399)\n- reference documentation [Using type predicates](https://www.typescriptlang.org/docs/handbook/2/narrowing.html)\n\n### isRejected(object)\n\nThis is a type guard for TypeScript users.\n\nReturns `true` if the object has the property `reason`, `false` otherwise.\n\nThis is useful since `await pReflect(promise)` always returns a `PromiseResult`. This function can be used to determine whether `PromiseResult` is `PromiseRejectedResult` or `PromiseFulfilledResult`.\n\n## Related\n\n- [p-settle](https://github.com/sindresorhus/p-settle) - Settle promises concurrently and get their fulfillment value or rejection reason\n- [More‚Ä¶](https://github.com/sindresorhus/promise-fun)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/p-reflect/-/p-reflect-3.1.0.tgz#bba22747439b5fc50a7f626e8e909dc9b888218d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/p-reflect/-/p-reflect-3.1.0.tgz",
    "hash": "bba22747439b5fc50a7f626e8e909dc9b888218d",
    "integrity": "sha512-3sG3UlpisPSaX+o7u2q01hIQmrpkvdl5GSO1ZwL7pfc5kHB2bPF0eFNCfYTrW1/LTUdgmPwBAvmT0Zr8eSmaAQ==",
    "registry": "npm",
    "packageName": "p-reflect",
    "cacheIntegrity": "sha512-3sG3UlpisPSaX+o7u2q01hIQmrpkvdl5GSO1ZwL7pfc5kHB2bPF0eFNCfYTrW1/LTUdgmPwBAvmT0Zr8eSmaAQ== sha1-u6InR0ObX8UKf2JujpCdybiIIY0="
  },
  "registry": "npm",
  "hash": "bba22747439b5fc50a7f626e8e909dc9b888218d"
}