{
  "manifest": {
    "name": "@truffle/abi-utils",
    "version": "0.3.9",
    "description": "Utilities for working with ABIs",
    "license": "MIT",
    "author": {
      "name": "g. nicholas d'andrea",
      "email": "gnidan@trufflesuite.com"
    },
    "homepage": "https://github.com/trufflesuite/truffle/tree/master/packages/abi-utils#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/trufflesuite/truffle.git",
      "directory": "packages/abi-utils"
    },
    "bugs": {
      "url": "https://github.com/trufflesuite/truffle/issues"
    },
    "main": "dist/lib/index.js",
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "tsc",
      "prepare": "yarn build",
      "test": "jest lib/**"
    },
    "types": "dist/lib/index.d.ts",
    "dependencies": {
      "change-case": "3.0.2",
      "fast-check": "3.1.1",
      "web3-utils": "1.8.2"
    },
    "devDependencies": {
      "@fast-check/jest": "^1.0.1",
      "@truffle/contract-schema": "^3.4.13",
      "@types/jest": "27.4.1",
      "@types/jest-json-schema": "^2.1.2",
      "@types/node": "~12.12.0",
      "jest": "29.1.2",
      "jest-extended": "^0.11.5",
      "jest-json-schema": "^2.1.0",
      "ts-jest": "29.0.3",
      "ts-node": "10.7.0",
      "typescript": "^4.7.4"
    },
    "keywords": [
      "abi",
      "ethereum",
      "solidity"
    ],
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "bca5b9cc5d06b94fa131d189f39bb117682c7941",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@truffle-abi-utils-0.3.9-c476f5cfe01072b513b3e93fd7bea05cf7bd9d96-integrity/node_modules/@truffle/abi-utils/package.json",
    "readmeFilename": "README.md",
    "readme": "# `@truffle/abi-utils`\n\nContains a few utilities for dealing with ABIs.\n\n## Contents\n\nThis package contains a few different components:\n\n- [Normalize ABIs](#normalize-abis)\n- [TypeScript types](#typescript-types)\n- [Selector and signature computation](#selector-and-signature-computation)\n- [Arbitrary random ABIs](#arbitrary-random-abis)\n\n## Normalize ABIs\n\n> ```typescript\n> // handle function entries omitting \"type\" from JSON\n> const isFunctionEntry = entry.type === \"function\" || !(\"type\" in entry);\n>\n> // handle:        v--- new way                           v--- old way     v--- default\n> const isPayable =\n>   entry.stateMutability === \"payable\" || entry.payable || false;\n>\n> // handle \"outputs\" possibly being undefined\n> const outputs = entry.outputs || [];\n> ```\n>\n> _^ Have you ever had to do this sort of thing?_ :scream:\n\nSolidity's official [JSON ABI specification](https://solidity.readthedocs.io/en/v0.7.3/abi-spec.html)\nis rather permissive, since it remains backwards compatible with older\nversions of the language and because it permits omitting fields with default\nvalues. This can get annoying if you're programmatically processing ABIs.\n\n:information_source: This package provides a `normalize` function to purge\nthese kinds of inconsistencies.\n\n```javascript\nconst { normalize } = require(\"@truffle/abi-utils\");\n```\n\n```typescript\nimport { normalize } from \"@truffle/abi-utils\";\n```\n\nSpecifically, this normalizes by:\n\n- Ensuring every ABI entry has a `type` field, since it's optional for\n  `type: \"function\"`\n- Populating default value `[]` for function `outputs` field\n- Removing all instances of the legacy `payable` and `constant` fields\n- Replacing those two fields with the newer `stateMutability` field\n\nTo use, provide the ABI as a JavaScript array, as the sole argument to the\nfunction:\n\n```typescript\n// accepts ABIs from Solidity versions back to 0.4.12 or earlier!\nconst abi = normalize([{\"type\": \"constructor\"/*, ...*/}/*, ...*/);\n\n// don't even worry about it\nconst isFunctionEntry = entry.type === \"function\";\nconst isPayable = entry.stateMutability === \"payable\";\n```\n\n## TypeScript types\n\nThis package exports the following types for **normalized** ABIs.\n\n- `Abi`, to represent the full ABI array\n- `Entry`, to represent items in ABI arrays\n- `FunctionEntry`, to represent named functions\n- `ConstructorEntry`, to represent constructors\n- `FallbackEntry`, to represent old or new fallback functions\n- `ReceiveEntry`, to represent receive functions\n- `Parameter`, to represent parameters defined in entry inputs or outputs\n- `EventParameter`, to represent event parameters\n\nTo use these, you should first call [`normalize`](#normalize-abis), described\nabove.\n\n```typescript\nimport * as Abi from \"@truffle/abi-utils\";\n\nconst abi: Abi.Abi = [{ type: \"constructor\" /*, ...*/ } /*, ...*/];\nconst parameter: Abi.Parameter = {\n  type: \"tuple[]\",\n  components: [\n    /*...*/\n  ]\n};\n// etc.\n```\n\n## Selector and signature computation\n\nThis package exports the following functions for computing signatures and selectors:\n\n- `abiSelector`: This function takes a `FunctionEntry`, `EventEntry`, or\n  `ErrorEntry` and computes its selector, returned as a hex string. This will\n  be 4 bytes for a function or error, and 32 bytes for an event.\n- `abiSignature`: This function takes a `FunctionEntry`, `EventEntry`, or\n  `ErrorEntry` and computes its written-out signature (e.g., `\"setStoredValue(uint256)\"`).\n- `abiTupleSignature`: This function takes a `Parameter[]` and computes the signature\n  of that tuple on its own; e.g., `\"(uint256,string)\"` for a `uint` and a `string`.\n- `abiTypeSignature`: This function takes an individual `Parameter` and computes\n  the signature of that type on its own; e.g., `uint256` for a `uint`.\n\nIn addition, the package also exports the constant `ShortSelectorSize`, which\nis equal to 4 (the number of bytes in a function or event selector).\n\n## Arbitrary random ABIs\n\n_Do you need to test all the different kinds of ABIs, including testing your\nsupport for the various quirks across different Solidity versions?_ :flushed:\n\nYou can use this package for generating all sorts of random ABIs, random ABI\nevents, random ABI parameter values, etc.\n\nThis package provides [fast-check](https://github.com/dubzzz/fast-check)\narbitraries for property-based testing methodologies. If you're not familiar\nwith fast-check or property-based testing, please see the link above for more\ninformation.\n\n```typescript\nimport * as fc from \"fast-check\";\nimport { Arbitrary } from \"@truffle/abi-utils\";\n\n// generate 10 random ABIs\nconst randomAbis = fc.sample(Arbitrary.Abi(), 10);\n```\n\nSee this package's [internal tests for `normalize`](./lib/normalize.test.ts)\nfor example usage in automated tests.\n",
    "licenseText": "Copyright (c) 2015-2023 ConsenSys Software Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@truffle/abi-utils/-/abi-utils-0.3.9.tgz#c476f5cfe01072b513b3e93fd7bea05cf7bd9d96",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@truffle/abi-utils/-/abi-utils-0.3.9.tgz",
    "hash": "c476f5cfe01072b513b3e93fd7bea05cf7bd9d96",
    "integrity": "sha512-G5dqgwRHx5zwlXjz3QT8OJVfB2cOqWwD6DwKso0KttUt/zejhCjnkKq72rSgyeLMkz7wBB9ERLOsupLBILM8MA==",
    "registry": "npm",
    "packageName": "@truffle/abi-utils",
    "cacheIntegrity": "sha512-G5dqgwRHx5zwlXjz3QT8OJVfB2cOqWwD6DwKso0KttUt/zejhCjnkKq72rSgyeLMkz7wBB9ERLOsupLBILM8MA== sha1-xHb1z+AQcrUTs+k/176gXPe9nZY="
  },
  "registry": "npm",
  "hash": "c476f5cfe01072b513b3e93fd7bea05cf7bd9d96"
}