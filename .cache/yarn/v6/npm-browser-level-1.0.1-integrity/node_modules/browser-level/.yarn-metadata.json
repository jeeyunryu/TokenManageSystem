{
  "manifest": {
    "name": "browser-level",
    "version": "1.0.1",
    "description": "An abstract-level database for browsers, backed by IndexedDB",
    "author": {
      "name": "max ogden"
    },
    "license": "MIT",
    "main": "index.js",
    "types": "./index.d.ts",
    "scripts": {
      "test": "standard && ts-standard *.ts && hallmark && airtap -p local --coverage test/index.js && nyc report",
      "test-browsers": "standard && airtap --coverage test/index.js",
      "coverage": "nyc report -r lcovonly",
      "dependency-check": "dependency-check --no-dev .",
      "prepublishOnly": "npm run dependency-check"
    },
    "files": [
      "index.js",
      "index.d.ts",
      "iterator.js",
      "util",
      "CHANGELOG.md",
      "UPGRADING.md",
      "sauce-labs.svg"
    ],
    "dependencies": {
      "abstract-level": "^1.0.2",
      "catering": "^2.1.1",
      "module-error": "^1.0.2",
      "run-parallel-limit": "^1.1.0"
    },
    "devDependencies": {
      "@voxpelli/tsconfig": "^3.1.0",
      "airtap": "^4.0.4",
      "airtap-playwright": "^1.0.1",
      "airtap-sauce": "^1.1.0",
      "dependency-check": "^4.1.0",
      "hallmark": "^4.1.0",
      "nyc": "^15.0.0",
      "standard": "^16.0.4",
      "tape": "^5.5.2",
      "ts-standard": "^11.0.0",
      "typescript": "^4.5.5",
      "uuid": "^3.3.2"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Level/browser-level.git"
    },
    "homepage": "https://github.com/Level/browser-level",
    "keywords": [
      "level",
      "leveldb",
      "indexeddb",
      "abstract-level"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-browser-level-1.0.1-integrity/node_modules/browser-level/package.json",
    "readmeFilename": "README.md",
    "readme": "# browser-level\n\n**An [`abstract-level`][abstract-level] database for browsers, backed by [IndexedDB][indexeddb].** The successor to [`level-js`](https://github.com/Level/level-js). If you are upgrading, please see [UPGRADING.md](UPGRADING.md).\n\n> :pushpin: Which module should I use? What is `abstract-level`? Head over to the [FAQ](https://github.com/Level/community#faq).\n\n[![level badge][level-badge]][awesome]\n[![npm](https://img.shields.io/npm/v/browser-level.svg)](https://www.npmjs.com/package/browser-level)\n[![Test](https://img.shields.io/github/workflow/status/Level/browser-level/Test?label=test)](https://github.com/Level/browser-level/actions/workflows/test.yml)\n[![Coverage](https://img.shields.io/codecov/c/github/Level/browser-level?label=\\&logo=codecov\\&logoColor=fff)](https://codecov.io/gh/Level/browser-level)\n[![Standard](https://img.shields.io/badge/standard-informational?logo=javascript\\&logoColor=fff)](https://standardjs.com)\n[![Common Changelog](https://common-changelog.org/badge.svg)](https://common-changelog.org)\n[![Donate](https://img.shields.io/badge/donate-orange?logo=open-collective\\&logoColor=fff)](https://opencollective.com/level)\n\n## Table of Contents\n\n<details><summary>Click to expand</summary>\n\n- [Usage](#usage)\n- [API](#api)\n  - [`db = new BrowserLevel(location[, options])`](#db--new-browserlevellocation-options)\n  - [`BrowserLevel.destroy(location[, prefix][, callback])`](#browserleveldestroylocation-prefix-callback)\n- [Install](#install)\n- [Contributing](#contributing)\n- [Donate](#donate)\n- [License](#license)\n\n</details>\n\n## Usage\n\n```js\nconst { BrowserLevel } = require('browser-level')\n\n// Create a database called 'example'\nconst db = new BrowserLevel('example', { valueEncoding: 'json' })\n\n// Add an entry with key 'a' and value 1\nawait db.put('a', 1)\n\n// Add multiple entries\nawait db.batch([{ type: 'put', key: 'b', value: 2 }])\n\n// Get value of key 'a': 1\nconst value = await db.get('a')\n\n// Iterate entries with keys that are greater than 'a'\nfor await (const [key, value] of db.iterator({ gt: 'a' })) {\n  console.log(value) // 2\n}\n```\n\n<!-- ## Browser Support -->\n\n<!-- [![Sauce Test Status](https://app.saucelabs.com/browser-matrix/level-js.svg)](https://app.saucelabs.com/u/level-js) -->\n\n## API\n\nThe API of `browser-level` follows that of [`abstract-level`](https://github.com/Level/abstract-level) with just two additional constructor options (see below) and one additional method (see below). As such, the majority of the API is documented in `abstract-level`. The `createIfMissing` and `errorIfExists` options of `abstract-level` are not supported here.\n\nLike other implementations of `abstract-level`, `browser-level` has first-class support of binary keys and values, using either [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) or [Buffer](https://nodejs.org/api/buffer.html). In order to sort string and binary keys the same way as other databases, `browser-level` internally converts data to a Uint8Array before passing them to IndexedDB. If you have no need to work with `Buffer` keys or values, you can choose to omit the [`buffer`](https://github.com/feross/buffer) shim from a JavaScript bundle (through configuration of Webpack, Browserify or other bundlers).\n\nDue to limitations of IndexedDB, `browser-level` does not offer snapshot guarantees. Such a guarantee would mean that an iterator does not see the data of simultaneous writes - it would be reading from a snapshot in time. In contrast, a `browser-level` iterator reads a few entries ahead and then opens a new IndexedDB transaction on the next read. A \"few\" means all entries for `iterator.all()`, `size` amount of entries for `iterator.nextv(size)` and a hardcoded 100 entries for `iterator.next()`. Individual calls to those methods have snapshot guarantees but repeated calls do not.\n\nThe result is that an iterator will include the data of simultaneous writes, if `db.put()`, `db.del()` or `db.batch()` are called in between creating the iterator and consuming the iterator, or in between calls to `iterator.next()` or `iterator.nextv()`. For example:\n\n```js\nconst iterator = db.iterator()\nawait db.put('abc', '123')\n\nfor await (const [key, value] of iterator) {\n  // This might be 'abc'\n  console.log(key)\n}\n```\n\nIf snapshot guarantees are a must for your application then use `iterator.all()` and call it immediately after creating the iterator:\n\n```js\nconst entries = await db.iterator({ limit: 50 }).all()\n\n// Synchronously iterate the result\nfor (const [key, value] of entries) {\n  console.log(key)\n}\n```\n\n### `db = new BrowserLevel(location[, options])`\n\nCreate a new database or open an existing one. The required `location` argument is the string name of the [`IDBDatabase`](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) to be opened, as well as the name of the object store within that database. The name of the `IDBDatabase` will be prefixed with `options.prefix`.\n\nBesides `abstract-level` options, the optional `options` argument may contain:\n\n- `prefix` (string, default: `'level-js-'`): Prefix for the `IDBDatabase` name. Can be set to an empty string. The default is compatible with `level-js`.\n- `version` (string or number, default: `1`): The version to open the `IDBDatabase` with.\n\nSee [`IDBFactory#open()`](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open) for more details about database name and version.\n\n### `BrowserLevel.destroy(location[, prefix][, callback])`\n\nDelete the IndexedDB database at the given `location`. If `prefix` is not given, it defaults to the same value as the `BrowserLevel` constructor does. The `callback` function will be called when the destroy operation is complete, with a possible error argument. If no callback is provided, a promise is returned. This method is an additional method that is not part of the [`abstract-level`](https://github.com/Level/abstract-level) interface.\n\nBefore calling `destroy()`, close a database if it's using the same `location` and `prefix`:\n\n```js\nconst db = new BrowserLevel('example')\nawait db.close()\nawait BrowserLevel.destroy('example')\n```\n\n## Install\n\nWith [npm](https://npmjs.org) do:\n\n```bash\nnpm install browser-level\n```\n\nThis module is best used with [`browserify`](http://browserify.org) or similar bundlers.\n\n<!-- ## Big Thanks\n\nCross-browser Testing Platform and Open Source â™¥ Provided by [Sauce Labs](https://saucelabs.com).\n\n[![Sauce Labs logo](./sauce-labs.svg)](https://saucelabs.com) -->\n\n## Contributing\n\n[`Level/browser-level`](https://github.com/Level/browser-level) is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [Contribution Guide](https://github.com/Level/community/blob/master/CONTRIBUTING.md) for more details.\n\n## Donate\n\nSupport us with a monthly donation on [Open Collective](https://opencollective.com/level) and help us continue our work.\n\n## License\n\n[MIT](LICENSE)\n\n[level-badge]: https://leveljs.org/img/badge.svg\n\n[indexeddb]: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n\n[awesome]: https://github.com/Level/awesome\n\n[abstract-level]: https://github.com/Level/abstract-level\n",
    "licenseText": "MIT License\n\nCopyright (c) 2012 Max Ogden and the contributors to browser-level.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/browser-level/-/browser-level-1.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/browser-level/-/browser-level-1.0.1.tgz",
    "hash": "",
    "integrity": "sha512-XECYKJ+Dbzw0lbydyQuJzwNXtOpbMSq737qxJN11sIRTErOMShvDpbzTlgju7orJKvx4epULolZAuJGLzCmWRQ==",
    "registry": "npm",
    "packageName": "browser-level",
    "cacheIntegrity": "sha512-XECYKJ+Dbzw0lbydyQuJzwNXtOpbMSq737qxJN11sIRTErOMShvDpbzTlgju7orJKvx4epULolZAuJGLzCmWRQ== sha1-NujDGD0P4cQFI5eS+qq18xWHEBE="
  },
  "registry": "npm",
  "hash": "5c4098289f836f3c3495bc9dc90b89cf0357b4ea5b312abbdfbab124dd75b0845312b38c4a1bc3a5bcd39608eeee8ac92afc787a950ba25640b8918bcc299645"
}