{
  "manifest": {
    "name": "it-tar",
    "version": "6.0.1",
    "description": "it-tar is a streaming tar parser (and maybe a generator in the future) and nothing else. It operates purely using async iterables which means you can easily extract/parse tarballs without ever hitting the file system.",
    "author": {
      "name": "Alan Shaw"
    },
    "license": "Apache-2.0 OR MIT",
    "homepage": "https://github.com/alanshaw/it-tar#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alanshaw/it-tar.git"
    },
    "bugs": {
      "url": "https://github.com/alanshaw/it-tar/issues"
    },
    "keywords": [
      "extract",
      "generate",
      "generator",
      "modify",
      "pack",
      "parse",
      "parser",
      "stream",
      "stream2",
      "streaming",
      "streams",
      "streams2",
      "tar",
      "tarball"
    ],
    "engines": {
      "node": ">=16.0.0",
      "npm": ">=7.0.0"
    },
    "type": "module",
    "types": "./dist/src/index.d.ts",
    "files": [
      "src",
      "dist/src",
      "!dist/test",
      "!**/*.tsbuildinfo"
    ],
    "exports": {
      ".": {
        "types": "./dist/src/index.d.ts",
        "import": "./dist/src/index.js"
      }
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      }
    },
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        [
          "@semantic-release/commit-analyzer",
          {
            "preset": "conventionalcommits",
            "releaseRules": [
              {
                "breaking": true,
                "release": "major"
              },
              {
                "revert": true,
                "release": "patch"
              },
              {
                "type": "feat",
                "release": "minor"
              },
              {
                "type": "fix",
                "release": "patch"
              },
              {
                "type": "docs",
                "release": "patch"
              },
              {
                "type": "test",
                "release": "patch"
              },
              {
                "type": "deps",
                "release": "patch"
              },
              {
                "scope": "no-release",
                "release": false
              }
            ]
          }
        ],
        [
          "@semantic-release/release-notes-generator",
          {
            "preset": "conventionalcommits",
            "presetConfig": {
              "types": [
                {
                  "type": "feat",
                  "section": "Features"
                },
                {
                  "type": "fix",
                  "section": "Bug Fixes"
                },
                {
                  "type": "chore",
                  "section": "Trivial Changes"
                },
                {
                  "type": "docs",
                  "section": "Documentation"
                },
                {
                  "type": "deps",
                  "section": "Dependencies"
                },
                {
                  "type": "test",
                  "section": "Tests"
                }
              ]
            }
          }
        ],
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "clean": "aegir clean",
      "lint": "aegir lint",
      "dep-check": "aegir dep-check",
      "build": "aegir build",
      "postbuild": "cp ./test/fixtures/*.tar ./test/fixtures/*.tar.gz ./test/fixtures/*.tgz ./dist/test/fixtures",
      "test": "aegir test -t node",
      "test:node": "npm run test -- -t node --cov",
      "test:electron-main": "npm run test -- -t electron-main",
      "release": "aegir release"
    },
    "dependencies": {
      "iso-constants": "^0.1.2",
      "it-reader": "^6.0.1",
      "it-stream-types": "^1.0.4",
      "it-to-buffer": "^3.0.0",
      "p-defer": "^4.0.0",
      "uint8arraylist": "^2.3.2",
      "uint8arrays": "^4.0.2"
    },
    "devDependencies": {
      "aegir": "^37.5.1",
      "concat-stream": "^2.0.0",
      "it-pipe": "^2.0.3",
      "stream-to-it": "^0.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-it-tar-6.0.1-6164227c4f20cb870efb89e2a6693ffde77f69b1-integrity/node_modules/it-tar/package.json",
    "readmeFilename": "README.md",
    "readme": "# it-tar <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/alanshaw/it-tar.svg?style=flat-square)](https://codecov.io/gh/alanshaw/it-tar)\n[![CI](https://img.shields.io/github/workflow/status/alanshaw/it-tar/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/alanshaw/it-tar/actions/workflows/js-test-and-release.yml)\n\n> it-tar is a streaming tar parser (and maybe a generator in the future) and nothing else. It operates purely using async iterables which means you can easily extract/parse tarballs without ever hitting the file system.\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Packing](#packing)\n  - [Extracting](#extracting)\n    - [Headers](#headers)\n- [Modifying existing tarballs](#modifying-existing-tarballs)\n- [Related](#related)\n- [Contribute](#contribute)\n- [License](#license)\n- [Contribution](#contribution)\n\n## Install\n\n```console\n$ npm i it-tar\n```\n\n## Usage\n\n`it-tar` [packs](#packing) and [extracts](#extracts) tarballs.\n\nIt implementes USTAR with additional support for pax extended headers. It should be compatible with all popular tar distributions out there (gnutar, bsdtar etc)\n\n### Packing\n\nTo create a pack stream use `tar.pack()` and pipe entries to it.\n\n```js\nconst Tar = require('it-tar')\nimport { pipe } from 'it-pipe'\nconst toIterable = require('stream-to-it')\n\nawait pipe(\n  [\n    // add a file called my-test.txt with the content \"Hello World!\"\n    {\n      header: { name: 'my-test.txt' },\n      body: 'Hello World!'\n    },\n    // add a file called my-stream-test.txt from a stream\n    {\n      header: { name: 'my-stream-test.txt', size: 11 },\n      body: fs.createReadStream('./my-stream-test.txt')\n    }\n  ]\n  Tar.pack(),\n  // pipe the pack stream somewhere\n  toIterable.sink(process.stdout)\n)\n```\n\n### Extracting\n\nTo extract a stream use `tar.extract()` and pipe a [source iterable](https://gist.github.com/alanshaw/591dc7dd54e4f99338a347ef568d6ee9#source-it) to it.\n\n```js\nconst Tar = require('it-tar')\nimport { pipe } from 'it-pipe'\n\nawait pipe(\n  source, // An async iterable (for example a Node.js readable stream)\n  Tar.extract(),\n  source => {\n    for await (const entry of source) {\n      // entry.header is the tar header (see below)\n      // entry.body is the content body (might be an empty async iterable)\n      for await (const data of entry.body) {\n        // do something with the data\n      }\n    }\n    // all entries read\n  }\n)\n```\n\nThe tar archive is streamed sequentially, meaning you **must** drain each entry's body as you get them or else the main extract stream will receive backpressure and stop reading.\n\nNote that the body stream yields [`BufferList`](https://npm.im/bl) objects **not** `Buffer`s.\n\n#### Headers\n\nThe header object using in `entry` should contain the following properties.\nMost of these values can be found by stat'ing a file.\n\n```js\n{\n  name: 'path/to/this/entry.txt',\n  size: 1314,        // entry size. defaults to 0\n  mode: 0644,        // entry mode. defaults to to 0755 for dirs and 0644 otherwise\n  mtime: new Date(), // last modified date for entry. defaults to now.\n  type: 'file',      // type of entry. defaults to file. can be:\n                     // file | link | symlink | directory | block-device\n                     // character-device | fifo | contiguous-file\n  linkname: 'path',  // linked file name\n  uid: 0,            // uid of entry owner. defaults to 0\n  gid: 0,            // gid of entry owner. defaults to 0\n  uname: 'maf',      // uname of entry owner. defaults to null\n  gname: 'staff',    // gname of entry owner. defaults to null\n  devmajor: 0,       // device major version. defaults to 0\n  devminor: 0        // device minor version. defaults to 0\n}\n```\n\n## Modifying existing tarballs\n\nUsing tar-stream it is easy to rewrite paths / change modes etc in an existing tarball.\n\n```js\nconst Tar = require('it-tar')\nimport { pipe } from 'it-pipe'\nconst toIterable = require('stream-to-it')\n\nawait pipe(\n  fs.createReadStream('./old-tarball.tar'),\n  Tar.extract(),\n  async function * (source) {\n    for await (const entry of source) {\n      // let's prefix all names with 'tmp'\n      entry.header.name = path.join('tmp', entry.header.name)\n      // write the new entry to the pack stream\n      yield entry\n    }\n  },\n  Tar.pack(),\n  toIterable.sink(fs.createWriteStream('./new-tarball.tar'))\n)\n```\n\n## Related\n\n- [`it-pipe`](https://www.npmjs.com/package/it-pipe) Utility to \"pipe\" async iterables together\n- [`it-reader`](https://www.npmjs.com/package/it-reader) Read an exact number of bytes from a binary (async) iterable\n- [`stream-to-it`](https://www.npmjs.com/package/stream-to-it) Convert Node.js streams to streaming iterables\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/alanshaw/it-tar/issues/new) or submit PRs.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n",
    "licenseText": "This project is dual licensed under MIT and Apache-2.0.\n\nMIT: https://www.opensource.org/licenses/mit\nApache-2.0: https://www.apache.org/licenses/license-2.0\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/it-tar/-/it-tar-6.0.1.tgz#6164227c4f20cb870efb89e2a6693ffde77f69b1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/it-tar/-/it-tar-6.0.1.tgz",
    "hash": "6164227c4f20cb870efb89e2a6693ffde77f69b1",
    "integrity": "sha512-KMKNqYQr/m3mJE0ERg6F2Snlk1d68tEMeOP0bPf5vboka1y0L7CZD2nlf57H+C9R31TA0SbtiOqkblRxEIONfg==",
    "registry": "npm",
    "packageName": "it-tar",
    "cacheIntegrity": "sha512-KMKNqYQr/m3mJE0ERg6F2Snlk1d68tEMeOP0bPf5vboka1y0L7CZD2nlf57H+C9R31TA0SbtiOqkblRxEIONfg== sha1-YWQifE8gy4cO+4nipmk//ed/abE="
  },
  "registry": "npm",
  "hash": "6164227c4f20cb870efb89e2a6693ffde77f69b1"
}