{
  "manifest": {
    "name": "pino-pretty",
    "version": "4.8.0",
    "description": "Prettifier for Pino log lines",
    "main": "index.js",
    "bin": {
      "pino-pretty": "bin.js"
    },
    "scripts": {
      "ci": "standard && tap 'test/**/*.test.js' --coverage-report=lcovonly",
      "lint": "standard | snazzy",
      "test": "tap --100 'test/**/*.test.js'"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/pinojs/pino-pretty.git"
    },
    "keywords": [
      "pino"
    ],
    "author": {
      "name": "James Sumners",
      "email": "james.sumners@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pinojs/pino-pretty/issues"
    },
    "homepage": "https://github.com/pinojs/pino-pretty#readme",
    "precommit": [
      "lint",
      "test"
    ],
    "dependencies": {
      "@hapi/bourne": "^2.0.0",
      "args": "^5.0.1",
      "chalk": "^4.0.0",
      "dateformat": "^4.5.1",
      "fast-safe-stringify": "^2.0.7",
      "jmespath": "^0.15.0",
      "joycon": "^2.2.5",
      "pump": "^3.0.0",
      "readable-stream": "^3.6.0",
      "rfdc": "^1.3.0",
      "split2": "^3.1.1",
      "strip-json-comments": "^3.1.1"
    },
    "devDependencies": {
      "pino": "^6.0.0",
      "pre-commit": "^1.2.2",
      "rimraf": "^3.0.2",
      "snazzy": "^9.0.0",
      "standard": "^16.0.3",
      "tap": "^14.10.7"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-pino-pretty-4.8.0-integrity/node_modules/pino-pretty/package.json",
    "readmeFilename": "Readme.md",
    "readme": "<a id=\"intro\"></a>\n# pino-pretty\n\n[![NPM Package Version](https://img.shields.io/npm/v/pino-pretty)](https://www.npmjs.com/package/pino-pretty)\n[![Build Status](https://img.shields.io/github/workflow/status/pinojs/pino-pretty/CI)](https://github.com/pinojs/pino-pretty/actions?query=workflow%3ACI)\n[![Known Vulnerabilities](https://snyk.io/test/github/pinojs/pino-pretty/badge.svg)](https://snyk.io/test/github/pinojs/pino-pretty)\n[![Coverage Status](https://img.shields.io/coveralls/github/pinojs/pino-pretty)](https://coveralls.io/github/pinojs/pino-pretty?branch=master)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)\n\nThis module provides a basic [ndjson](http://ndjson.org/) formatter. If an\nincoming line looks like it could be a log line from an ndjson logger, in\nparticular the [Pino](https://getpino.io/) logging library, then it will apply\nextra formatting by considering things like the log level and timestamp.\n\nA standard Pino log line like:\n\n```\n{\"level\":30,\"time\":1522431328992,\"msg\":\"hello world\",\"pid\":42,\"hostname\":\"foo\",\"v\":1}\n```\n\nWill format to:\n\n```\n[1522431328992] INFO (42 on foo): hello world\n```\n\n<a id=\"example\"></a>\n## Example\n\nUsing the [example script][exscript] from the Pino module, and specifying\nthat logs should be colored and the time translated, we can see what the\nprettified logs will look like:\n\n![demo](demo.png)\n\n[exscript]: https://github.com/pinojs/pino/blob/fc4c83b/example.js\n\n<a id=\"install\"></a>\n## Install\n\n```sh\n$ npm install -g pino-pretty\n```\n\n<a id=\"usage\"></a>\n## Usage\n\nIt is recommended to use `pino-pretty` with `pino`\nby piping output to the CLI tool:\n\n```sh\nnode app.js | pino-pretty\n```\n\n<a id=\"cliargs\"></a>\n### CLI Arguments\n\n- `--colorize` (`-c`): Adds terminal color escape sequences to the output.\n- `--crlf` (`-f`): Appends carriage return and line feed, instead of just a line\n  feed, to the formatted log line.\n- `--errorProps` (`-e`): When formatting an error object, display this list\n  of properties. The list should be a comma-separated list of properties Default: `''`.\n- `--levelFirst` (`-l`): Display the log level name before the logged date and time.\n- `--errorLikeObjectKeys` (`-k`): Define the log keys that are associated with\n  error like objects. Default: `err,error`.\n- `--messageKey` (`-m`): Define the key that contains the main log message.\n  Default: `msg`.\n- `--levelKey` (`--levelKey`): Define the key that contains the level of the log.\n  Default: `level`.\n- `--levelLabel` (`-b`): Output the log level using the specified label.\n  Default: `levelLabel`.\n- `--messageFormat` (`-o`): Format output of message, e.g. `{levelLabel} - {pid} - url:{request.url}` will output message: `INFO - 1123 - url:localhost:3000/test`\n  Default: `false`\n- `--timestampKey` (`-a`): Define the key that contains the log timestamp.\n  Default: `time`.\n- `--translateTime` (`-t`): Translate the epoch time value into a human-readable\n  date and time string. This flag also can set the format string to apply when\n  translating the date to a human-readable format. For a list of available pattern\n  letters, see the [`dateformat` documentation](https://www.npmjs.com/package/dateformat).\n  - The default format is `yyyy-mm-dd HH:MM:ss.l o` in UTC.\n  - Require a `SYS:` prefix to translate time to the local system's time zone. A\n    shortcut `SYS:standard` to translate time to `yyyy-mm-dd HH:MM:ss.l o` in\n    system time zone.\n- `--search` (`-s`): Specify a search pattern according to\n  [jmespath](http://jmespath.org/).\n- `--ignore` (`-i`): Ignore one or several keys, nested keys are supported: (`-i time,hostname,req.headers`)\n- `--hideObject` (`-H`): Hide objects from output (but not error object)\n- `--singleLine` (`-S`): Print each log message on a single line (errors will still be multi-line)\n- `--config`: Specify a path to a config file containing the pino-pretty options.  pino-pretty will attempt to read from a `.pino-prettyrc` in your current directory (`process.cwd`) if not specified\n\n<a id=\"integration\"></a>\n## Programmatic Integration\n\nWe recommend against using `pino-pretty` in production and highly\nrecommend installing `pino-pretty` as a development dependency.\n\nWhen installed, `pino-pretty` will be used by `pino` as the default\nprettifier.\n\nInstall `pino-pretty` alongside `pino` and set the\n`prettyPrint` option to `true`:\n\n```js\nconst pino = require('pino')\nconst logger = pino({\n  prettyPrint: true\n})\n\nlogger.info('hi')\n```\n\nThe `prettyPrint` option can also be an object containing `pretty-print`\noptions:\n\n```js\nconst pino = require('pino')\nconst logger = pino({\n  prettyPrint: { colorize: true }\n})\n\nlogger.info('hi')\n```\n\nSee the [Options](#options) section for all possible options.\n\n<a id=\"options\"></a>\n### Options\n\n`pino-pretty` exports a factory function that can be used to format log strings.\nThis factory function is used internally by Pino, and accepts an options argument\nwith keys corresponding to the options described in [CLI Arguments](#cliargs):\n\n```js\n{\n  colorize: chalk.supportsColor, // --colorize\n  crlf: false, // --crlf\n  errorLikeObjectKeys: ['err', 'error'], // --errorLikeObjectKeys\n  errorProps: '', // --errorProps\n  levelFirst: false, // --levelFirst\n  messageKey: 'msg', // --messageKey\n  levelKey: 'level', // --levelKey\n  messageFormat: false, // --messageFormat\n  timestampKey: 'time', // --timestampKey\n  translateTime: false, // --translateTime\n  search: 'foo == `bar`', // --search\n  ignore: 'pid,hostname', // --ignore\n  hideObject: false, // --hideObject\n  singleLine: false, // --singleLine\n  customPrettifiers: {}\n}\n```\n\nThe `colorize` default follows\n[`chalk.supportsColor`](https://www.npmjs.com/package/chalk#chalksupportscolor).\n\n`customPrettifiers` option provides the ability to add a custom prettify function\nfor specific log properties. `customPrettifiers` is an object, where keys are\nlog properties that will be prettified and value is the prettify function itself.\nFor example, if a log line contains a `query` property,\nyou can specify a prettifier for it:\n```js\n{\n  customPrettifiers: {\n    query: prettifyQuery\n  }\n}\n//...\nconst prettifyQuery = value => {\n  // do some prettify magic\n}\n```\n\n`messageFormat` option allows you to customize the message output. A template `string` like this can define the format:\n```js\n{\n  messageFormat: '{levelLabel} - {pid} - url:{request.url}'\n}\n```\nThis option can also be defined as a `function` with this prototype:\n```js\n{\n  messageFormat: (log, messageKey, levelLabel) => {\n    // do some log message customization\n    return customized_message;\n  }\n}\n```\n\n<a id=\"license\"><a>\n## License\n\nMIT License\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 the Pino team\n\nPino team listed at https://github.com/pinojs/pino#the-team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-4.8.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-4.8.0.tgz",
    "hash": "",
    "integrity": "sha512-mhQfHG4rw5ZFpWL44m0Utjo4GC2+HMfdNvxyA8lLw0sIqn6fCf7uQe6dPckUcW/obly+OQHD7B/MTso6LNizYw==",
    "registry": "npm",
    "packageName": "pino-pretty",
    "cacheIntegrity": "sha512-mhQfHG4rw5ZFpWL44m0Utjo4GC2+HMfdNvxyA8lLw0sIqn6fCf7uQe6dPckUcW/obly+OQHD7B/MTso6LNizYw== sha1-8vMFW/IiRWIXsU/7BNi+CgzBf84="
  },
  "registry": "npm",
  "hash": "9a141f1c6e2bc39645a562f8e26d14b63a38182dbe1cc7dd36fc7203c94bc34b08aa7e9f09feee41ee9d3dc914716fe86e5cbe3901c3ec1fcc4eca3a2cd8b363"
}