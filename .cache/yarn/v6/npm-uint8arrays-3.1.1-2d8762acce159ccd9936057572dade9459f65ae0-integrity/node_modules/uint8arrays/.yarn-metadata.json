{
  "manifest": {
    "name": "uint8arrays",
    "version": "3.1.1",
    "description": "Utility functions to make dealing with Uint8Arrays easier",
    "main": "./cjs/src/index.js",
    "author": {
      "name": "Alex Potsides",
      "email": "alex@achingbrain.net"
    },
    "homepage": "https://github.com/achingbrain/uint8arrays",
    "bugs": {
      "url": "https://github.com/achingbrain/uint8arrays/issues"
    },
    "types": "types/src/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/achingbrain/uint8arrays.git"
    },
    "scripts": {
      "test": "aegir test",
      "lint": "aegir ts -p check && aegir lint",
      "release": "aegir release",
      "release-minor": "aegir release --type minor",
      "release-major": "aegir release --type major",
      "build": "aegir build"
    },
    "license": "MIT",
    "dependencies": {
      "multiformats": "^9.4.2"
    },
    "devDependencies": {
      "@types/benchmark": "^2.1.1",
      "aegir": "^35.0.0",
      "benchmark": "^2.1.4",
      "util": "^0.12.4"
    },
    "eslintConfig": {
      "extends": "ipfs",
      "parserOptions": {
        "sourceType": "module"
      },
      "ignorePatterns": [
        "!.aegir.js"
      ]
    },
    "typesVersions": {
      "*": {
        "*": [
          "types/src",
          "types/src/*"
        ]
      }
    },
    "exports": {
      ".": {
        "browser": "./esm/src/index.js",
        "require": "./cjs/src/index.js",
        "import": "./esm/src/index.js"
      },
      "./alloc": {
        "browser": "./esm/src/alloc.js",
        "require": "./cjs/src/alloc.js",
        "import": "./esm/src/alloc.js"
      },
      "./compare": {
        "browser": "./esm/src/compare.js",
        "require": "./cjs/src/compare.js",
        "import": "./esm/src/compare.js"
      },
      "./concat": {
        "browser": "./esm/src/concat.js",
        "require": "./cjs/src/concat.js",
        "import": "./esm/src/concat.js"
      },
      "./equals": {
        "browser": "./esm/src/equals.js",
        "require": "./cjs/src/equals.js",
        "import": "./esm/src/equals.js"
      },
      "./from-string": {
        "browser": "./esm/src/from-string.js",
        "require": "./cjs/src/from-string.js",
        "import": "./esm/src/from-string.js"
      },
      "./to-string": {
        "browser": "./esm/src/to-string.js",
        "require": "./cjs/src/to-string.js",
        "import": "./esm/src/to-string.js"
      },
      "./xor": {
        "browser": "./esm/src/xor.js",
        "require": "./cjs/src/xor.js",
        "import": "./esm/src/xor.js"
      }
    },
    "contributors": [
      {
        "name": "achingbrain",
        "email": "alex@achingbrain.net"
      },
      {
        "name": "Cayman",
        "email": "caymannava@gmail.com"
      },
      {
        "name": "Irakli Gozalishvili",
        "email": "contact@gozala.io"
      },
      {
        "name": "Hugo Dias",
        "email": "hugomrdias@gmail.com"
      },
      {
        "name": "Mircea Nistor",
        "email": "mirceanis@gmail.com"
      },
      {
        "name": "Rafael Ramalho",
        "email": "rafazelramalho19@gmail.com"
      },
      {
        "name": "Vasco Santos",
        "email": "vasco.santos@ua.pt"
      }
    ],
    "browser": {
      ".": "./cjs/src/index.js",
      "./alloc": "./cjs/src/alloc.js",
      "./compare": "./cjs/src/compare.js",
      "./concat": "./cjs/src/concat.js",
      "./equals": "./cjs/src/equals.js",
      "./from-string": "./cjs/src/from-string.js",
      "./to-string": "./cjs/src/to-string.js",
      "./xor": "./cjs/src/xor.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-uint8arrays-3.1.1-2d8762acce159ccd9936057572dade9459f65ae0-integrity/node_modules/uint8arrays/package.json",
    "readmeFilename": "README.md",
    "readme": "# Uint8Arrays <!-- omit in toc -->\n\nSome utility functions to make dealing with `Uint8Array`s more pleasant.\n\n- [API](#api)\n  - [alloc(size)](#allocsize)\n    - [Example](#example)\n  - [allocUnsafe(size)](#allocunsafesize)\n    - [Example](#example-1)\n  - [compare(a, b)](#comparea-b)\n    - [Example](#example-2)\n  - [concat(arrays, [length])](#concatarrays-length)\n    - [Example](#example-3)\n  - [equals(a, b)](#equalsa-b)\n    - [Example](#example-4)\n  - [fromString(string, encoding = 'utf8')](#fromstringstring-encoding--utf8)\n    - [Example](#example-5)\n  - [toString(array, encoding = 'utf8')](#tostringarray-encoding--utf8)\n    - [Example](#example-6)\n  - [xor(a, b)](#xora-b)\n    - [Example](#example-7)\n\n## API\n\n### alloc(size)\n\nCreate a new `Uint8Array`. If `globalThis.Buffer` is defined, it will be used in preference to `globalThis.Uint8Array`.\n\n#### Example\n\n```js\nimport { alloc } from 'uint8arrays/alloc`\n\nconst buf = alloc(100)\n```\n\n### allocUnsafe(size)\n\nCreate a new `Uint8Array`. If `globalThis.Buffer` is defined, it will be used in preference to `globalThis.Uint8Array`.\n\nOn platforms that support it, memory referenced by the returned `Uint8Array` will not be initialized.\n\n#### Example\n\n```js\nimport { allocUnsafe } from 'uint8arrays/alloc`\n\nconst buf = allocUnsafe(100)\n```\n\n### compare(a, b)\n\nCompare two `Uint8Arrays`\n\n#### Example\n\n```js\nimport { compare } from 'uint8arrays/compare'\n\nconst arrays = [\n  Uint8Array.from([3, 4, 5]),\n  Uint8Array.from([0, 1, 2])\n]\n\nconst sorted = arrays.sort(compare)\n\nconsole.info(sorted)\n// [\n//    Uint8Array[0, 1, 2]\n//    Uint8Array[3, 4, 5]\n// ]\n```\n\n### concat(arrays, [length])\n\nConcatenate one or more array-likes and return a `Uint8Array` with their contents.\n\nIf you know the length of the arrays, pass it as a second parameter, otherwise it will be calculated by traversing the list of arrays.\n\n#### Example\n\n```js\nimport { concat } from 'uint8arrays/concat'\n\nconst arrays = [\n  Uint8Array.from([0, 1, 2]),\n  Uint8Array.from([3, 4, 5])\n]\n\nconst all = concat(arrays, 6)\n\nconsole.info(all)\n// Uint8Array[0, 1, 2, 3, 4, 5]\n```\n\n### equals(a, b)\n\nReturns true if the two arrays are the same array or if they have the same length and contents.\n\n#### Example\n\n```js\nimport { equals } from 'uint8arrays/equals'\n\nconst a = Uint8Array.from([0, 1, 2])\nconst b = Uint8Array.from([3, 4, 5])\nconst c = Uint8Array.from([0, 1, 2])\n\nconsole.info(equals(a, b)) // false\nconsole.info(equals(a, c)) // true\nconsole.info(equals(a, a)) // true\n```\n\n### fromString(string, encoding = 'utf8')\n\nReturns a new `Uint8Array` created from the passed string and interpreted as the passed encoding.\n\nSupports `utf8` and any of the [multibase encodings](https://github.com/multiformats/multibase/blob/master/multibase.csv) as implemented by the [multiformats module](https://www.npmjs.com/package/multiformats).\n\n#### Example\n\n```js\nimport { fromString } from 'uint8arrays/from-string'\n\nconsole.info(fromString('hello world')) // Uint8Array[104, 101 ...\nconsole.info(fromString('00010203aabbcc', 'base16')) // Uint8Array[0, 1 ...\nconsole.info(fromString('AAECA6q7zA', 'base64')) // Uint8Array[0, 1 ...\nconsole.info(fromString('01234', 'ascii')) // Uint8Array[48, 49 ...\n```\n\n### toString(array, encoding = 'utf8')\n\nReturns a string created from the passed `Uint8Array` in the passed encoding.\n\nSupports `utf8` and any of the [multibase encodings](https://github.com/multiformats/multibase/blob/master/multibase.csv) as implemented by the [multiformats module](https://www.npmjs.com/package/multiformats).\n\n#### Example\n\n```js\nimport { toString } from 'uint8arrays/to-string'\n\nconsole.info(toString(Uint8Array.from([104, 101...]))) // 'hello world'\nconsole.info(toString(Uint8Array.from([0, 1, 2...]), 'base16')) // '00010203aabbcc'\nconsole.info(toString(Uint8Array.from([0, 1, 2...]), 'base64')) // 'AAECA6q7zA'\nconsole.info(toString(Uint8Array.from([48, 49, 50...]), 'ascii')) // '01234'\n```\n\n### xor(a, b)\n\nReturns a `Uint8Array` containing `a` and `b` xored together.\n\n#### Example\n\n```js\nimport { xor } from 'uint8arrays/xor'\n\nconsole.info(xor(Uint8Array.from([1, 0]), Uint8Array.from([0, 1]))) // Uint8Array[1, 1]\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/uint8arrays/-/uint8arrays-3.1.1.tgz#2d8762acce159ccd9936057572dade9459f65ae0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/uint8arrays/-/uint8arrays-3.1.1.tgz",
    "hash": "2d8762acce159ccd9936057572dade9459f65ae0",
    "integrity": "sha512-+QJa8QRnbdXVpHYjLoTpJIdCTiw9Ir62nocClWuXIq2JIh4Uta0cQsTSpFL678p2CN8B+XSApwcU+pQEqVpKWg==",
    "registry": "npm",
    "packageName": "uint8arrays",
    "cacheIntegrity": "sha512-+QJa8QRnbdXVpHYjLoTpJIdCTiw9Ir62nocClWuXIq2JIh4Uta0cQsTSpFL678p2CN8B+XSApwcU+pQEqVpKWg== sha1-LYdirM4VnM2ZNgV1ctrelFn2WuA="
  },
  "registry": "npm",
  "hash": "2d8762acce159ccd9936057572dade9459f65ae0"
}