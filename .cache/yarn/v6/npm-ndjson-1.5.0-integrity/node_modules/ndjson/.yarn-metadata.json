{
  "manifest": {
    "name": "ndjson",
    "version": "1.5.0",
    "description": "streaming newline delimited json parser + serializer",
    "main": "index.js",
    "scripts": {
      "test": "tape test.js"
    },
    "bin": {
      "ndjson": "cli.js"
    },
    "author": {
      "name": "max ogden"
    },
    "license": "BSD-3-Clause",
    "dependencies": {
      "json-stringify-safe": "^5.0.1",
      "minimist": "^1.2.0",
      "split2": "^2.1.0",
      "through2": "^2.0.3"
    },
    "devDependencies": {
      "concat-stream": "^1.5.0",
      "tape": "^4.6.3"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/maxogden/ndjson.git"
    },
    "bugs": {
      "url": "https://github.com/maxogden/ndjson/issues"
    },
    "homepage": "https://github.com/maxogden/ndjson",
    "keywords": [
      "ndjson",
      "ldjson"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ndjson-1.5.0-integrity/node_modules/ndjson/package.json",
    "readmeFilename": "readme.md",
    "readme": "# ndjson\n\nstreaming [newline delimited json](https://en.wikipedia.org/wiki/Line_Delimited_JSON) parser + serializer. Available as a JS API or a command line tool\n\n[![NPM](https://nodei.co/npm/ndjson.png)](https://nodei.co/npm/ndjson/)\n\n## usage\n\n```\nvar ndjson = require('ndjson')\n```\n\n#### ndjson.parse(opts)\n\nreturns a transform stream that accepts newline delimited json and emits objects\n\nexample newline delimited json:\n\n`data.txt`:\n\n```\n{\"foo\": \"bar\"}\n{\"hello\": \"world\"}\n```\n\nIf you want to discard non-valid JSON messages, you can call `ndjson.parse({strict: false})`\n\nusage:\n\n```js\nfs.createReadStream('data.txt')\n  .pipe(ndjson.parse())\n  .on('data', function(obj) {\n    // obj is a javascript object\n  })\n```\n\n#### ndjson.serialize() / ndjson.stringify()\n\nreturns a transform stream that accepts json objects and emits newline delimited json\n\nexample usage:\n\n```js\nvar serialize = ndjson.serialize()\nserialize.on('data', function(line) {\n  // line is a line of stringified JSON with a newline delimiter at the end\n})\nserialize.write({\"foo\": \"bar\"})\nserialize.end()\n```\n\n### license\n\nBSD-3-Clause\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ndjson/-/ndjson-1.5.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ndjson/-/ndjson-1.5.0.tgz",
    "hash": "",
    "integrity": "sha512-hUPLuaziboGjNF7wHngkgVc0FOclR8dDk/HfEvTtDr/iUrqBWiRcRSTK3/nLOqKH33th714BrMmTPtObI9gZxQ==",
    "registry": "npm",
    "packageName": "ndjson",
    "cacheIntegrity": "sha512-hUPLuaziboGjNF7wHngkgVc0FOclR8dDk/HfEvTtDr/iUrqBWiRcRSTK3/nLOqKH33th714BrMmTPtObI9gZxQ== sha1-rmA7NrE0vOw0e0UkIrC/mNWDLsg="
  },
  "registry": "npm",
  "hash": "8543cbb9ace26e81a3345ef01e782481573414e72547c74393f1df12f4ed0ebfe252ba815a245c4524cadff9cb3aa287df7b61ef5e01acc9933ed39b23d819c5"
}