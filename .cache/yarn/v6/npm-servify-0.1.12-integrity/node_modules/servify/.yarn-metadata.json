{
  "manifest": {
    "name": "servify",
    "version": "0.1.12",
    "description": "Microservices the simplest way conceivable.",
    "engines": {
      "node": ">=6"
    },
    "main": "servify-node.js",
    "browser": "servify-browser.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "browserify servify.js > dist/servify.bundle.js; ccjs dist/servify.bundle.js > dist/servify.min.js"
    },
    "author": {
      "name": "MaiaVictor"
    },
    "license": "MIT",
    "dependencies": {
      "body-parser": "^1.16.0",
      "express": "^4.14.0",
      "request": "^2.79.0",
      "xhr": "^2.3.3",
      "cors": "^2.8.1"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/maiavictor/servify"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-servify-0.1.12-integrity/node_modules/servify/package.json",
    "readmeFilename": "README.md",
    "readme": "## Servify\n\nMicroservices the simplest way conceivable.\n\n## Usage\n\n### Create a microservice:\n\n```javascript\nconst servify = require(\"servify\");\n\n// The service state\nlet count = 0;\n\n// Starts a microservice with 3 API methods\nservify.api(3000, {\n\n    // Squares a number\n    square: (x) => x * x,\n\n    // Concats two arrays\n    concat: (a, b) => a.concat(b),\n\n    // Increments and returns the counter\n    count: () => count++\n\n}).then(() => console.log(\"servified port 3000\"))\n```\n\n### Call a microservice from code:\n\n```javascript\nconst servify = require(\"servify\");\n\n// Builds the API interface from an URL\nconst api = servify.at(\"http://localhost:3000\");\n\n// Calls API methods like normal lib functions\napi.square(2)\n    .then(x => console.log(x));\n\napi.concat([1,2], [3,4])\n    .then(arr => console.log(arr));\n\napi.count()\n    .then(i => console.log(i));\n```\n\n### Call a microservice from the browser / request:\n\n```javascript\nJust access the url followed by a function call:\n\nhttp://localhost:3000/square(2)\nhttp://localhost:3000/concat([1,2], [3,4])\nhttp://localhost:3000/count()\n```\n\n## Support\n\nThis requires ES6 Proxy support, so you need node.js 6 and up. Proxies cannot be polyfilled in earlier versions.\n\n## Why\n\nWhen all you want is to create a microservice, [Express.js](http://expressjs.com) becomes annoyingly verbose. You have to worry about things like serializing/deserializing JSON, chosing how to format query/param inputs, picking a XHR lib on the client and so on. Servify is a ridiculously thin (50 LOC) lib that just standardizes that boring stuff. To create a microservice, all you need is an object of functions specifying your API. To interact with a service, all you need is its URL. You can then call its functions exactly like you would call a normal lib (except it returns a Promise, obviously).\n",
    "licenseText": "Copyright 2017Â VICTOR HERNANDES SILVA MAIA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/servify/-/servify-0.1.12.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/servify/-/servify-0.1.12.tgz",
    "hash": "",
    "integrity": "sha512-/xE6GvsKKqyo1BAY+KxOWXcLpPsUUyji7Qg3bVD7hh1eRze5bR1uYiuDA/k3Gof1s9BTzQZEJK8sNcNGFIzeWw==",
    "registry": "npm",
    "packageName": "servify",
    "cacheIntegrity": "sha512-/xE6GvsKKqyo1BAY+KxOWXcLpPsUUyji7Qg3bVD7hh1eRze5bR1uYiuDA/k3Gof1s9BTzQZEJK8sNcNGFIzeWw== sha1-FCq3vuHx0DO2bQcHCGCFsXwG25U="
  },
  "registry": "npm",
  "hash": "ff113a1afb0a2aaca8d41018f8ac4e59770ba4fb145328e2ed08376d50fb861d5e4737b96d1d6e622b8303f9371a87f5b3d053cd064424af2c35c346148cde5b"
}