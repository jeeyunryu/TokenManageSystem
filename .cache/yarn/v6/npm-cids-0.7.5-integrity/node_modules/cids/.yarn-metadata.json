{
  "manifest": {
    "name": "cids",
    "version": "0.7.5",
    "description": "CID Implementation in JavaScript",
    "leadMaintainer": "Volker Mische <volker.mische@gmail.com>",
    "main": "src/index.js",
    "types": "src/index.d.ts",
    "scripts": {
      "lint": "aegir lint",
      "test": "aegir test",
      "test:node": "aegir test --target node",
      "test:browser": "aegir test --target browser",
      "build": "aegir build",
      "release": "aegir release --docs",
      "release-minor": "aegir release --type minor --docs",
      "release-major": "aegir release --type major --docs",
      "coverage": "aegir coverage",
      "docs": "aegir docs"
    },
    "pre-push": [
      "lint",
      "test"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/multiformats/js-cid.git"
    },
    "keywords": [
      "multihash",
      "cid",
      "ipld"
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/multiformats/js-cid/issues"
    },
    "dependencies": {
      "buffer": "^5.5.0",
      "class-is": "^1.1.0",
      "multibase": "~0.6.0",
      "multicodec": "^1.0.0",
      "multihashes": "~0.4.15"
    },
    "devDependencies": {
      "aegir": "^21.3.0",
      "chai": "^4.2.0",
      "dirty-chai": "^2.0.1",
      "multihashing": "~0.3.3",
      "multihashing-async": "~0.8.0"
    },
    "engines": {
      "node": ">=4.0.0",
      "npm": ">=3.0.0"
    },
    "contributors": [
      {
        "name": "Alan Shaw",
        "email": "alan.shaw@protocol.ai"
      },
      {
        "name": "Alan Shaw",
        "email": "alan@tableflip.io"
      },
      {
        "name": "Carson Farmer",
        "email": "carson.farmer@gmail.com"
      },
      {
        "name": "David Dias",
        "email": "daviddias.p@gmail.com"
      },
      {
        "name": "Enrico Marino",
        "email": "enrico.marino@email.com"
      },
      {
        "name": "Friedel Ziegelmayer",
        "email": "dignifiedquire@gmail.com"
      },
      {
        "name": "Henrique Dias",
        "email": "hacdias@gmail.com"
      },
      {
        "name": "Hugo Dias",
        "email": "hugomrdias@gmail.com"
      },
      {
        "name": "Irakli Gozalishvili",
        "email": "contact@gozala.io"
      },
      {
        "name": "Irakli Gozalishvili",
        "email": "rfobic@gmail.com"
      },
      {
        "name": "Marcin Rataj",
        "email": "lidel@lidel.org"
      },
      {
        "name": "Mikeal Rogers",
        "email": "mikeal.rogers@gmail.com"
      },
      {
        "name": "Mitar",
        "email": "mitar.github@tnode.com"
      },
      {
        "name": "Oli Evans",
        "email": "oli@tableflip.io"
      },
      {
        "name": "Real Harry",
        "email": "sidewaybot@gmail.com"
      },
      {
        "name": "Richard Littauer",
        "email": "richard.littauer@gmail.com"
      },
      {
        "name": "Rod Vagg",
        "email": "rod@vagg.org"
      },
      {
        "name": "Victor Bjelkholm",
        "email": "victorbjelkholm@gmail.com"
      },
      {
        "name": "Volker Mische",
        "email": "volker.mische@gmail.com"
      },
      {
        "name": "bluelovers",
        "email": "codelovers@users.sourceforge.net"
      },
      {
        "name": "greenkeeper[bot]",
        "email": "greenkeeper[bot]@users.noreply.github.com"
      },
      {
        "name": "kumavis",
        "email": "kumavis@users.noreply.github.com"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-cids-0.7.5-integrity/node_modules/cids/package.json",
    "readmeFilename": "README.md",
    "readme": "# js-cid\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Travis CI](https://flat.badgen.net/travis/multiformats/js-cid)](https://travis-ci.com/multiformats/js-cid)\n[![Coverage Status](https://coveralls.io/repos/github/multiformats/js-cid/badge.svg?branch=master)](https://coveralls.io/github/multiformats/js-cid?branch=master)\n[![Dependency Status](https://david-dm.org/multiformats/js-cid.svg?style=flat-square)](https://david-dm.org/multiformats/js-cid)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n[![Greenkeeper badge](https://badges.greenkeeper.io/multiformats/js-cid.svg)](https://greenkeeper.io/)\n\n> [CID](https://github.com/multiformats/cid) implementation in JavaScript.\n\n## Lead Maintainer\n\n[Volker Mische](https://github.com/vmx)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n### In Node.js through npm\n\n```bash\n$ npm install --save cids\n```\n\n### Browser: Browserify, Webpack, other bundlers\n\nThe code published to npm that gets loaded on require is in fact an ES5 transpiled version with the right shims added. This means that you can require it and use with your favourite bundler without having to adjust asset management process.\n\n```js\nconst CID = require('cids')\n```\n\n### In the Browser through `<script>` tag\n\nLoading this module through a script tag will make the ```Cids``` obj available in the global namespace.\n\n```\n<script src=\"https://unpkg.com/cids/dist/index.min.js\"></script>\n<!-- OR -->\n<script src=\"https://unpkg.com/cids/dist/index.js\"></script>\n```\n\n#### Gotchas\n\nYou will need to use Node.js `Buffer` API compatible, if you are running inside the browser, you can access it by `multihash.Buffer` or you can install Feross's [Buffer](https://github.com/feross/buffer).\n\n## Usage\n\nYou can create an instance from a CID string or CID Buffer\n\n```js\nconst CID = require('cids')\n\nconst cid = new CID('bafybeig6xv5nwphfmvcnektpnojts33jqcuam7bmye2pb54adnrtccjlsu')\n\ncid.version       // 1\ncid.codec         // 'dag-pb'\ncid.multibaseName // 'base32'\ncid.toString()\n// 'bafybeig6xv5nwphfmvcnektpnojts33jqcuam7bmye2pb54adnrtccjlsu'\n```\n\nor by specifying the [cid version](https://github.com/multiformats/cid#versions), [multicodec name](https://github.com/multiformats/multicodec/blob/master/table.csv) and [multihash](https://github.com/multiformats/multihash):\n\n```js\nconst CID = require('cids')\nconst multihashing = require('multihashing-async')\n\nconst hash = await multihashing(Buffer.from('OMG!'), 'sha2-256')\nconst cid = new CID(1, 'dag-pb', hash)\nconsole.log(cid.toString())\n// bafybeig6xv5nwphfmvcnektpnojts33jqcuam7bmye2pb54adnrtccjlsu\n```\n\nThe string form of v1 CIDs defaults to `base32` encoding (v0 CIDs are always `base58btc` encoded). When creating a new instance you can optionally specify the default multibase to use when calling `toBaseEncodedString()` or `toString()`\n\n\n```js\nconst cid = new CID(1, 'raw', hash, 'base64')\nconsole.log(cid.toString())\n// mAXASIN69ets85WVE0ipva5M5b2mAqAZ8LME08PeAG2MxCSuV\n```\n\nIf you construct an instance from a valid CID string, the base you provided will be preserved as the default.\n\n```js\n// e.g. a base64url encoded CID\nconst cid = new CID('uAXASIHJSUj5lkfuP5VPWf_VahvhARLRqPkF24QxY-lKaSqvV')\ncid.toString()\n// uAXASIHJSUj5lkfuP5VPWf_VahvhARLRqPkF24QxY-lKaSqvV\n```\n\n\n## API\n\n### CID.isCID(cid)\n\nReturns true if object is a valid CID instance, false if not valid.\n\nIt's important to use this method rather than `instanceof` checks in\norder to handle CID objects from different versions of this module.\n\n### CID.validateCID(cid)\n\nValidates the different components (version, codec, multihash, multibaseName) of the CID\ninstance. Throws an `Error` if not valid.\n\n### new CID(version, codec, multihash, [multibaseName])\n\n`version` must be [either 0 or 1](https://github.com/multiformats/cid#versions).\n\n`codec` must be a string of a valid [registered codec](https://github.com/multiformats/multicodec/blob/master/table.csv).\n\n`multihash` must be a `Buffer` instance of a valid [multihash](https://github.com/multiformats/multihash).\n\n`multibaseName` optional string. Must be a valid [multibase](https://github.com/multiformats/multibase/blob/master/multibase.csv) name. Default is `base58btc` for v0 CIDs or `base32` for v1 CIDs.\n\n### new CID(baseEncodedString)\n\nAdditionally, you can instantiate an instance from a base encoded\nstring.\n\n### new CID(Buffer)\n\nAdditionally, you can instantiate an instance from a buffer.\n\n#### cid.codec\n\nProperty containing the codec string.\n\n#### cid.version\n\nProperty containing the CID version integer.\n\n#### cid.multihash\n\nProperty containing the multihash buffer.\n\n#### cid.multibaseName\n\nProperty containing the default base to use when calling `.toString`\n\n#### cid.buffer\n\nProperty containing the full CID encoded as a `Buffer`.\n\n#### cid.prefix\n\nProprety containing a buffer of the CID version, codec, and the prefix\nsection of the multihash.\n\n#### cid.toV0()\n\nReturns the CID encoded in version 0. Only works for `dag-pb` codecs.\n\nThrows if codec is not `dag-pb`.\n\n#### cid.toV1()\n\nReturns the CID encoded in version 1.\n\n#### cid.toBaseEncodedString(base=this.multibaseName)\n\nReturns a base encoded string of the CID. Defaults to the base encoding in `this.multibaseName`.\n\nThe value of `this.multibaseName` depends on how the instance was constructed:\n\n1. If the CID was constructed from an object that already had a multibase (a string or an existing CID) then it retains that base.\n2. If the CID was constructed from an object that _did not_ have a multibase (a buffer, or by passing only version + codec + multihash to the constructor), then `multibaseName` will be `base58btc` for a v0 CID or `base32` for a v1 CID.\n\n#### cid.toString(base=this.multibaseName)\n\nShorthand for `cid.toBaseEncodedString` described above.\n\n#### cid.equals(cid)\n\nCompare cid instance. Returns true if CID's are identical, false if\notherwise.\n\n## Contribute\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\nContributions welcome. Please check out [the issues](https://github.com/multiformats/js-cid/issues).\n\nCheck out our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general. Please be aware that all interactions related to multiformats are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Friedel Ziegelmayer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/cids/-/cids-0.7.5.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/cids/-/cids-0.7.5.tgz",
    "hash": "",
    "integrity": "sha512-zT7mPeghoWAu+ppn8+BS1tQ5qGmbMfB4AregnQjA/qHY3GC1m1ptI9GkWNlgeu38r7CuRdXB47uY2XgAYt6QVA==",
    "registry": "npm",
    "packageName": "cids",
    "cacheIntegrity": "sha512-zT7mPeghoWAu+ppn8+BS1tQ5qGmbMfB4AregnQjA/qHY3GC1m1ptI9GkWNlgeu38r7CuRdXB47uY2XgAYt6QVA== sha1-YKCBOKmb+2m2vkzrY7/vejlrKLI="
  },
  "registry": "npm",
  "hash": "cd3ee63de821a1602efa9a67f3e052d6d439a8699b31f07802b7a09d08c0fea1d8dc60b59b5a6d23d1a458d9607aedfcafb0ae45d5c1e3bb98d9780062de9054"
}