{
  "manifest": {
    "name": "timestamp-nano",
    "description": "Timestamp for 64-bit time_t, nanosecond precision and strftime",
    "version": "1.0.1",
    "author": {
      "name": "@kawanet"
    },
    "browser": "./dist/timestamp.min.js",
    "bugs": {
      "url": "https://github.com/kawanet/timestamp-nano/issues"
    },
    "contributors": [
      {
        "name": "Yusuke Kawasaki",
        "email": "u-suke@kawa.net"
      },
      {
        "name": "Trevor Robinson",
        "email": "tprobinson93@protonmail.com"
      }
    ],
    "devDependencies": {
      "browserify": "^17.0.0",
      "int64-buffer": "^1.0.1",
      "jshint": "^2.13.6",
      "mocha": "^10.2.0",
      "nyc": "^15.1.0",
      "strftime": "^0.10.1",
      "typedoc": "^0.13.0",
      "uglify-js": "^3.17"
    },
    "engines": {
      "node": ">= 4.5.0"
    },
    "files": [
      "browser/import.js",
      "dist/timestamp.min.js",
      "timestamp.js",
      "typings/timestamp.d.ts"
    ],
    "homepage": "https://github.com/kawanet/timestamp-nano#readme",
    "jshintConifg": {
      "undef": true,
      "unused": true,
      "node": true
    },
    "keywords": [
      "date",
      "datetime",
      "microsecond",
      "nanosecond",
      "strftime",
      "time_t",
      "timestamp"
    ],
    "license": "MIT",
    "main": "./timestamp.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/kawanet/timestamp-nano.git"
    },
    "scripts": {
      "build": "make",
      "fixpack": "fixpack",
      "jshint": "./node_modules/.bin/jshint .",
      "mocha": "./node_modules/.bin/mocha test/*.js",
      "prepack": "npm run build && npm test",
      "test": "make test",
      "test-browser": "make test-browser"
    },
    "type": "commonjs",
    "typings": "typings/timestamp.d.ts",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-timestamp-nano-1.0.1-be6eb118719504fcc3c7c732d2c461d3dd87da63-integrity/node_modules/timestamp-nano/package.json",
    "readmeFilename": "README.md",
    "readme": "# Timestamp for 64-bit time_t, nanosecond precision and strftime\n\n[![npm version](https://badge.fury.io/js/timestamp-nano.svg)](https://badge.fury.io/js/timestamp-nano)\n[![npm version](https://img.shields.io/npm/v/timestamp-nano)](https://www.npmjs.com/package/timestamp-nano)\n[![gzip size](https://img.badgesize.io/https://unpkg.com/timestamp-nano/dist/timestamp.min.js?compression=gzip)](https://unpkg.com/timestamp-nano/dist/timestamp.min.js)\n\nJavaScript's native `Date` will end at 275 thousand years later.\n64-bit signed `time_t` still works for 292 billion years, on the other hand.\n`Date` has only milliseconds precision since 20th century.\nNow we need longer range and higher precisions.\nTry **[Live Demo](https://kawanet.github.io/timestamp-nano/demo/index.html)** now!\n\n### Features\n\n- Longer range for `time_t`: `+292277026596-12-04T15:30:07Z`\n- Nanoseconds precision: `1970-01-01T00:00:00.000000001Z`\n- Bundled formatter: `\"%Y-%m-%dT%H:%M:%S.%NZ\"`, `\"%a, %b %d %X %Y %z (%Z)\"`\n- Small: just 3KB minified [timestamp.min.js](https://rawgit.com/kawanet/timestamp-nano/master/dist/timestamp.min.js) available for Web browsers.\n- No dependencies: no other module required. Portable pure JavaScript.\n\n### Synopsis\n\n```js\nvar Timestamp = require(\"timestamp-nano\");\n\nTimestamp.fromDate(new Date()).toJSON(); // => \"2017-11-26T13:36:22.213Z\"\n\nTimestamp.fromString(\"2017-11-26T13:36:22.213Z\").getTimeT(); // => 1511703382\n\n// 64-bit time_t\nTimestamp.fromTimeT(1511703382).writeInt64BE(); // => [0,0,0,0,90,26,195,86]\n\nTimestamp.fromInt64BE([0,0,0,0,90,26,195,86]).toDate().getUTCHours(); // => 13\n\n// nanoseconds precision\nTimestamp.fromInt64LE([86,195,26,90,0,0,0,0]).addNano(123456789).toJSON(); // => \"2017-11-26T13:36:22.123456789Z\"\n\nTimestamp.fromString(\"2017-11-26T13:36:22.123456789Z\").getNano(); // => 123456789\n```\n\n### Live Demo\n\n- [https://kawanet.github.io/timestamp-nano/demo/index.html](https://kawanet.github.io/timestamp-nano/demo/index.html)\n\n### Documentation\n\n- [https://kawanet.github.io/timestamp-nano/typedoc/classes/timestamp.html](https://kawanet.github.io/timestamp-nano/typedoc/classes/timestamp.html)\n\n### Format Specifiers\n\n`toString()` method accepts `strftime` specifier characters as below.\n\n- `%%` - Literal `%` character.\n- `%a` - Abbreviated weekday name: `Sun` to `Sat`\n- `%b` - Abbreviated month name: `Jan` to `Dec`\n- `%d` - Day: `01` to `31` (padded with zero)\n- `%e` - Day: ` 1` to `31` (padded with space)\n- `%F` - Equivalent to `%Y-%m-%d`\n- `%H` - Hour: `00` to `23`\n- `%L` - Milliseconds: `000` to `999`\n- `%M` - Minute: `00` to `59`\n- `%m` - Month: `01` to `12`\n- `%N` - Nanoseconds: `000000000` to `999999999`\n- `%n` - Newline character\n- `%R` - Equivalent to `%H:%M`\n- `%S` - Second: `00` to `59`\n- `%T` - Equivalent to `%H:%M:%S`\n- `%t` - Tab character\n- `%X` - Equivalent to `%T`\n- `%Y` - Year: `0000` to `9999`, or `+275760`, `-271821`, etc.\n- `%Z` - Constant timezone name: `GMT`\n- `%z` - Constant timezone offset: `+0000`\n\n### Node.js\n\n- [https://www.npmjs.com/package/timestamp-nano](https://www.npmjs.com/package/timestamp-nano)\n\n```sh\nnpm install timestamp-nano --save\n```\n\n### Browsers\n\n- [https://rawgit.com/kawanet/timestamp-nano/master/dist/timestamp.min.js](https://rawgit.com/kawanet/timestamp-nano/master/dist/timestamp.min.js)\n\n```html\n<script src=\"https://rawgit.com/kawanet/timestamp-nano/master/dist/timestamp.min.js\"></script>\n<script>\n  var dt = new Date();\n  var ts = Timestamp.fromDate(dt);\n  alert(ts.toString());\n</script>\n```\n\n### GitHub\n\n- [https://github.com/kawanet/timestamp-nano](https://github.com/kawanet/timestamp-nano)\n\n### See Also\n\n- [https://www.npmjs.com/package/int64-buffer](https://www.npmjs.com/package/int64-buffer) - for 64bit `time_t` long long value\n- [https://www.npmjs.com/package/strftime](https://www.npmjs.com/package/strftime) - for formatting with timezone or locale\n- [https://github.com/kawanet/cdate](https://github.com/kawanet/cdate) - cdate - a compact calendar date and strftime\n\n### The MIT License (MIT)\n\nCopyright (c) 2017-2022 Yusuke Kawasaki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017-2022 Yusuke Kawasaki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/timestamp-nano/-/timestamp-nano-1.0.1.tgz#be6eb118719504fcc3c7c732d2c461d3dd87da63",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/timestamp-nano/-/timestamp-nano-1.0.1.tgz",
    "hash": "be6eb118719504fcc3c7c732d2c461d3dd87da63",
    "integrity": "sha512-4oGOVZWTu5sl89PtCDnhQBSt7/vL1zVEwAfxH1p49JhTosxzVQWYBYFRFZ8nJmo0G6f824iyP/44BFAwIoKvIA==",
    "registry": "npm",
    "packageName": "timestamp-nano",
    "cacheIntegrity": "sha512-4oGOVZWTu5sl89PtCDnhQBSt7/vL1zVEwAfxH1p49JhTosxzVQWYBYFRFZ8nJmo0G6f824iyP/44BFAwIoKvIA== sha1-vm6xGHGVBPzDx8cy0sRh092H2mM="
  },
  "registry": "npm",
  "hash": "be6eb118719504fcc3c7c732d2c461d3dd87da63"
}